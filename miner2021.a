; miner2021.a
;
;debugPixelCollision
optionCheatOn
optionMusicOff

; constants
charSPACE                           = $20       ;

black                               = 0
red                                 = 1
green                               = 2
yellow                              = 3
blue                                = 4
magenta                             = 5
cyan                                = 6
white                               = 7
flashingblackwhite                  = 8
flashingredcyan                     = 9
flashinggreenmagenta                = 10
flashingyellowblue                  = 11
flashingblueyellow                  = 12
flashingmagentagreen                = 13
flashingcyanred                     = 14
flashingwhiteblack                  = 15

keyCodeDELETE                       = $a6
keyCodeESCAPE                       = $8f
keyCodeS                            = $ae
keyCodeQ                            = $ef
keyCodeCOPY                         = $96
keyCodeSHIFT                        = $ff
keyCodeRETURN                       = $b6
keyCodeZ                            = $9e
keyCodeX                            = $bd
keyCodeColon                        = $b7
keyCodeForwardSlash                 = $97

; OS memory locations
interruptAccumulator                = $fc       ; RESERVED for INTERRUPTS
irqv1                               = $204      ;
irqv2                               = $206      ;

logicalScreenStart                  = $3000     ;

; **************** BBC SHEILA *******************
videoULAPaletteRegister             = $fe21     ; Video ULA palette register

; System timer 1
systemVIATimer1CounterLow           = $fe44     ;
systemVIATimer1CounterHigh          = $fe45     ;
systemVIATimer1LatchLow             = $fe46     ;
systemVIATimer1LatchHigh            = $fe47     ;

systemVIAAuxiliaryControlRegister   = $fe4b     ;
systemVIAInterruptFlagRegister      = $fe4d     ;
systemVIAInterruptEnableRegister    = $fe4e     ;

; User timer 1
userVIATimer1CounterLow             = $fe64     ;
userVIATimer1CounterHigh            = $fe65     ;
userVIATimer1LatchLow               = $fe66     ;
userVIATimer1LatchHigh              = $fe67     ;

userVIAAuxiliaryControlRegister     = $fe6b     ;
userVIAInterruptFlagRegister        = $fe6d     ;
userVIAInterruptEnableRegister      = $fe6e     ;

; ***************** OS CALLS ********************
OSWRCH                          = $ffee     ;
OSWORD                          = $fff1     ;
OSBYTE                          = $fff4     ;
OSCLI                           = $fff7     ;


; ***************************************************************************************
; game specifics

; zero page memory locations
altScreenAddressLow             = $00       ;
altScreenAddressHigh            = $01       ;
cachedCellX                     = $02       ;
cachedCellY                     = $03       ;
cursorX                         = $04       ;
cursorY                         = $05       ;
readCharScreenAddressLow        = $06       ;
readCharScreenAddressHigh       = $07       ;
metronome                       = $08       ; 0, 1, 2, 3
unused09                        = $09       ;
cellScreenAddressLow            = $0a       ;
cellScreenAddressHigh           = $0b       ;
airScreenAddressLow             = $0c       ;
airScreenAddressHigh            = $0d       ;

airRemainingOffsetWithinCell    = $0e       ;
airRemainingDelayCounter        = $0f       ;
score                           = $10       ; three bytes for the BCD score
score2                          = $11       ;
score3                          = $12       ;

lives                           = $13       ;
level20EnergyFieldsTimer        = $14       ;
willyHighestPointReachedOnCurrentJump = $15 ;
willyIsOnGround                 = $16       ;
willyOffsetWithinCellY          = $17       ;
airRemaining                    = $18       ;
playerPixelX                    = $19       ;
playerPixelY                    = $1a       ;
newPlayerPixelX                 = $1b       ;
newPlayerPixelY                 = $1c       ;
hasDrawnConveyors               = $1d       ;
tempHigh                        = $1e       ;
saveX                           = $1f       ;
characterFromScreen             = $20       ;
characterFromScreen2            = $21       ;
characterFromScreen3            = $22       ;
characterFromScreen4            = $23       ;
characterFromScreen5            = $24       ;
characterFromScreen6            = $25       ;
characterFromScreen7            = $26       ;
characterFromScreen8            = $27       ;
exitPositionX                   = $28       ;
exitPositionY                   = $29       ;
verticalAnimationCounter        = $2a       ; animation for vertical guardinas
currentGuardianX                = $2b       ;
currentGuardianY                = $2c       ;
currentGuardianExtent1          = $2d       ;
currentGuardianExtent2          = $2e       ;
currentGuardianIndex            = $2f       ;
tempGuardianSpriteOffset        = $30       ;
guardianSpriteOffsets           = $31       ;
guardianSpriteOffsets2          = $32       ;
guardianSpriteOffsets3          = $33       ;
tempGuardianSpriteAddrLow       = $34       ;
tempGuardianSpriteAddrHigh      = $35       ;
currentGuardianSpeed            = $36       ;
screenCharacterAPrime           = $37       ;
willyDeltaX                     = $38       ;
willyAnimationEOR               = $39       ; 0 if pointing right; 3 if pointing left
willyGraphicsPage               = $3a       ;
willyChangedDirection           = $3b       ;

; reading a character from the screen
tempLoopCounter                 = $3c       ;
tempByte                        = $3d       ;
tempMask                        = $3e       ;
plotColourMask                  = $3f       ;
tempScreenAddressLow            = $40       ;
tempScreenAddressHigh           = $41       ;

keyCounter                      = $42       ;
flashingExitCounter             = $43       ;

willyFalling                    = $44       ;
willyJustLandedOnConveyor       = $45       ;
screenCharacterA                = $46       ;
screenCharacterB                = $47       ;
isJumping                       = $48       ;
playerHeightOnTakeOff           = $49       ;
jumpPhase                       = $4a       ;
jumpDirection                   = $4b       ;
spriteRowCounter                = $4c       ;
playerXOffsetWithinCell         = $4d       ;
playerYNegativeOffsetWithinCell = $4e       ;
willyIsOnConveyor               = $4f       ;
willyDirectionAgainstFlowOfConveyor = $50   ; $01 or $ff when moving against the flow of the conveyor
spriteColourMask                = $51       ;
currentGuardianColour           = $52       ;
exitColour                      = $53       ;
drawGuardianLoopCounter         = $54       ;
conveyorX                       = $55       ;
conveyorY                       = $56       ;
conveyorLength                  = $57       ;
conveyorSpriteOffset            = $58       ;
tempA                           = $59       ;
tempX                           = $5a       ;
tempY                           = $5b       ;
byteToReverse                   = $5c       ;
keysLeft                        = $5d       ;
currentNoteTimePlayed           = $5e       ;
musicCounter                    = $5f       ;
channel2Frequency               = $60       ;
previousNoteByte                = $61       ;
rememberCharacterToDraw         = $62       ;
byteToWrite                     = $63       ;

meteorTailAnimationOffset       = $64       ;
energyFieldSpriteOffset         = $64       ;
collisionFudgeFactor            = $65       ;

footPositionY                   = $66       ;
cheatModeEnabled                = $67       ;
levelNumberCounter              = $68       ;
tempCounter                     = $68       ;
zeroBasedLevel                  = $69       ;
roomNumberReached               = $6a       ;
keyPositionCounter              = $6b       ;
currentKeyIndex                 = $6c       ;
keyColourCounter                = $6d       ;
attractModeTimer                = $6e       ;
cheatCodeCounter                = $6f       ;

levelDataOffset                 = $70       ;

plotMode                        = $70       ;
plotX                           = $71       ;
plotY                           = $72       ;
plotXOffset                     = $73       ;
plotYOffset                     = $74       ;
plotScreenAddressLow            = $75       ;
plotScreenAddressHigh           = $76       ;
plotSourceSpriteAddressLow      = $77       ;
plotSourceSpriteAddressHigh     = $78       ;

currentLevelFeatureIndex        = $79       ;

; ***************************************************************************************
; level decode
singleItemSprite                = $7a       ;
decodeLevelByte                 = $7b       ;
singleItemX                     = $7c       ;
singleItemY                     = $7d       ;
singleItemOffsetX               = $7e       ;
singleItemType                  = $7f       ;

currentLevel                    = $80       ;
levelColours                    = $81       ;
levelColours2                   = $82       ;
screenLow                       = $85       ;
screenHigh                      = $86       ;
cellPlotSourceSpriteAddressLow  = $87       ;
cellPlotSourceSpriteAddressHigh = $88       ;
rasterArea                      = $89       ;
zpGuardianPositionX             = $8a       ;
zpGuardianPositionY             = $8b       ;
zpGuardianLimit1                = $8c       ;
zpGuardianLimit2                = $8d       ;
zpGuardianAnimIndex             = $8e       ;
singleItemSpriteOffset          = $8f       ;
musicEnabled                    = $90       ;
energyFieldTimer                = $91       ;

; ***************************************************************************************
kongYCoordinate                 = $92       ;
kongBeastSwitchTriggered        = $93       ;
kongAnimationCounter            = $94       ;

; ***************************************************************************************
eugenePositionY                 = $95       ; top bit indicates current direction
copyEugeneSourceByte            = $96       ;
copyEugeneTempByte              = $97       ; } shared
copyWhichSprite                 = $97       ; }

conveyorDirection               = $98       ;
textCursorX                     = $99       ;
textCursorY                     = $9a       ;

; ***************************************************************************************
meteorLandingY                  = $9b       ;
meteorXCoordinate               = $9c       ;
meteorYCoordinate               = $9d       ;
meteorAnimationState            = $9e       ;
meteorIndex                     = $9f       ;

; ***************************************************************************************
sideWallColour1                 = $a0       ;
sideWallColour2                 = $a1       ;
newSingleItemColour             = $a2       ;
conveyorColour                  = $a3       ;
volumeIndex                     = $a4       ;
saveY                           = $a5       ;
energyFieldLoopIndex            = $a6       ;


; ***************************************************************************************
collisionPlayerX                = $100      ;
collisionGuardianX              = $101      ;
collisionGuardianY              = $102      ;
collisionLow                    = $103      ;
collisionHigh                   = $104      ;
verticalToleranceTL             = $105      ;
verticalToleranceTR             = $106      ;
verticalToleranceBL             = $107      ;
verticalToleranceBR             = $108      ;
verticalToleranceReversedTL     = $109      ;
verticalToleranceReversedTR     = $10a      ;
verticalToleranceReversedBL     = $10b      ;
verticalToleranceReversedBR     = $10c      ;
horizontalToleranceTL           = $10d      ;
horizontalToleranceTR           = $10e      ;
horizontalToleranceBL           = $10f      ;
horizontalToleranceBR           = $110      ;
horizontalToleranceReversedTL   = $111      ;
horizontalToleranceReversedTR   = $112      ;
horizontalToleranceReversedBL   = $113      ;
horizontalToleranceReversedBR   = $114      ;
toleranceTL                     = $115      ;
toleranceTR                     = $116      ;
toleranceBL                     = $117      ;
toleranceBR                     = $118      ;
toleranceReversedTL             = $119      ;
toleranceReversedTR             = $11a      ;
toleranceReversedBL             = $11b      ;
toleranceReversedBR             = $11c      ;
guardianPositionsCopy           = $11d      ;
guardianPositionsCopy1          = $11e      ;
guardianPositionsCopy2          = $11f      ;
guardianPositionsCopy3          = $120      ;
guardianPositionsCopy4          = $121      ;
willySpriteAddressLow           = $122      ;
willySpriteAddressHigh          = $123      ;
willySpriteAddressHigh1         = $124      ; [UNUSED, but copied in and out of cache]
willySpriteAddressHigh2         = $125      ; [UNUSED, but copied in and out of cache]
willySpriteAddressHigh3         = $126      ; [UNUSED, but copied in and out of cache]

horizontalGuardianPositions     = $127      ; } first guardian
horizontalGuardianPositions1    = $128      ; } first guardian
horizontalGuardianPositions2    = $129      ; } first guardian
horizontalGuardianPositions3    = $12a      ; } first guardian

horizontalGuardianPositions4    = $12b      ; } second guardian
horizontalGuardianPositions5    = $12c      ; } second guardian
horizontalGuardianPositions6    = $12d      ; } second guardian
horizontalGuardianPositions7    = $12e      ; } second guardian

horizontalGuardianPositions8    = $12f      ; } third guardian
horizontalGuardianPositions9    = $130      ; } third guardian
horizontalGuardianPositions10   = $131      ; } third guardian
horizontalGuardianPositions11   = $132      ; } third guardian

horizontalGuardianPositions12   = $133      ; } fourth guardian
horizontalGuardianPositions13   = $134      ; } fourth guardian
horizontalGuardianPositions14   = $135      ; } fourth guardian
horizontalGuardianPositions15   = $136      ; } fourth guardian

horizontalGuardianPositionsTerminator = $137 ; terminator

; ***************************************************************************************
; Each vertical guardian has four bytes in this table
; <x coord + top bit for direction + bit 6 for speed>, <y coord>, <Y extent 1>, <Y extent 2>
currentVerticalGuardians        = $138      ; } first guardian x
currentVerticalGuardians1       = $139      ; } first guardian y
currentVerticalGuardians2       = $13a      ; } first guardian y extent 1
currentVerticalGuardians3       = $13b      ; } first guardian y extent 2

verticalGuardian2
currentVerticalGuardians4       = $13c      ; } second guardian x
currentVerticalGuardians5       = $13d      ; } second guardian y
currentVerticalGuardians6       = $13e      ; } second guardian y extent 1
currentVerticalGuardians7       = $13f      ; } second guardian y extent 2

currentVerticalGuardians8       = $140      ; } third guardian x
currentVerticalGuardians9       = $141      ; } third guardian y
currentVerticalGuardians10      = $142      ; } third guardian y extent 1
currentVerticalGuardians11      = $143      ; } third guardian y extent 2

currentVerticalGuardians12      = $144      ; } fourth guardian x
currentVerticalGuardians13      = $145      ; } fourth guardian y
currentVerticalGuardians14      = $146      ; } fourth guardian y extent 1
currentVerticalGuardians15      = $147      ; } fourth guardian y extent 2

keyXPositions                   = $148      ; X position of key 0
keyXPositions1                  = $149      ; X position of key 1
keyXPositions2                  = $14a      ; X position of key 2
keyXPositions3                  = $14b      ; X position of key 3
keyXPositions4                  = $14c      ; X position of key 4

keyYPositions                   = $14d      ; Y position of key 0
keyYPositions1                  = $14e      ; Y position of key 1
keyYPositions2                  = $14f      ; Y position of key 2
keyYPositions3                  = $150      ; Y position of key 3
keyYPositions4                  = $151      ; Y position of key 4

keyGot                          = $152      ; key 0 obtained
keyGot1                         = $153      ; key 1 obtained
keyGot2                         = $154      ; key 2 obtained
keyGot3                         = $155      ; key 3 obtained
keyGot4                         = $156      ; key 4 obtained

highScore                       = $157      ; three bytes for the BCD score
highScore2                      = $158      ;
highScore3                      = $159      ;

; ***************************************************************************************
verticalGuardianMODE1Address    = $0400     ;
verticalGuardianMODE1Address1   = $0440     ;
verticalGuardianMODE1Address2   = $0480     ;
verticalGuardianMODE1Address3   = $04c0     ;

screenStartAddress              = $3280     ; start of visible screen
blankAreaOfScreen               = $34d0     ; empty screen area to the right of the play area
playAreaEndAddress              = $5a80     ;
screenEndAddress                = $6480     ; end of visible screen
backgroundCache                 = $7fa0     ; six character cells copied from the screen before the player is drawn

; ***************************************************************************************
; This is the number of timer ticks per frame (num PAL scanlines * 62us/line)
; This timing is only true of non-interlaced modes.
; We have to subtract 2 because the latch reload costs 2us.
; This is not documented anywhere!
FramePeriod     = 312*62-2

; Calculate here the timer value to interrupt at the desired line
TimerValue      = 88*62 + 25

; This is the delay between interrupts (three character rows)
ShortTimerValue = 24*62 + 46

* = $0400
; ***************************************************************************************
initialize
    lda #$ff                                    ;
    sta horizontalGuardianPositionsTerminator   ;
    sta musicCounter                        ;
    sta rasterArea                          ;
    sta channel2Frequency                   ;
    sta previousNoteByte                    ;
    sta musicEnabled                        ;
    lda #200                                ;
    sta currentNoteTimePlayed               ;
    lda #0
!ifdef optionMusicOff {
    sta musicEnabled                        ;
}
!ifdef optionCheatOn {
    lda #1                                  ;
}
    sta cheatModeEnabled                    ;
    jsr pauseMusic                          ;

    ; install irq code
    sei
    lda #$7F                                ; }
    sta userVIAInterruptEnableRegister      ; } Disable all interrupts

    lda irqv1                               ;
    sta oldIrq1RoutineLow                   ;
    lda irqv1 + 1                           ;
    sta oldIrq1RoutineHigh                  ;

    lda #<mainInterruptRoutine              ;
    sta irqv1                               ;
    lda #>mainInterruptRoutine              ;
    sta irqv1 + 1                           ;

    lda #$c0                                ; }
    sta userVIAInterruptEnableRegister      ; } Enable User VIA timer 1

    ; set User VIA T1 in free run mode (i.e. repeating)
    lda #$c0                                ; }
    sta userVIAAuxiliaryControlRegister     ; } Start User VIA T1 in free run mode


    ; write User VIA T1 low now (the timer will not be written until you write the high byte)
    lda #<TimerValue                        ;
    sta userVIATimer1CounterLow             ;
    ; get high byte ready so we can write it as quickly as possible at the right moment
    ldx #>TimerValue                        ;

    ; wait for VSync without having to catch it from its IRQ
    lda #2                                  ;
    sta systemVIAInterruptFlagRegister      ; clear VSync flag
-
    bit systemVIAInterruptFlagRegister      ;
    beq -                                   ; poll VSync flag

    stx userVIATimer1CounterHigh            ; start User VIA Timer 1 counting
    sta userVIAInterruptFlagRegister        ; clear VSync flag

    ; set timer to fire every frame (set latch)
    lda #<ShortTimerValue                   ;
    sta userVIATimer1LatchLow               ;
    lda #>ShortTimerValue                   ;
    sta userVIATimer1LatchHigh              ;
    lda #0                                  ;
    sta rasterArea                          ;
    cli                                     ;

    ; print VDU stream
    jsr printFollowingMessage               ;
    !byte crtcSetupEnd - crtcSetup
crtcSetup
    !byte 23, 0,  7,  30, 0,0,0,0,0,0,0,0   ; VDU 23,0,7,30,0;0;0;0;   vertical sync position = 30
    !byte 23, 1,  0,   0, 0,0,0,0,0,0,0,0   ; VDU 23,0,1, 0,0;0;0;0;   horizontal displayed = 0
    !byte 23, 0, 13, $50, 0,0,0,0,0,0,0,0   ; set display address (low)
    !byte 26                                ; Reset text and graphics windows
crtcSetupEnd

    ; *FX 229,1 - ESCAPE generates ASCII code
    lda #229                        ;
    ldx #1                          ;
    ldy #0                          ;
    jsr OSBYTE                      ;

    ; clear high score
    lda #0                          ;
    sta highScore                   ;
    sta highScore + 1               ;
    sta highScore + 2               ;

    jmp showTitleScreen             ;

* = $0500

; ***************************************************************************************
; 8 poses of Miner Willy, 4 walking right and four walking left
; stored in Mode 1 format
minerWilly
!pseudopc $0500 {
willyRight0
    ; right0
    !byte $00, $33, $77, $33, $33, $33, $11, $33, $66, $ee, $cc, $44, $ee, $cc, $88, $cc
eraseGuardianEmptyBytes
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $77, $77, $ff, $ff, $33, $77, $66, $77, $ee, $ee, $77, $bb, $cc, $66, $ee, $77
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00

    ; right1
    !byte $00, $00, $11, $00, $00, $00, $00, $00, $11, $ff, $ff, $dd, $ff, $ff, $66, $ff
    !byte $88, $88, $00, $00, $88, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $11, $11, $11, $11, $00, $00, $00, $00, $bb, $bb, $bb, $dd, $ff, $66, $66, $77
    !byte $88, $88, $88, $88, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00

    ; right2
willyRight2
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $77, $33, $33, $33, $11, $33
    !byte $66, $ee, $cc, $44, $ee, $cc, $88, $cc, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $77, $77, $ff, $ff, $33, $77, $66, $77
    !byte $ee, $ee, $77, $bb, $cc, $66, $ee, $77, $00, $00, $00, $00, $00, $00, $00, $00

    ; right3
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $00, $00, $00
    !byte $11, $ff, $ff, $dd, $ff, $ff, $66, $ff, $88, $88, $00, $00, $88, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $11, $33, $77, $66, $00, $11, $33, $33
    !byte $ff, $ff, $ff, $ff, $ff, $dd, $00, $88, $88, $cc, $ee, $66, $88, $aa, $ee, $44

    ; $0600
willyLeft0
    ; left0
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $66, $77, $33, $22, $77, $33, $11, $33, $00, $cc, $ee, $cc, $cc, $cc, $88, $cc
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $77, $77, $ee, $dd, $33, $66, $77, $ee, $ee, $ee, $ff, $ff, $cc, $ee, $66, $ee

    ; left1
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $11, $11, $00, $00, $11, $00, $00, $00
    !byte $88, $ff, $ff, $bb, $ff, $ff, $66, $ff, $00, $00, $88, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $11, $11, $11, $11, $00, $00, $00, $00
    !byte $dd, $dd, $dd, $bb, $ff, $66, $66, $ee, $88, $88, $88, $88, $00, $00, $00, $00

    ; left2
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $66, $77, $33, $22, $77, $33, $11, $33
    !byte $00, $cc, $ee, $cc, $cc, $cc, $88, $cc, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $77, $77, $ee, $dd, $33, $66, $77, $ee
    !byte $ee, $ee, $ff, $ff, $cc, $ee, $66, $ee, $00, $00, $00, $00, $00, $00, $00, $00

    ; left3
    !byte $11, $11, $00, $00, $11, $00, $00, $00, $88, $ff, $ff, $bb, $ff, $ff, $66, $ff
    !byte $00, $00, $88, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $11, $33, $77, $66, $11, $55, $77, $22, $ff, $ff, $ff, $ff, $ff, $bb, $00, $11
    !byte $88, $cc, $ee, $66, $00, $88, $cc, $cc, $00, $00, $00, $00, $00, $00, $00, $00
}
minerWillyEnd


; ***************************************************************************************
manicMinerGraphic
    ; Small caps flowery "MANIC MINER (C)" graphic
    !byte %........    ;              ####   ###
    !byte %........    ;               ###  ###      ###     ###   #### ####    #####
    !byte %........    ;              ## # ####     ## ##     ###   ##   ##    ##   ##
    !byte %....##..    ;       ##    ##  ### ##    ##   ##    ####  ##   ##   ##
    !byte %...#..#.    ;      #  #  ##   ##  ##    ##   ##    ## ## ##   ##   ##
    !byte %...#....    ;      #    ##        ##   #########   ##  ####   ##   ##
    !byte %...#...#    ;      #   ##         ##   ##     ##   ##   ###   ##    ##   ##
    !byte %....####    ;       ####         #### ####   #### ####   ##  ####    #####

    !byte %...####.    ;        #######    ####                                           ####
    !byte %....###.    ;       #    ####  ####  #### ###   #### ######## ########        #    #
    !byte %...##.#.    ;       #  # ## #### ##   ##   ###   ##   ##   ##  ##    ##      #  ##  #
    !byte %..##..##    ;        ##  ##  ##  ##   ##   ####  ##   ## #     ##    ##      # #    #
    !byte %.##...##    ;            ##      ##   ##   ## ## ##   ####     #######       # #    #
    !byte %##......    ;            ##      ##   ##   ##  ####   ## #     ##   ##       #  ##  #
    !byte %#.......    ;            ##      ##   ##   ##   ###   ##   ##  ##    ##  #    #    #
    !byte %........    ;           ####    #### #### ####   ##  ######## ####    ###      ####

    !byte %..###...
    !byte %.###....
    !byte %####....
    !byte %#.##....
    !byte %..##....
    !byte %..##...#
    !byte %..##...#
    !byte %.####.##

    !byte %........
    !byte %..###...
    !byte %.##.##..
    !byte %##...##.
    !byte %##...##.
    !byte %########
    !byte %#.....##
    !byte %##...###

    !byte %........
    !byte %..###...
    !byte %...###..
    !byte %...####.
    !byte %...##.##
    !byte %...##..#
    !byte %...##...
    !byte %#.####..

    !byte %........
    !byte %####.###
    !byte %.##...##
    !byte %.##...##
    !byte %.##...##
    !byte %###...##
    !byte %###...##
    !byte %.##..###

    !byte %........
    !byte %#....###
    !byte %....##..
    !byte %...##...
    !byte %...##...
    !byte %...##...
    !byte %....##..
    !byte %#....###

    !byte %........
    !byte %##......
    !byte %.##.....
    !byte %........
    !byte %........
    !byte %........
    !byte %.##.....
    !byte %##......

    !byte %......##
    !byte %.....#..
    !byte %.....#..
    !byte %......##
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %#####...
    !byte %..####..
    !byte %#.##.###
    !byte %..##..##
    !byte %..##....
    !byte %..##....
    !byte %..##....
    !byte %.####...

    !byte %.####...
    !byte %####..##
    !byte %#.##...#
    !byte %..##...#
    !byte %..##...#
    !byte %..##...#
    !byte %..##...#
    !byte %.####.##

    !byte %........
    !byte %##.###..
    !byte %#...###.
    !byte %#...####
    !byte %#...##.#
    !byte %#...##..
    !byte %#...##..
    !byte %##.####.

    !byte %........
    !byte %.####.##
    !byte %..##...#
    !byte %..##...#
    !byte %#.##...#
    !byte %####...#
    !byte %.###...#
    !byte %..##..##

    !byte %........
    !byte %######.#
    !byte %#...##..
    !byte %#.#.....
    !byte %###.....
    !byte %#.#.....
    !byte %#...##..
    !byte %######.#

    !byte %........
    !byte %#######.
    !byte %##....##
    !byte %##....##
    !byte %#######.
    !byte %##...##.
    !byte %##....##
    !byte %###....#

    !byte %........
    !byte %.......#
    !byte %......#.
    !byte %......#.
    !byte %......#.
    !byte %......#.
    !byte %..#....#
    !byte %##......

    !byte %####....
    !byte %....#...
    !byte %.##..#..
    !byte %#....#..
    !byte %#....#..
    !byte %.##..#..
    !byte %....#...
    !byte %####....

airOffsetY = -4
; ***************************************************************************************
airMessage

    ; draw red bar (colour 1)
    !byte 18, 0, 1                  ; GCOL 0,1
    !byte 25, 4                     ;
    !word 32*4, 400 + airOffsetY    ; MOVE bottom left
    !byte 25, 4                     ;
    !word 32*14, 400 + airOffsetY   ; MOVE bottom right
    !byte 25, $55                   ;
    !word 32*4, 432 + airOffsetY    ; TRI top left
    !byte 25, $55                   ;
    !word 32*14, 432 + airOffsetY   ; TRI top right

    ; draw green bar (colour 2)
    !byte 18, 0, 2                      ; GCOL 0,2
    !byte 25, 4                         ;
    !word 32*14, 400 + airOffsetY       ; MOVE bottom left
    !byte 25, 4                         ;
    !word 1279-4*32, 400 + airOffsetY   ; MOVE bottom right
    !byte 25, $55                       ;
    !word 32*14, 432 + airOffsetY       ; TRI top left
    !byte 25, $55                       ;
    !word 1279-4*32, 432 + airOffsetY   ; TRI top right

    !byte 18, 0, 3                  ; GCOL 0,3

    ; draw white bar itself
    !byte 25, 4                                 ;
    !word           256,  436-12 + airOffsetY   ; MOVE
    !byte 25, 5                                 ;
    !word           1144, 436-12 + airOffsetY   ; MOVE
    !byte 25, $55                               ;
    !word           256, 420-12 + airOffsetY    ; DRAW
    !byte 25, $55                               ;
    !word           1144, 420-12 + airOffsetY   ; DRAW

    !byte 5                                     ; VDU 5
    !byte 25, 4                                 ;
    !word 32*4 + 4, 404 + 24 + airOffsetY       ;
    !text "AIR"                                 ;
vdu4CursorOff
    !byte 4                         ; VDU 4
    !byte 23, 1, 0, 0,0,0,0,0,0,0,0 ; cursor off
vdu4CursorOffEnd
airMessageEnd

; ***************************************************************************************
guardianColourTable
    !byte $ff, $f0, $0f, $ff        ;

maskColourTable
    !byte $00, $0f, $f0, $ff        ;

guardianColourMasks
    !byte $f0, $ff, $0f, $f0        ;

; ***************************************************************************************
plotYOffsetArray
    !byte 0,8,16,24


!if * > $0800 {
    !error "space is wrong, ", *
}
free1 = $0800-*
* = $0800
; ***************************************************************************************
; $0800
    ; OS sound workspace
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $c0, $c0, $c0, $c0, $04, $04, $04, $04
    !byte $00, $64, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $00, $00, $00
    !byte $00, $05, $00, $00, $00, $30, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $8a, $00, $00, $ff, $fd, $c1, $00, $00, $f0, $00, $0e

    ; OS sound buffers
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $01, $01, $00, $64, $01, $08, $64, $01, $10, $64, $01, $18, $64, $01, $00, $f8
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00

    ; OS printer buffer
footSprite
    !byte $33, $22, $33, $22, $33, $00, $00, $11, $55, $aa, $55, $aa, $ff, $99, $99, $ff
    !byte $44, $cc, $44, $cc, $cc, $00, $00, $88, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $11, $11, $22, $22, $55, $44, $44, $ff, $00, $11, $22, $00, $99, $44, $44, $ff
    !byte $88, $88, $44, $bb, $22, $44, $00, $ff, $00, $00, $00, $88, $44, $22, $22, $ff


    ; OS Envelope definitions
    !byte $01, $78, $00, $00, $1e, $00, $00, $7e, $ff, $00, $ff, $7e, $5a, $00, $00, $00
    !byte $01, $00, $00, $00, $01, $01, $01, $7f, $ff, $ff, $fe, $7e, $01, $00, $00, $00
    !byte $05, $10, $00, $00, $07, $00, $00, $20, $f6, $fe, $fe, $7e, $64, $00, $00, $00
    !byte $01, $02, $00, $00, $64, $00, $00, $7e, $00, $00, $fe, $7e, $7e, $00, $00, $00

exitSprites2x2
    ; exit 0
    ; skull and crossbones
    !byte %.....###            ;     ######
    !byte %....####            ;    ########
    !byte %....####            ;    ########
    !byte %....#..#            ;    #  ##  #
    !byte %....#..#            ;    #  ##  #
    !byte %.....###            ;     ######
    !byte %.....#.#            ;     # ## #
    !byte %......#.            ;      #  #
    !byte %###.....            ; ##    ##    ##
    !byte %####....            ;#####      #####
    !byte %####....            ;#######  #######
    !byte %#..#....            ;     # #####
    !byte %#..#....            ;     ##### #
    !byte %###.....            ;#######  #######
    !byte %#.#.....            ;#####      #####
    !byte %.#......            ; ##          ##

    !byte %.##....#
    !byte %#####...
    !byte %#######.
    !byte %.....#.#
    !byte %.....###
    !byte %#######.
    !byte %#####...
    !byte %.##.....

    !byte %#....##.
    !byte %...#####
    !byte %.#######
    !byte %####....
    !byte %##.#....
    !byte %.#######
    !byte %...#####
    !byte %.....##.

    ; exit 1
    ; star box
    !byte %########            ;################
    !byte %#.......            ;#              #
    !byte %#.######            ;# ############ #
    !byte %#.######            ;# ############ #
    !byte %#.##.###            ;# ## ######### #
    !byte %#..#.#.#            ;#  # # ####### #
    !byte %#.#...##            ;# #   ######## #
    !byte %#.......            ;#       ##   # #
    !byte %########            ;# #   ### ###  #
    !byte %.......#            ;#  # # ####### #
    !byte %######.#            ;# ## ######### #
    !byte %######.#            ;# ############ #
    !byte %######.#            ;# ############ #
    !byte %######.#            ;# ############ #
    !byte %######.#            ;#              #
    !byte %##...#.#            ;################

    !byte %#.#...##
    !byte %#..#.#.#
    !byte %#.##.###
    !byte %#.######
    !byte %#.######
    !byte %#.######
    !byte %#.......
    !byte %########
    !byte %#.###..#
    !byte %######.#
    !byte %######.#
    !byte %######.#
    !byte %######.#
    !byte %######.#
    !byte %.......#
    !byte %########

    ; exit 2
    !byte %########            ;################
    !byte %.#...#..            ; #   #   #   #
    !byte %#..##..#            ;#  ##  ##  ##  #
    !byte %..#...#.            ;  #   #   #   #
    !byte %..#...#.            ;  #   #   #   #
    !byte %#..##..#            ;#  ##  ##  ##  #
    !byte %.#...#..            ; #   #   #   #
    !byte %.#...#..            ; #   #   #   #
    !byte %########            ;#  ##  ##  ##  #
    !byte %.#...#..            ;  #   #   #   #
    !byte %#..##..#            ;  #   #   #   #
    !byte %..#...#.            ;#  ##  ##  ##  #
    !byte %..#...#.            ; #   #   #   #
    !byte %#..##..#            ; #   #   #   #
    !byte %.#...#..            ;#  ##  ##  ##  #
    !byte %.#...#..            ;################

    !byte %#..##..#
    !byte %..#...#.
    !byte %..#...#.
    !byte %#..##..#
    !byte %.#...#..
    !byte %.#...#..
    !byte %#..##..#
    !byte %########
    !byte %#..##..#
    !byte %..#...#.
    !byte %..#...#.
    !byte %#..##..#
    !byte %.#...#..
    !byte %.#...#..
    !byte %#..##..#
    !byte %########

    ; exit 3
    !byte %########            ;################
    !byte %#####...            ;#####   #   ####
    !byte %#...#...            ;#   #   #  #   #
    !byte %#.#.#.#.            ;# # # # #  #   #
    !byte %#.#.#.#.            ;# # # # #  # # #
    !byte %#...#...            ;#   #   #    # #
    !byte %##.#....            ;## #    #  #   #
    !byte %##.#.#.#            ;## # # ## ###  #
    !byte %########            ;## # # # # # # #
    !byte %#...####            ;## #   # #   # #
    !byte %#..#...#            ;#   #  #  ###  #
    !byte %#..#...#            ;#   #  #      ##
    !byte %#..#.#.#            ;# # #   # # # ##
    !byte %#....#.#            ;# # # # # # # ##
    !byte %#..#...#            ;#   # # #   #  #
    !byte %#.###..#            ;################

    !byte %##.#.#.#
    !byte %##.#...#
    !byte %#...#..#
    !byte %#...#..#
    !byte %#.#.#...
    !byte %#.#.#.#.
    !byte %#...#.#.
    !byte %########
    !byte %.#.#.#.#
    !byte %.#...#.#
    !byte %..###..#
    !byte %......##
    !byte %#.#.#.##
    !byte %#.#.#.##
    !byte %#...#..#
    !byte %########

    ; exit 4
    !byte %########            ;################
    !byte %##.##.#.            ;## ## # # # # ##
    !byte %###.#.#.            ;### # #  ## # ##
    !byte %########            ;################
    !byte %#..#....            ;#  #        #  #
    !byte %#..#....            ;#  #        #  #
    !byte %########            ;################
    !byte %#..#....            ;#  #        #  #
    !byte %########            ;#  #        #  #
    !byte %#.#.#.##            ;################
    !byte %.##.#.##            ;#  #        #  #
    !byte %########            ;#  #        #  #
    !byte %....#..#            ;################
    !byte %....#..#            ;#  #        #  #
    !byte %########            ;#  #        #  #
    !byte %....#..#            ;################

    !byte %#..#....
    !byte %########
    !byte %#..#....
    !byte %#..#....
    !byte %########
    !byte %#..#....
    !byte %#..#....
    !byte %########
    !byte %....#..#
    !byte %########
    !byte %....#..#
    !byte %....#..#
    !byte %########
    !byte %....#..#
    !byte %....#..#
    !byte %########

exitSprites1x1
    !byte %########    ; exit 0
    !byte %#..##..#
    !byte %#.###.##
    !byte %########
    !byte %########
    !byte %#..##..#
    !byte %#.###.##
    !byte %########

    !byte %#...#...    ; exit 1
    !byte %.#...#..
    !byte %..#...#.
    !byte %...#...#
    !byte %#...#...
    !byte %.#...#..
    !byte %..#...#.
    !byte %...#...#

    !byte %########    ; exit 2
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %########

exitSprites1x1Reflected
    !byte %########    ; exit 0
    !byte %#..#..#.
    !byte %#..#..#.
    !byte %#..#..#.
    !byte %#..#..#.
    !byte %#..#..#.
    !byte %#..#..#.
    !byte %#..#..#.

    !byte %########    ; exit 1
    !byte %#......#
    !byte %#.######
    !byte %#.######
    !byte %#.##....
    !byte %#.##....
    !byte %#.##....
    !byte %####....

    !byte %########    ; exit 2
    !byte %#.......
    !byte %#......#
    !byte %#.....#.
    !byte %#....#..
    !byte %#...#...
    !byte %#..#....
    !byte %#.#....#

    !byte %########    ; exit 3
    !byte %#.......
    !byte %#...####
    !byte %#...####
    !byte %#...####
    !byte %#...####
    !byte %#...####
    !byte %#...##..

    !byte %########    ; exit 4
    !byte %########
    !byte %######..
    !byte %#####...
    !byte %####....
    !byte %###.....
    !byte %##.....#
    !byte %##....#.

    !byte %########    ; exit 5
    !byte %#.......
    !byte %#.......
    !byte %########
    !byte %########
    !byte %#.......
    !byte %#.......
    !byte %########

    !byte %########    ; exit 6
    !byte %#.......
    !byte %#.##....
    !byte %#.#.....
    !byte %#.#.#.#.
    !byte %#.#.#.#.
    !byte %#.#.#.#.
    !byte %#.#.#.#.

    !byte %########    ; exit 7
    !byte %#.......
    !byte %#.######
    !byte %#.#.....
    !byte %#.#.####
    !byte %#.#.#...
    !byte %#.#.#.##
    !byte %#.#.#.#.

    !byte %########    ; exit 8
    !byte %#......#
    !byte %#......#
    !byte %########
    !byte %#......#
    !byte %#......#
    !byte %########
    !byte %#......#

exitSprites1x2
    !byte %########    ; exit 0
    !byte %#.......
    !byte %##......
    !byte %#.#.....
    !byte %#..#....
    !byte %##..#...
    !byte %#.#..#..
    !byte %#..#..#.

    !byte %##..#..#
    !byte %#.#..#..
    !byte %#..#..#.
    !byte %##..#..#
    !byte %#.#..#..
    !byte %##..#..#
    !byte %#..#..#.
    !byte %########

    !byte %########    ; exit 1
    !byte %#.......
    !byte %#.######
    !byte %#.#.....
    !byte %#.#.####
    !byte %#.#.#...
    !byte %#.#.#.##
    !byte %#.#.#.#.

    !byte %#.#.#.#.
    !byte %#.#.#.#.
    !byte %#.#.#.#.
    !byte %#.#.#.#.
    !byte %#.#.#.#.
    !byte %#.#.#.#.
    !byte %#.#.#.#.
    !byte %########

    !byte %........    ; exit 2
    !byte %.....###
    !byte %...##...
    !byte %..#...##
    !byte %.#...#..
    !byte %.#..#...
    !byte %.#..#...
    !byte %.#..#...

    !byte %.#...#..
    !byte %..#...#.
    !byte %...##.#.
    !byte %.#..#.#.
    !byte %.####.#.
    !byte %.#....#.
    !byte %.######.
    !byte %........

; single items (spikes, thread, keys)
startOfSingleItemPage = * - 11 * 8

spikePlant
    !byte %.#...#..    ; spike 0
    !byte %..#.#...
    !byte %#..#.#..
    !byte %.#.#...#
    !byte %..##.#.#
    !byte %##.#.##.
    !byte %.#.##...
    !byte %...#....

allOtherSpikes
    !byte %.######.    ; spike 1
    !byte %..####..
    !byte %...###..
    !byte %...##...
    !byte %...##...
    !byte %....#...
    !byte %....#...
    !byte %....#...

    !byte %########    ; spike 2
    !byte %#######.
    !byte %.######.
    !byte %.#..##..
    !byte %.#..##..
    !byte %....##..
    !byte %....#...
    !byte %....#...

    !byte %...#....    ; spike 3
    !byte %##.#.##.
    !byte %..###...
    !byte %##.#.##.
    !byte %..###...
    !byte %.#...#..
    !byte %##...##.
    !byte %..#.#...

    !byte %.##...##    ; spike 4
    !byte %...#.#..
    !byte %...###..
    !byte %.##.#.##
    !byte %...###..
    !byte %..#...#.
    !byte %.##...##
    !byte %...#.#..

    !byte %..####..    ; spike 5
    !byte %...##...
    !byte %#.####.#
    !byte %###..###
    !byte %###..###
    !byte %#.####.#
    !byte %...##...
    !byte %..####..

    !byte %#.#..#.#    ; spike 6
    !byte %.#....#.
    !byte %..####..
    !byte %##.##.##
    !byte %..####..
    !byte %.######.
    !byte %#.#..#.#
    !byte %..#..#..

    !byte %.#..#...    ; spike 7
    !byte %#.##..#.
    !byte %.#.###.#
    !byte %...#..#.
    !byte %.###....
    !byte %#.#.###.
    !byte %#.#.#..#
    !byte %.#...###

    !byte %.#...#..    ; spike 8
    !byte %.#...#..
    !byte %.#...#..
    !byte %.#...#..
    !byte %.##..##.
    !byte %###.###.
    !byte %###.###.
    !byte %########

    !byte %#.####.#    ; spike 9
    !byte %..#.#...
    !byte %.......#
    !byte %#..##.#.
    !byte %.#.##..#
    !byte %#.....#.
    !byte %...#...#
    !byte %..#.#...

    ; thread
    !byte %...#....    ; spike 10
    !byte %...#....
    !byte %...#....
    !byte %...#....
    !byte %...#....
    !byte %...#....
    !byte %...#....
    !byte %...#....

    !byte %########    ; spike 11
    !byte %#######.
    !byte %.#.####.
    !byte %.##.##..
    !byte %.#..##..
    !byte %.#..##..
    !byte %....#...
    !byte %....#...

    !byte %...#....    ; spike 12
    !byte %...#....
    !byte %...#....
    !byte %.#.#.#..
    !byte %..###...
    !byte %##.#.##.
    !byte %..###...
    !byte %.#.#.#..

    !byte %...#....    ; spike 13
    !byte %...#....
    !byte %##.#.##.
    !byte %..###...
    !byte %##.#.##.
    !byte %..###...
    !byte %.#.#.#..
    !byte %#..#..#.

keySprites
    !byte %..##....    ; key 0
    !byte %.#..#...
    !byte %#...#...
    !byte %#..#....
    !byte %.##.#...
    !byte %.....#..
    !byte %....#.#.
    !byte %.....#..

    ; ice lolly
    !byte %.#.#....    ; key 1
    !byte %#.#.#...
    !byte %.#.#.#..
    !byte %#.#.#...
    !byte %.#.##...
    !byte %..#..#..
    !byte %......#.
    !byte %.......#

    ; cube
    !byte %...#####    ; key 2
    !byte %..#...##
    !byte %.#...###
    !byte %########
    !byte %#...####
    !byte %#...###.
    !byte %#...##..
    !byte %#####...

    ; banana
    !byte %#.......    ; key 3
    !byte %##......
    !byte %###.##..
    !byte %.###..#.
    !byte %..#.#...
    !byte %.#.#.#..
    !byte %#...#.#.
    !byte %#....###

    ; apple
    !byte %....#...    ; key 4
    !byte %....#...
    !byte %..#####.
    !byte %.#.#####
    !byte %.#.#####
    !byte %.#...###
    !byte %.#.....#
    !byte %..#####.

    !byte %...##...    ; key 5
    !byte %.##..##.
    !byte %.#....#.
    !byte %##.##..#
    !byte %##..#..#
    !byte %.##...#.
    !byte %.######.
    !byte %...##...

    !byte %..####..    ; key 6
    !byte %.#.##.#.
    !byte %#..#.#.#
    !byte %##.#.#.#
    !byte %##.#.#.#
    !byte %##.#.#.#
    !byte %.#.##.#.
    !byte %..####..

    !byte %#.#.#.#.    ; key 7
    !byte %#.#.#.#.
    !byte %#######.
    !byte %#######.
    !byte %#######.
    !byte %#######.
    !byte %#.#.#.#.
    !byte %#.#.#.#.

    !byte %.#####..    ; key 8
    !byte %..###...
    !byte %.##..#..
    !byte %##.####.
    !byte %#...###.
    !byte %##.####.
    !byte %#.....#.
    !byte %.#####..

    !byte %....####    ; key 9
    !byte %....#..#
    !byte %..######
    !byte %..#..#..
    !byte %######..
    !byte %#..#....
    !byte %####....
    !byte %........

floorSprites
    !byte %########    ; floor 0
    !byte %########
    !byte %##.##.##
    !byte %.##.###.
    !byte %##...#.#
    !byte %.#......
    !byte %........
    !byte %........

    !byte %########    ; floor 1
    !byte %########
    !byte %.##..##.
    !byte %#..##..#
    !byte %.##..##.
    !byte %#..##..#
    !byte %########
    !byte %........

    !byte %########    ; floor 2
    !byte %########
    !byte %#..##..#
    !byte %#..##..#
    !byte %########
    !byte %#..##..#
    !byte %.##..##.
    !byte %........

    !byte %.#####..    ; floor 3
    !byte %########
    !byte %###.####
    !byte %...####.
    !byte %...###..
    !byte %....#...
    !byte %....#...
    !byte %....#...

    !byte %########    ; floor 4
    !byte %########
    !byte %##..#.#.
    !byte %.##..#.#
    !byte %#..#..#.
    !byte %..#.#...
    !byte %#.....#.
    !byte %........

    !byte %########    ; floor 5
    !byte %########
    !byte %...#...#
    !byte %..#...#.
    !byte %.#...#..
    !byte %#...#...
    !byte %########
    !byte %########

    !byte %########    ; floor 6
    !byte %########
    !byte %.##...#.
    !byte %.##..#..
    !byte %.####...
    !byte %.###....
    !byte %.##.....
    !byte %.##.....

    !byte %########    ; floor 7
    !byte %########
    !byte %.#...##.
    !byte %..#..##.
    !byte %...####.
    !byte %....###.
    !byte %.....##.
    !byte %.....##.

wallSprites
    !byte %..#...#.    ; wall 0
    !byte %########
    !byte %#...#...
    !byte %########
    !byte %..#...#.
    !byte %########
    !byte %#...#...
    !byte %########

    !byte %#......#    ; wall 1
    !byte %##....##
    !byte %#.#..#.#
    !byte %#..##..#
    !byte %#..##..#
    !byte %#.#..#.#
    !byte %##....##
    !byte %#......#

    !byte %#######.    ; wall 2
    !byte %.#####.#
    !byte %..###.##
    !byte %...#.###
    !byte %...#####
    !byte %..#..###
    !byte %.#....##
    !byte %#......#

    !byte %#.##.#.#    ; wall 3
    !byte %#.##.#.#
    !byte %#.##.#.#
    !byte %#.#.##.#
    !byte %#.#.#.##
    !byte %#.##.#.#
    !byte %##.#.#.#
    !byte %##.#.#.#

    !byte %########    ; wall 4
    !byte %#......#
    !byte %#......#
    !byte %########
    !byte %########
    !byte %#......#
    !byte %#......#
    !byte %########

    !byte %########    ; wall 5
    !byte %#..##..#
    !byte %#.###.##
    !byte %########
    !byte %########
    !byte %#..##..#
    !byte %#.###.##
    !byte %########

    !byte %########    ; wall 6
    !byte %#.#..#.#
    !byte %#.#..#.#
    !byte %#.#..#.#
    !byte %#.#..#.#
    !byte %#.#..#.#
    !byte %#.#..#.#
    !byte %########

    !byte %#.#.#.#.    ; wall 7
    !byte %.#.#.#.#
    !byte %#.#.#.#.
    !byte %.#.#.#.#
    !byte %#.#.#.#.
    !byte %.#.#.#.#
    !byte %#.#.#.#.
    !byte %.#.#.#.#

    !byte %.#.##.#.    ; wall 8
    !byte %.#.##.#.
    !byte %.#.##.#.
    !byte %.#.##.#.
    !byte %.#.##.#.
    !byte %.#.##.#.
    !byte %.#.##.#.
    !byte %.#.##.#.

crumbleSprites
    !byte %########    ; crumble 0
    !byte %##.##.##
    !byte %#.#..#..
    !byte %..#..#..
    !byte %.#.#..#.
    !byte %..#.....
    !byte %....#...
    !byte %........

    !byte %########    ; crumble 1
    !byte %########
    !byte %..##..##
    !byte %##..##..
    !byte %..#....#
    !byte %....##..
    !byte %###..#.#
    !byte %........

    !byte %.#####..    ; crumble 2
    !byte %########
    !byte %#....###
    !byte %....##..
    !byte %....#...
    !byte %....#...
    !byte %....#...
    !byte %........

    !byte %########    ; crumble 3
    !byte %#.#.#.#.
    !byte %.#.#.#.#
    !byte %#.#.#.#.
    !byte %.#.#.#.#
    !byte %#.#.#.#.
    !byte %.#.#.#.#
    !byte %#.#.#.#.

conveyorSprites
    !byte %#######.     ; conveyor 0
    !byte %.##..##.
    !byte %#######.
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %#####.##
    !byte %.##..##.
    !byte %#.######
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %###.####
    !byte %.##..##.
    !byte %###.####
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %#.######
    !byte %.##..##.
    !byte %#####.##
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %##....##     ; conveyor 1
    !byte %.##..##.
    !byte %...##...
    !byte %.##..##.
    !byte %........
    !byte %#..##..#
    !byte %########
    !byte %........

    !byte %....####
    !byte %.##..##.
    !byte %....####
    !byte %.##..##.
    !byte %........
    !byte %#..##..#
    !byte %########
    !byte %........

    !byte %..####..
    !byte %.##..##.
    !byte %#......#
    !byte %.##..##.
    !byte %........
    !byte %#..##..#
    !byte %########
    !byte %........

    !byte %####....
    !byte %.##..##.
    !byte %####....
    !byte %.##..##.
    !byte %........
    !byte %#..##..#
    !byte %########
    !byte %........

    !byte %##....##                 ; conveyor 2
    !byte %.##..##.
    !byte %...##...
    !byte %.##..##.
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %....####
    !byte %.##..##.
    !byte %....####
    !byte %.##..##.
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %..####..
    !byte %.##..##.
    !byte %#......#
    !byte %.##..##.
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %####....
    !byte %.##..##.
    !byte %####....
    !byte %.##..##.
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    ; [unused]
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........


softCharacterDefinitions

!if softCharacterDefinitions != $0c00 {
    !error "sprites are misaligned", *
}
currentFloorSprites
    ; $0c00
    !byte %########                 ; char 128 ($80)
    !byte %########
    !byte %##.##.##
    !byte %..#.###.
    !byte %##...#.#
    !byte %..#.....
    !byte %........
    !byte %........

    ; $0c08
    !byte %########                 ; char 129 ($81)
    !byte %########
    !byte %.##..##.
    !byte %#..##..#
    !byte %.##..##.
    !byte %#..##..#
    !byte %########
    !byte %........

currentCrumbleSprites
    ; $0c10
    !byte %########                 ; char 130 ($82)
    !byte %#...#...
    !byte %..#...#.
    !byte %#...#...
    !byte %..#...#.
    !byte %#...#...
    !byte %..#...#.
    !byte %#...#...

    ; $0c18
    !byte %........                 ; char 131 ($83)
    !byte %########
    !byte %#...#...
    !byte %..#...#.
    !byte %#...#...
    !byte %..#...#.
    !byte %#...#...
    !byte %..#...#.

    ; $0c20
    !byte %........                 ; char 132 ($84)
    !byte %........
    !byte %########
    !byte %#...#...
    !byte %..#...#.
    !byte %#...#...
    !byte %..#...#.
    !byte %#...#...

    ; $0c28
    !byte %........                 ; char 133 ($85)
    !byte %........
    !byte %........
    !byte %########
    !byte %#...#...
    !byte %..#...#.
    !byte %#...#...
    !byte %..#...#.

    ; $0c30
    !byte %........                 ; char 134 ($86)
    !byte %........
    !byte %........
    !byte %........
    !byte %########
    !byte %#...#...
    !byte %..#...#.
    !byte %#...#...

    ; $0c38
    !byte %........                 ; char 135 ($87)
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %########
    !byte %#...#...
    !byte %..#...#.

    ; $0c40
    !byte %........                 ; char 136 ($88)
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %########
    !byte %#...#...

    ; $0c48
    !byte %........                 ; char 137 ($89)
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %########

    ; empty - used for erasing areas of the level
    ; $0c50
    !byte %........                 ; char 138 ($8A)
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

currentConveyorSprites
    ; $0c58
    !byte %##....##                 ; char 139 ($8B)
    !byte %.##..##.
    !byte %...##...
    !byte %.##..##.
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    ; $0c60
    !byte %....####                 ; char 140 ($8C)
    !byte %.##..##.
    !byte %....####
    !byte %.##..##.
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    ; $0c68
    !byte %..####..                 ; char 141 ($8D)
    !byte %.##..##.
    !byte %#......#
    !byte %.##..##.
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    ; $0c70
    !byte %####....                 ; char 142 ($8E)
    !byte %.##..##.
    !byte %####....
    !byte %.##..##.
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    ; $0c78
currentWallSprite
    !byte %..#...#.                 ; char 143 ($8F)
    !byte %########
    !byte %#...#...
    !byte %########
    !byte %..#...#.
    !byte %########
    !byte %#...#...
    !byte %########

currentKeySprite
    ; $0c80
    !byte %..##....                 ; char 144 ($90)
    !byte %.#..#...
    !byte %#...#...
    !byte %#..#....
    !byte %.##.#...
    !byte %.....#..
    !byte %....#.#.
    !byte %.....#..

currentExitSprite
    ; $0c88
    ; exit0
    !byte %########                 ; char 145 ($91)
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %########

    ; $0c90
    ; exit1
    !byte %########                 ; char 146 ($92)
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %########

    ; $0c98
    ; exit2
    !byte %########                 ; char 147 ($93)
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %########

    ; $0ca0
    ; exit3
    !byte %########                 ; char 148 ($94)
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %########

    ; $0ca8
    !byte %########                 ; char 149 ($95)
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#

    ; $0cb0
    !byte %########                 ; char 150 ($96)
    !byte %########
    !byte %...##...
    !byte %...##...
    !byte %...##...
    !byte %...##...
    !byte %...##...
    !byte %...##...

currentWallSpriteCopy
    ; $0cb8
    !byte %........                 ; char 151 ($97)
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    ; $0cc0
    !byte %########                 ; char 152 ($98)
    !byte %#......#
    !byte %#......#
    !byte %.#....#.
    !byte %..####..
    !byte %...#....
    !byte %.##.....
    !byte %.##.....

    ; $0cc8
    !byte %########                 ; char 153 ($99)
    !byte %#......#
    !byte %#......#
    !byte %.#....#.
    !byte %..####..
    !byte %....#...
    !byte %.....##.
    !byte %.....##.

currentFloorSpriteCopy
    ; $0cd0
    !byte %........                 ; char 154 ($9A)
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    ; $0cd8
currentSpikeSprite
    !byte %........                 ; char 155 ($9B)
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

currentSpikeSprite2
    ; $0ce0
    !byte %........                 ; char 156 ($9C)
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

currentSecondFloorSpriteCopy
    ; $0ce8
    !byte %........                 ; char 157 ($9D)
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    ; $0cf0
    !byte %....#...                 ; char 158 ($9E)
    !byte %....#...
    !byte %....#...
    !byte %....#...
    !byte %....#...
    !byte %....#...
    !byte %....#...
    !byte %....#...

    ; $0cf8
    !byte %........                 ; char 159 ($9F)
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
spriteEnd

!if (* != $0d00) {
    !error "oops! not at $0d00"
}
    rti

; ***************************************************************************************
plotRoutineArrayLow
    !byte <getSpriteMode1Byte, <getSpriteMode2Byte, <getSpriteMode3Byte, <getSpriteMode4Byte, <getSpriteMode5Byte, <getSpriteMode6Byte
plotRoutineArrayHigh
    !byte >getSpriteMode1Byte, >getSpriteMode2Byte, >getSpriteMode3Byte, >getSpriteMode4Byte, >getSpriteMode5Byte, >getSpriteMode6Byte

screenRowAddressLow
    !byte <(logicalScreenStart + 0 * $280)
    !byte <(logicalScreenStart + 1 * $280)
    !byte <(logicalScreenStart + 2 * $280)
    !byte <(logicalScreenStart + 3 * $280)
    !byte <(logicalScreenStart + 4 * $280)
    !byte <(logicalScreenStart + 5 * $280)
    !byte <(logicalScreenStart + 6 * $280)
    !byte <(logicalScreenStart + 7 * $280)
    !byte <(logicalScreenStart + 8 * $280)
    !byte <(logicalScreenStart + 9 * $280)
    !byte <(logicalScreenStart + 10 * $280)
    !byte <(logicalScreenStart + 11 * $280)
    !byte <(logicalScreenStart + 12 * $280)
    !byte <(logicalScreenStart + 13 * $280)
    !byte <(logicalScreenStart + 14 * $280)
    !byte <(logicalScreenStart + 15 * $280)
    !byte <(logicalScreenStart + 16 * $280)
    !byte <(logicalScreenStart + 17 * $280)
    !byte <(logicalScreenStart + 18 * $280)
    !byte <(logicalScreenStart + 19 * $280)
    !byte <(logicalScreenStart + 20 * $280)
    !byte <(logicalScreenStart + 21 * $280)
    !byte <(logicalScreenStart + 22 * $280)
    !byte <(logicalScreenStart + 23 * $280)
    !byte <(logicalScreenStart + 24 * $280)
    !byte <(logicalScreenStart + 25 * $280)
    !byte <(logicalScreenStart + 26 * $280)
    !byte <(logicalScreenStart + 27 * $280)
    !byte <(logicalScreenStart + 28 * $280)
    !byte <(logicalScreenStart + 29 * $280)
    !byte <(logicalScreenStart + 30 * $280)
    !byte <(logicalScreenStart + 31 * $280)
screenRowAddressHigh
    !byte >(logicalScreenStart + 0 * $280)
    !byte >(logicalScreenStart + 1 * $280)
    !byte >(logicalScreenStart + 2 * $280)
    !byte >(logicalScreenStart + 3 * $280)
    !byte >(logicalScreenStart + 4 * $280)
    !byte >(logicalScreenStart + 5 * $280)
    !byte >(logicalScreenStart + 6 * $280)
    !byte >(logicalScreenStart + 7 * $280)
    !byte >(logicalScreenStart + 8 * $280)
    !byte >(logicalScreenStart + 9 * $280)
    !byte >(logicalScreenStart + 10 * $280)
    !byte >(logicalScreenStart + 11 * $280)
    !byte >(logicalScreenStart + 12 * $280)
    !byte >(logicalScreenStart + 13 * $280)
    !byte >(logicalScreenStart + 14 * $280)
    !byte >(logicalScreenStart + 15 * $280)
    !byte >(logicalScreenStart + 16 * $280)
    !byte >(logicalScreenStart + 17 * $280)
    !byte >(logicalScreenStart + 18 * $280)
    !byte >(logicalScreenStart + 19 * $280)
    !byte >(logicalScreenStart + 20 * $280)
    !byte >(logicalScreenStart + 21 * $280)
    !byte >(logicalScreenStart + 22 * $280)
    !byte >(logicalScreenStart + 23 * $280)
    !byte >(logicalScreenStart + 24 * $280)
    !byte >(logicalScreenStart + 25 * $280)
    !byte >(logicalScreenStart + 26 * $280)
    !byte >(logicalScreenStart + 27 * $280)
    !byte >(logicalScreenStart + 28 * $280)
    !byte >(logicalScreenStart + 29 * $280)
    !byte >(logicalScreenStart + 30 * $280)
    !byte >(logicalScreenStart + 31 * $280)

; ***************************************************************************************
;
; On Entry:
;   X and Y are coordinates on screen
;
; On Exit:
;   plotScreenAddressLow/High set to screen address
;   plotXOffset / plotYOffset set to offsets within cell
;
; ***************************************************************************************
plotGetScreenAddress
    txa                                 ;
    and #3                              ;
    sta plotXOffset                     ; plotXOffset = offset within byte of X coordinate

    tya                                 ;
    and #7                              ;
    sta plotYOffset                     ; plotYOffset = offset within 8 byte cell of Y coordinate

    txa                                 ;
    and #$fc                            ;
    lsr                                 ;
    sta plotX                           ; plotX = (X pixel / 4) / 2
    tya                                 ;
    lsr                                 ;
    lsr                                 ;
    lsr                                 ;
    sta plotY                           ; plotY = (Y pixel / 8)

    ; get the row address
    ldx plotY                           ;
    lda screenRowAddressLow,x           ;
    sta plotScreenAddressLow            ;
    lda screenRowAddressHigh,x          ;
    sta plotScreenAddressHigh           ;

    ; add 8 * cell X
    lda #0                              ;
    sta tempHigh                        ;
    lda plotX                           ;
    asl                                 ; no need for a rol here, as plotX is too small
    asl                                 ;
    rol tempHigh                        ;
    asl                                 ;
    rol tempHigh                        ;
    clc
    adc plotScreenAddressLow            ;
    sta plotScreenAddressLow            ;
    lda plotScreenAddressHigh           ;
    adc tempHigh                        ;
    sta plotScreenAddressHigh           ;

    ; add the Y offset within a cell
    lda plotScreenAddressLow            ; }
    clc                                 ; }
    adc plotYOffset                     ; }
    sta plotScreenAddressLow            ; } add ($74) to screen address
    bcc +
    inc plotScreenAddressHigh           ; }
+
    rts                                 ;

; ***************************************************************************************
;
; plot
;
;   e.g. used to plot the player, and the leg/foot, vertical guardians
;
; On Entry:
;       plotSourceSpriteAddressLow/High = source sprite address
;
;       A = mode:
;           Mode            Operation                                   Description
;           1               source (AND mask) OR screen                 additive with mask
;           2               0                                           erase
;           3               source AND mask                             colour mask applied to source
;           4               if (screen not 255) then (source AND mask)  preserve solid colour 3
;           5               if (screen not 255) then 0                  zero except solid colour 3
;           6               (source AND $F0) EOR screen                 tint source to colour 2, eor with screen
;
;       X = x pixel coordinate
;       Y = y pixel coordinate
;
; ***************************************************************************************
plot
    sta plotMode                        ;
    stx plotX                           ;
    sty plotY                           ;

    jsr plotGetScreenAddress            ;

    ; based on the current mode, store the address of routine to get the next byte to write
    ldx plotMode                        ;
    lda plotRoutineArrayLow - 1,x       ;
    sta getSourceByte + 1               ;
    lda plotRoutineArrayHigh - 1,x      ;
    sta getSourceByte + 2               ;

    lda #16                             ;
    sta spriteRowCounter                ;

spriteDrawRow
    ldx #3                              ;
plotInnerLoop
    ldy plotYOffsetArray,x              ;
getSourceByte
    jmp $ffff                           ; call routine to get destination value to write
afterGetSourceByte
    sta (plotScreenAddressLow),y        ; store on screen
    dex                                 ;
    bpl plotInnerLoop                   ; copy four bytes

plotMoveToNextRow
    dec spriteRowCounter                ;
    beq return3                         ;
    lda spriteRowCounter                ;
    and #7                              ;
    beq moveSourcePointerOnOneRow       ;

    ; increment sprite address
    inc plotSourceSpriteAddressLow      ;
    bne +                               ;
    inc plotSourceSpriteAddressHigh     ;
+

incrementScreenAddress
    ; increment screen address
    inc plotScreenAddressLow            ;
    bne +                               ;
    inc plotScreenAddressHigh           ;
+

    ; check for end of character row
    inc plotYOffset                     ; increment offset within character row
    lda plotYOffset                     ;
    cmp #8                              ;
    bne spriteDrawRow                   ;

    ; move to next character row on screen
    lda #0                              ;
    sta plotYOffset                     ;

    lda plotScreenAddressLow            ; }
    clc                                 ; }
    adc #$78                            ; }
    sta plotScreenAddressLow            ; }
    lda plotScreenAddressHigh           ; } add $0278 to (plotScreenAddress)
    adc #2                              ; }
    sta plotScreenAddressHigh           ; }

    jmp spriteDrawRow                   ;

moveSourcePointerOnOneRow
    lda plotSourceSpriteAddressLow      ; }
    clc                                 ; }
    adc #$19                            ; }
    sta plotSourceSpriteAddressLow      ; } add 24 + 1 to source sprite address
    bcc incrementScreenAddress          ; }
    inc plotSourceSpriteAddressHigh     ; }
    jmp incrementScreenAddress          ; }

; ***************************************************************************************
return3
    rts                                 ;

; ***************************************************************************************
getSpriteMode1Byte
-
    ldy plotYOffsetArray,x              ;
    lda (plotSourceSpriteAddressLow),y  ; read source sprite
    and spriteColourMask                ; AND with mask
    ora (plotScreenAddressLow),y        ; OR with screen
    sta (plotScreenAddressLow),y        ; store on screen
    dex                                 ;
    bpl -                               ; copy four bytes
    jmp plotMoveToNextRow               ;

; ***************************************************************************************
getSpriteMode2Byte
    lda #0                              ;
-
    ldy plotYOffsetArray,x              ;
    sta (plotScreenAddressLow),y        ; store on screen
    dex                                 ;
    bpl -                               ; copy four bytes
    jmp plotMoveToNextRow               ;

; ***************************************************************************************
getSpriteMode3Byte
-
    ldy plotYOffsetArray,x              ;
    lda (plotSourceSpriteAddressLow),y  ; read source sprite
    and spriteColourMask                ; AND with mask
    sta (plotScreenAddressLow),y        ; store on screen
    dex                                 ;
    bpl -                               ; copy four bytes
    jmp plotMoveToNextRow               ;

; ***************************************************************************************
getSpriteMode4Byte
    lda (plotScreenAddressLow),y        ; read screen
    cmp #$ff                            ;
    beq +                               ; if (not four pixels of colour 3) then use mode 3
    lda (plotSourceSpriteAddressLow),y  ; read source sprite
    and spriteColourMask                ; AND with mask
+
    sta (plotScreenAddressLow),y        ; store on screen
    dex                                 ;
    bpl -                               ; copy four bytes
    jmp plotMoveToNextRow               ;

; ***************************************************************************************
getSpriteMode5Byte
    lda (plotScreenAddressLow),y        ; read screen
    cmp #$ff                            ;
    beq +                               ; if (not four pixels of colour 3) then use mode 2
    lda #0                              ;
+
    jmp afterGetSourceByte              ;

; ***************************************************************************************
getSpriteMode6Byte
    lda (plotSourceSpriteAddressLow),y  ; read source sprite
    and #$f0                            ; AND with bit pattern for colour 2
    eor (plotScreenAddressLow),y        ; EOR with screen
    jmp afterGetSourceByte              ;

; ***************************************************************************************
showCrumble
    ldy #7                              ; loop counter
-
    lda (plotScreenAddressLow),y        ;
    iny                                 ;
    sta (plotScreenAddressLow),y        ;
    tya                                 ;
    clc                                 ;
    adc #7                              ;
    tay                                 ;
    lda (plotScreenAddressLow),y        ;
    iny                                 ;
    sta (plotScreenAddressLow),y        ;
    tya                                 ;
    sec                                 ;
    sbc #10                             ;
    tay                                 ;
    bne -                               ;

    lda #0                              ;
    ldy #1                              ;
    sta (plotScreenAddressLow),y        ;
    ldy #9                              ;
    sta (plotScreenAddressLow),y        ;
    rts                                 ;

; ***************************************************************************************
updatePlayer
    lda #$ff                            ;
    sta spriteColourMask                ; colour 3
    lda #0                              ;
    sta willyDeltaX                     ;
    sta willyJustLandedOnConveyor       ;
    lda isJumping                       ;
    beq handleNotJumping                ;
    jmp handleJumping                   ;

; ***************************************************************************************
handleNotJumping
    ldx #0                                  ; loop counter
-
    lda willySpriteAddressLow,x             ; }
    sta $77,x                               ; }
    inx                                     ; } copy 5 bytes
    cpx #5                                  ; }
    bne -                                   ; }

    ldx playerPixelX                        ; }
    ldy playerPixelY                        ; } TAB(playerX/4, playerY/8+2)
    jsr setTextPosFromPixelPos              ; }

    jsr readTwoCharactersFromScreen         ; read the two characters immediately lower on screen than the player
    lda playerPixelY                        ;
    and #7                                  ;
    bne handleInAirMovement                 ; if (not on the ground) then branch

    ; Update crumbles next
    lda plotScreenAddressLow                ; }
    clc                                     ; }
    adc #$78                                ; }
    sta plotScreenAddressLow                ; } (plotScreenAddress) += $278
    lda plotScreenAddressHigh               ; } address of next row down on screen
    adc #2                                  ; }
    sta plotScreenAddressHigh               ; }

    lda screenCharacterA                    ;
    jsr isCrumble                           ;
    cmp #1                                  ;
    beq updateLeftCrumble                   ;
afterUpdateCrumble
    lda plotScreenAddressLow                ;
    clc                                     ;
    adc #16                                 ; add 16 to the address on screen

    sta plotScreenAddressLow            ;
    lda plotScreenAddressHigh           ;
    adc #0                              ;
    sta plotScreenAddressHigh           ;
    lda screenCharacterB                ;
    jsr isCrumble                       ;
    cmp #1                              ;
    bne checkForConveyors               ;

    ; crumble the right hand crumble (in the background cache)
    ldx #7                              ; loop counter
-
    ; +$50 is to get to the characters underneath the players feet
    lda backgroundCache + $50 - 1,x     ;
    sta backgroundCache + $50 + 0,x     ; copy one pixel row to the next
    lda backgroundCache + $50 + 7,x     ;
    sta backgroundCache + $50 + 8,x     ;
    dex                                 ;
    bne -                               ;

    lda #0                              ;
    sta backgroundCache + $50 + 0       ; zero the top row of crumble
    sta backgroundCache + $50 + 8       ;
    jsr showCrumble                     ;
    jmp checkForConveyors               ;

; ***************************************************************************************
updateLeftCrumble
    ldx #7                              ;
-
    ; $40 is to get to the characters underneath the players feet
    lda backgroundCache + $40 - 1,x     ;
    sta backgroundCache + $40 + 0,x     ; copy one pixel row to the next
    lda backgroundCache + $40 + 7,x     ;
    sta backgroundCache + $40 + 8,x     ;
    dex                                 ;
    bne -                               ;

    lda #0                              ;
    sta backgroundCache + $40 + 0       ; zero the top row of crumble
    sta backgroundCache + $40 + 8       ;
    jsr showCrumble                     ;
    jmp afterUpdateCrumble              ;

; ***************************************************************************************
checkForConveyors
    lda plotScreenAddressLow            ;
    sec                                 ;
    sbc #$88                            ;
    sta plotScreenAddressLow            ; (plotScreenAddress) -= $288
    lda plotScreenAddressHigh           ; move to previous character row
    sbc #$02                            ;
    sta plotScreenAddressHigh           ;
handleInAirMovement
    lda screenCharacterA                ;
    jsr isConveyor                      ;
    bne onConveyor                      ;
    lda screenCharacterB                ;
    jsr isConveyor                      ;
    bne onConveyor                      ;
    lda #0                              ;
    sta willyIsOnConveyor               ;
onConveyor                              ;
    lda willyIsOnConveyor               ;
    cmp #1                              ;
    bne checkPlayerY                    ;
    lda willyDirectionAgainstFlowOfConveyor ;
    cmp #0                              ;
    bne checkPlayerY                    ;
    jmp checkForUpdatePlayerOnConveyor  ;

; ***************************************************************************************
checkPlayerY
    lda playerPixelY                    ;
    and #7                              ;
    cmp #0                              ;
    beq checkIfSupported                ;
updatePlayerFalling
    lda newPlayerPixelY                 ;
    clc                                 ;
    adc #4                              ;
    sta newPlayerPixelY                 ;
    jmp checkIfBlockedLeftOrRight       ;

; ***************************************************************************************
checkIfSupported
    lda screenCharacterA                ;
    jsr isSupporting                    ;
    cmp #1                              ;
    beq onGround                        ;
    lda screenCharacterB                ;
    jsr isSupporting                    ;
    cmp #1                              ;
    beq onGround                        ;
    lda #1                              ;
    sta willyFalling                    ;
    jmp updatePlayerFalling             ;

; ***************************************************************************************
isKeyPressed
    ldy #$ff                                ;
    lda #$81                                ;
    jsr OSBYTE                              ; check for key X pressed
    cpy #$ff                                ;
    rts                                     ;

; ***************************************************************************************
onGround
    lda #0                                  ;
    sta willyChangedDirection               ;

    ldx #keyCodeZ                           ;
    jsr isKeyPressed                        ; is Z pressed
    bne checkForXKey                        ;

    ; handle Z pressed
    lda willyAnimationEOR                   ;
    cmp #3                                  ;
    bne switchToLookingLeft                 ; if (looking right) then branch
    lda #$ff                                ;
    sta willyDeltaX                         ;

    dec newPlayerPixelX                     ; move left
    jmp checkForUpdatePlayerOnConveyor      ; adjust for conveyor

; ***************************************************************************************
switchToLookingLeft
    lda #3                                  ; }
    sta willyAnimationEOR                   ; }
    lda #>willyLeft0                        ; } look left
    sta willyGraphicsPage                   ; }
    lda #1                                  ;
    sta willyChangedDirection               ;
    jsr checkIfBlockedLeftOrRight           ;
    lda #0                                  ;
    sta willyDeltaX                         ;
    jmp checkForUpdatePlayerOnConveyor      ;

; ***************************************************************************************
checkForXKey
    ldx #keyCodeX                           ; }
    jsr isKeyPressed                        ; } is X pressed
    bne checkForUpdatePlayerOnConveyor      ; }

    ; handle X pressed
    lda willyAnimationEOR                   ;
    cmp #0                                  ;
    bne switchToLookingRight                ; if (looking left) then branch
    lda #1                                  ;
    sta willyDeltaX                         ;

    inc newPlayerPixelX                     ; add one to player x

    jmp checkForUpdatePlayerOnConveyor

; ***************************************************************************************
switchToLookingRight
    lda #0                                  ; }
    sta willyAnimationEOR                   ; }
    lda #>willyRight0                       ; } look right
    sta willyGraphicsPage                   ; }
    lda #1                                  ;
    sta willyChangedDirection               ;
    jsr checkIfBlockedLeftOrRight           ;
    lda #0                                  ;
    sta willyDeltaX                         ;

checkForUpdatePlayerOnConveyor
    ldx playerPixelX                        ; }
    ldy playerPixelY                        ; }
    jsr setTextPosFromPixelPos              ; }

    jsr readTwoCharactersFromScreen         ; read the two characters immediately lower on screen than the player
    lda willyIsOnConveyor                   ;
    cmp #0                                  ;
    bne handleGoingOnConveyor               ;
    lda screenCharacterA                    ;
    jsr isConveyor                          ;
    bne +                                   ;
    lda screenCharacterB                    ;
    jsr isConveyor                          ;
    beq handleGoingOnConveyor               ;
+
    lda willyDeltaX                         ;
    sta willyDirectionAgainstFlowOfConveyor ;
    lda #1                                  ;
    sta willyIsOnConveyor                   ;
handleGoingOnConveyor
    lda willyIsOnConveyor                   ;
    cmp #1                                  ;
    bne conveyorHandling                    ;

    ; handle on conveyor
    lda willyFalling                        ;
    cmp #1                                  ;
    bne +                                   ;
    lda willyDeltaX                         ;
    eor #$fe                                ;
    cmp conveyorDirection                   ;
    bne +                                   ;
    lda #$fe                                ;
    sta willyDirectionAgainstFlowOfConveyor ;
+
    lda willyFalling                        ;
    cmp #1                                  ;
    bne conveyorNotFalling                  ;
    lda #$fe                                ;
    sta willyDirectionAgainstFlowOfConveyor ;
updateNewPlayerX
    lda newPlayerPixelX                     ;
    sec                                     ;
    sbc willyDeltaX                         ;
    sta newPlayerPixelX                     ;
    jmp checkForJump                        ;

; ***************************************************************************************
conveyorNotFalling
    lda willyDirectionAgainstFlowOfConveyor ;
    cmp #$fe                                ;
    bne conveyorHandling                    ;
    lda willyDeltaX                         ;
    eor #$fe                                ;
    cmp conveyorDirection                   ;
    bne conveyorHandling                    ;
    jmp updateNewPlayerX                    ;

; ***************************************************************************************
conveyorHandling
    lda willyDeltaX                         ;
    cmp #0                                  ;
    beq movingWithConveyor                  ;
    lda willyDeltaX                         ;
    cmp conveyorDirection                   ;
    bne +                                   ;
movingWithConveyor
    lda #0                                  ;
    sta willyDirectionAgainstFlowOfConveyor ;
+
    lda willyDirectionAgainstFlowOfConveyor ;
    cmp #0                                  ;
    bne +                                   ;
    lda willyIsOnConveyor                   ;
    cmp #1                                  ;
    bne +                                   ;
    jsr updateWillyOnConveyor               ;
+
    lda willyDeltaX                         ;
    sta jumpDirection                       ;
    cmp #0                                  ;
    beq checkForJump                        ;
    jsr checkIfBlockedLeftOrRight           ;
checkForJump
    ldx #keyCodeRETURN                      ; }
    jsr isKeyPressed                        ; } is RETURN pressed
    bne cancelJump                          ; if (return not pressed) then branch (no jump)

    ; handle jump
    lda willyJustLandedOnConveyor           ;
    cmp #0                                  ;
    bne cancelJump                          ;
    lda willyFalling                        ;
    cmp #0                                  ;
    bne cancelJump                          ;
    jmp checkForWallOnJump                  ;

; ***************************************************************************************
cancelJump
    lda #0                                  ;
    sta willyDeltaX                         ;
    sta playerYNegativeOffsetWithinCell     ;
    sta willyFalling                        ;
    sta jumpDirection                       ;
    lda hasDrawnConveyors                   ;
    beq +                                   ;
    rts                                     ;

; ***************************************************************************************
+
;    jsr updateAirAndCheckExit       ;
    jsr drawConveyor                    ;
    jmp updatePlayerWithAnimation       ;

; ***************************************************************************************
checkForWallOnJump
    ldx newPlayerPixelX                 ;
    ldy newPlayerPixelY                 ;
    jsr setTextPosFromPixelPos          ;
    dec cursorY                         ;
    dec cursorY                         ;
    dec cursorY                         ;

    jsr readTwoCharactersFromScreen     ; read the two characters immediately higher on screen than the player
    lda screenCharacterA                ;
    cmp #$8f                            ;
    beq foundWallSoCancelJump           ; if (wall) then branch
    lda screenCharacterB                ;
    cmp #$8f                            ;
    beq foundWallSoCancelJump           ; if (wall) then branch

    ; start jump
    lda #1                              ;
    sta isJumping                       ;
    lda playerPixelY                    ;
    sta playerHeightOnTakeOff           ;
    lda #0                              ;
    sta jumpPhase                       ;
    jmp handleJumping                   ;

; ***************************************************************************************
foundWallSoCancelJump
    jmp cancelJump                      ;

; ***************************************************************************************
checkIfBlockedLeftOrRight
    lda #0                              ;
    sta screenCharacterAPrime           ;
    sta playerYNegativeOffsetWithinCell ;
    lda newPlayerPixelY                 ;
    and #7                              ;
    cmp #0                              ;
    beq onCellFloor                     ;

    ; handle having a vertical gap from the cell floor
    sta playerXOffsetWithinCell         ; just used as temporary storage
    lda #$ff                            ;
    clc                                 ;
    sbc playerXOffsetWithinCell         ;
    sta playerYNegativeOffsetWithinCell ;
onCellFloor
    lda newPlayerPixelX                 ;
    and #3                              ;
    sta playerXOffsetWithinCell         ;
    lda playerXOffsetWithinCell         ;
    cmp #3                              ;
    bne +                               ;
    lda willyDeltaX                     ;
    cmp #$ff                            ;
    bne +                               ;
    jsr checkWhatsLeftOfThePlayer       ;
+
    lda willyDeltaX                     ;
    cmp #$fd                            ;
    bne +                               ;

    ; handle being blocked to the left
    ; add one back onto the new X position
    lda newPlayerPixelX                 ;
    clc                                 ;
    adc #1                              ;
    sta newPlayerPixelX                 ;
    lda #0                              ;
    sta willyDeltaX                     ;
    jmp updateNewPlayerY                ;

; ***************************************************************************************
+
    lda playerXOffsetWithinCell         ;
    cmp #0                              ;
    bne +                               ;
    lda willyDeltaX                     ;
    cmp #1                              ;
    bne +                               ;
    jsr checkWhatsRightOfThePlayer      ;
+
    lda willyDeltaX                     ;
    cmp #$fe                            ;
    bne +                               ;

    ; handle being blocked to the right
    ; subtract one for the new X position
    lda newPlayerPixelX                 ;
    sec                                 ;
    sbc #1                              ;
    sta newPlayerPixelX                 ;
    lda #0                              ;
    sta willyDeltaX                     ;
    jmp updateNewPlayerY                ;

; ***************************************************************************************
+
    jmp updateConveyorAndPlayer         ;

; ***************************************************************************************
updateNewPlayerY
    lda playerPixelY                    ;
    cmp playerHeightOnTakeOff           ;
    bne updateConveyorAndPlayer         ; if (player height not the same as when last on ground) then branch (move player)

    lda jumpPhase                       ;
    cmp #0                              ;
    bne updateConveyorAndPlayer         ; if (jumping) then branch (move player)

    lda newPlayerPixelY                 ;
    sta playerPixelY                    ;
    rts                                 ;

; ***************************************************************************************
getPlayerSourceSpriteAddress
    lda #0                              ; }
    sta plotSourceSpriteAddressLow      ; }
    lda newPlayerPixelX                 ; }
    and #3                              ; }
    eor willyAnimationEOR               ; } index

    lsr                                 ; }
    ror plotSourceSpriteAddressLow      ; } sprite address = (willySpritePage * 256) + 64 * index
    lsr                                 ; }
    ror plotSourceSpriteAddressLow      ; }
    clc                                 ; }
    adc willyGraphicsPage               ; }
    sta plotSourceSpriteAddressHigh     ; }
    rts                                 ;

; ***************************************************************************************
;
; On Entry: A = Y coordinate to check
; On Exit: X = index into danger area arrays
;
; ***************************************************************************************
getDangerArea
    clc                                 ;
    sbc #8                              ;
    ldx #255                            ;
-
    inx                                 ;
    sec                                 ; division by repeated subtraction
    sbc #24                             ;
    bcs -                               ;
    rts                                 ;

; ***************************************************************************************
;
; On Entry:
;   A = Y pixel coordinate of sprite to draw
; On Exit:
;   Z set if in danger zone
;
; ***************************************************************************************
isInDangerArea
    jsr getDangerArea                   ;
    ldy #7                              ;
-
    lda dangerAreas,X                   ;
    cmp rasterArea                      ;
    beq +                               ;
    inx                                 ;
    dey                                 ;
    bpl -                               ;
+
    rts                                 ;

; ***************************************************************************************
updateConveyorAndPlayer

    ; if in danger area, wait
-
    lda playerPixelY                    ;
    jsr isInDangerArea                  ;
    beq -

;    lda #2                              ;
;    jsr debugChangePalette              ;

    ldx playerPixelX                    ; }
    ldy playerPixelY                    ; }
    lda #0                              ; }
    jsr readOrWriteCachedBackground     ; } draw old background from cache

    jsr drawConveyor                    ; animate conveyor

    ldx newPlayerPixelX                 ; }
    ldy newPlayerPixelY                 ; }
    lda #1                              ; }
    jsr readOrWriteCachedBackground     ; } cache new background
    ; fall through...

; ***************************************************************************************
updatePlayerWithAnimation
!ifdef debugPixelCollision {
rts
}
    jsr getPlayerSourceSpriteAddress    ;

    ldx newPlayerPixelX                 ;
    ldy newPlayerPixelY                 ;
    lda #1                              ;
opcodeForJsrPlot
    jsr plot                            ; draw player (plot mode 1)

;    lda #7
;    jsr debugChangePalette

    jsr updateAirAndCheckExit           ;
    jsr checkForLandingOnSpike          ;

    jsr moveCursorToBackgroundCache     ;
    jsr checkSpikeKeySwitch             ;
    inc cursorX                         ;
    jsr checkSpikeKeySwitch             ;

    lda newPlayerPixelY                 ;
    and #7                              ;
    cmp #0                              ;
    beq +                               ; if (level with cell vertically) then branch
    inc cursorX                         ; [TODO: is this right?, why check vertical alignment then check an extra X position?]
    jsr checkSpikeKeySwitch             ;
+
    ; copy local variables back (4 bytes)
    ldx #0                              ;
-
    lda $77,x                           ;
    sta willySpriteAddressLow,x         ;
    inx                                 ;
    cpx #4                              ;
    bne -                               ;

    lda newPlayerPixelX                 ;
    sta playerPixelX                    ;
    lda newPlayerPixelY                 ; store new player position
    sta playerPixelY                    ;
    rts                                 ;

; ***************************************************************************************
readTwoCharactersFromScreen
    jsr readCharacter       ; read character at cursor position
    stx screenCharacterA    ; store result

    inc cursorX             ; move right one cell

    jsr readCharacter       ; read character at cursor position
    stx screenCharacterB    ; store result
    rts

; ***************************************************************************************
readTwoCharactersVertically
    jsr readCharacter       ; read character at text cursor position
    stx screenCharacterA    ; store result

    inc cursorY             ; move down one cell

    jsr readCharacter       ; read character at text cursor position
    stx screenCharacterB    ; store result
    rts                     ;

; ***************************************************************************************
checkSpikeKeySwitch
    jsr readTwoCharactersFromScreen                 ;
    dec cursorX                                     ;
    lda screenCharacterA                            ; first character
    jsr checkForSpikeKeySwitchCollisions            ;
    inc cursorX
    lda screenCharacterB                            ; second character
    jmp checkForSpikeKeySwitchCollisions            ;

; ***************************************************************************************
checkForSpikeKeySwitchCollisions
    cmp #$9b                    ;
    beq deathJumper             ; if (spike) then branch
    cmp #$9c                    ;
    beq deathJumper             ; if (spike) then branch
    cmp #$90                    ;
    beq keyCollisionFound       ; if (key) then branch
    cmp #$98                    ;
    beq switchCollisionFound    ; if (unswitched switch) then branch
    rts

; ***************************************************************************************
;
; checking an 'offscreen' background cache for spikes
;
; ***************************************************************************************
checkForLandingOnSpike
    jsr moveCursorToBackgroundCache ;

-
    jsr readCharacter           ;
    cpx #0                      ;
    beq drawSpace               ;
    cpx #$9b                    ;
    beq deathJumper             ; if (spike) then branch (die)
    cpx #$9c                    ;
    beq deathJumper             ; if (spike) then branch (die)

backIntoSpaceLoop
    inc cursorX
    lda cursorX                 ; read text cursor X position
    cmp #40                     ;
    bne -                       ; loop until we reach the end of the row (end of the cache)
    rts                         ;

drawSpace
    jsr eraseCell               ;
    jmp backIntoSpaceLoop       ;

; ***************************************************************************************
deathJumper
    jmp death                       ;

; ***************************************************************************************
eraseCell
    jsr setCursorScreenAddress          ;
    lda #<eraseGuardianEmptyBytes       ;
    sta cellPlotSourceSpriteAddressLow  ;
    lda #>eraseGuardianEmptyBytes       ;
    sta cellPlotSourceSpriteAddressHigh ;
    jmp cellPlot                        ;

; ***************************************************************************************
keyCollisionFound
    lda cursorX                 ;
    sec                         ;
    sbc #34                     ;
    tax                         ; get cell offset within cache

    lda cachedCellX             ;
    clc                         ;
    adc cacheOffsetX,x          ;
    sta textCursorX             ;

    lda cachedCellY             ;
    clc                         ;
    adc cacheOffsetY,x          ;
    sta textCursorY             ;

    ; erase key
    jsr eraseCell               ;

    dec keysLeft                ;

    ; Mark key as got
    ldx #0                      ;
-
    lda keyXPositions,x         ;
    cmp textCursorX             ;
    bne +                       ;
    lda keyYPositions,x         ;
    cmp textCursorY             ;
    bne +                       ;
    lda #255                    ;
    sta keyGot,x                ;
+
    inx                         ;
    cpx keyPositionCounter      ;
    bcc -                       ;

    jmp keyTaken                ;

switchCollisionFound
    ldx cursorX                     ; }
    stx textCursorX                 ; } record current position
    ldy cursorY                     ; }
    sty textCursorY                 ; }
    jsr setTextPos                  ;

    jsr printFollowingMessage               ;
    !byte switchMessageEnd - switchMessage  ;
switchMessage
    !byte 17, 3                     ; COLOUR
    !byte $99                       ; the switched switch sprite
    !byte 31, 21, 12                ; TAB(21, 12)
    !byte charSPACE                 ; space
    !byte 10, 8, charSPACE          ; another space below. This removes a section of wall.
switchMessageEnd

    lda playerPixelX                        ;
    cmp #80                                 ;
    bcc tabToOldCursorPositionAndReturn     ;

    ; start kong falling
    lda #1                                  ;
    sta kongBeastSwitchTriggered            ; mark switch as triggered

    ; clear regular Kong and ground under Kong
    jsr printFollowingMessage
    !byte clearKongAndGroundUnderKongEnd - clearKongAndGroundUnderKong
clearKongAndGroundUnderKong
    !byte $1f, $13, $01             ; TAB(19, 1)
    !byte $20, $20, $0a, $08, $08   ; two spaces and move down and back
    !byte $20, $20, $0a, $08, $08   ; two spaces and move down and back
    !byte $20, $20, $0a, $08, $08   ; two spaces and move down and back
clearKongAndGroundUnderKongEnd

    ; don't draw regular Kong any more
    lda #$60                        ; store opcode $60 'RTS'
    sta drawRegularKong             ;

tabToOldCursorPositionAndReturn
    ldx textCursorX                 ;
    ldy textCursorY                 ;
    jmp setTextPos                  ; TAB(textCursorX,textCursorY)

; ***************************************************************************************
isSupporting
    cmp #$95                        ;
    bcs +                           ;
    cmp #$5f                        ;
    beq +                           ;
    cmp #$80                        ;
    bcc notSupporting               ;
    cmp #$90                        ;
    bcs notSupporting               ;
+
    lda playerPixelY                ;
    sta playerHeightOnTakeOff       ;
    lda #1                          ; yes, is supporting
    rts                             ;

; ***************************************************************************************
notSupporting
    lda #0                          ; no, is not supporting
    rts                             ;

; ***************************************************************************************
isCrumble
    cmp #$5f                        ;
    beq +                           ;
    cmp #$82                        ;
    bcc notCrumble                  ;
    cmp #$8a                        ;
    bcs notCrumble                  ;
+
    lda #1                          ;
    rts                             ;

; ***************************************************************************************
notCrumble
    lda #0                          ;
    rts                             ;

; ***************************************************************************************
isConveyor
    cmp #$8b                        ; } (first conveyor character)
    bcc notConveyor                 ; }
    cmp #$8f                        ; } (last conveyor character + 1)
    bcs notConveyor                 ; } if (conveyor belt) then A=1 else A=0
    lda #1                          ; }
    rts                             ; }

; ***************************************************************************************
notConveyor
    lda #0                          ;
    rts                             ;

; ***************************************************************************************
checkUpdateConveyor
    lda jumpDirection               ;
    cmp #0                          ;
    bne updateConveyor              ;
    lda #1                          ;
    sta willyFalling                ;
notFoundConveyor
    rts                             ;

; ***************************************************************************************
updateConveyor
    ldx playerPixelX                ;
    ldy playerPixelY                ;
    jsr setTextPosFromPixelPos      ; TAB(playerX/4, playerY/8 + 2)

    jsr readTwoCharactersFromScreen ; read the two characters immediately lower on screen than the player

    lda screenCharacterA            ;
    jsr isConveyor                  ;
    bne foundConveyor               ;

    lda screenCharacterB            ;
    jsr isConveyor                  ;
    beq notFoundConveyor            ;

; ***************************************************************************************
foundConveyor
    lda #1                              ;
    sta willyJustLandedOnConveyor       ;
    lda jumpDirection                   ;
    sta willyDeltaX                     ;
    jmp checkForUpdatePlayerOnConveyor  ;

; ***************************************************************************************
handleJumping
    lda jumpPhase                   ;
    cmp #17                         ;
    bcc updatePlayerWhenJumping     ; if (jumping) then branch
    jmp updatePlayerWhenSupported   ; falling

; ***************************************************************************************
updatePlayerWhenJumping
    lda playerPixelY                ;
    and #7                          ;
    cmp #0                          ;
    beq checkForLanding             ;
    jmp updateJump                  ;

; ***************************************************************************************
checkForLanding
    lda playerPixelX                ;
    lsr                             ;
    lsr                             ;
    sta cursorX                     ;
    lda playerPixelY                ;
    sec                             ;
    sbc #2                          ; [TODO: is this calculation right??]
    lsr                             ;
    lsr                             ;
    lsr                             ;
    sta cursorY                     ;

    jsr readTwoCharactersFromScreen ;

    lda screenCharacterA            ;
    cmp #$8f                        ;
    beq hitWall                     ; if (wall) then branch
    lda screenCharacterB            ;
    cmp #$8f                        ;
    beq hitWall                     ; if (wall) then branch
    jmp updateInAir                 ;

; ***************************************************************************************
hitWall
    lda jumpPhase                   ;
    cmp #9                          ;
    bcs updateInAir                 ;
    lda #17                         ;
    sec                             ;
    sbc jumpPhase                   ;
    sta jumpPhase                   ;
    lda #0                          ;
    sta jumpDirection               ;
updateInAir
    lda playerPixelY                ;
    and #7                          ;
    cmp #0                          ;
    bne updateJump                  ;
    lda jumpPhase                   ;
    cmp #8                          ;
    bcc updateJump                  ;

    lda playerPixelX                ;
    lsr                             ;
    lsr                             ;
    sta cursorX                     ; TAB(playerX/4, 2 + (playerY + 3)/8)
    lda playerPixelY                ; [TODO: is this calculation right??]
    clc                             ;
    adc #3                          ;
    lsr                             ;
    lsr                             ;
    lsr                             ;
    clc                             ;
    adc #2                          ;
    sta cursorY                     ;

    jsr readTwoCharactersFromScreen ;
    lda screenCharacterA            ;
    jsr isSupporting                ;
    cmp #1                          ;
    beq updatePlayerWhenSupported   ;

    lda screenCharacterB            ;
    jsr isSupporting                ;
    cmp #1                          ;
    beq updatePlayerWhenSupported   ;

updateJump
    lda jumpPhase                   ;
    clc                             ;
    adc #1                          ;
    sta jumpPhase                   ;

    ldy jumpPhase                   ;
    lda newPlayerPixelY             ;
    sec                             ;
    sbc jumpMovementArray - 1,y     ;
    sta newPlayerPixelY             ;

    lda newPlayerPixelX             ;
    clc                             ;
    adc jumpDirection               ;
    sta newPlayerPixelX             ;
    lda jumpDirection               ;
    sta willyDeltaX                 ;
    jmp checkIfBlockedLeftOrRight	;

; ***************************************************************************************
updatePlayerWhenSupported
    lda #0                          ;
    sta isJumping                   ;
    sta jumpPhase                   ;
    jsr updateAirAndCheckExit       ;
    jsr drawConveyor                ;
    jsr checkUpdateConveyor         ;
    jmp updatePlayer                ;

; ***************************************************************************************
checkWhatsLeftOfThePlayer
    lda playerPixelX                ;
    lsr                             ;
    lsr                             ;
    sec                             ;
    sbc #1                          ;
    sta cursorX                     ; TAB(playerX/4 - 1, (newPlayerPixelY + playerYNegativeOffsetWithinCell) / 8)
    lda newPlayerPixelY             ;
    clc                             ;
    adc playerYNegativeOffsetWithinCell ;
    lsr                             ;
    lsr                             ;
    lsr                             ;
    sta cursorY                     ;
    jsr readTwoCharactersVertically ;

    lda newPlayerPixelY             ;
    and #7                          ;
    cmp #0                          ;
    beq +                           ;

    ; if we are not vertically aligned with a cell then we need to check another cell
    lda screenCharacterB            ;
    sta screenCharacterAPrime       ;
    inc cursorY                     ;
    jsr readTwoCharactersVertically ;

+
    lda screenCharacterAPrime       ;
    cmp #$20                        ;
    bne checkForCollisionToTheLeft  ; if (not a space) then branch (check for collision)

    lda screenCharacterB            ;
    cmp #$20                        ;
    bne checkForCollisionToTheLeft  ; if (not a space) then branch (check for collision)

    lda jumpPhase                   ;
    cmp #5                          ;
    bne checkForCollisionToTheLeft  ;
    rts                             ;

; ***************************************************************************************
checkForCollisionToTheLeft
    lda screenCharacterA            ;
    cmp #$8f                        ;
    beq markAsBlockedToTheLeft      ; if (wall) then branch

    lda screenCharacterB            ;
    cmp #$8f                        ;
    beq markAsBlockedToTheLeft      ; if (wall) then branch

    lda screenCharacterAPrime       ;
    cmp #$8f                        ;
    beq markAsBlockedToTheLeft      ; if (wall) then branch
    rts                             ;

; ***************************************************************************************
markAsBlockedToTheLeft
    lda #$fd                        ;
    sta willyDeltaX                 ;
    rts                             ;

; ***************************************************************************************
checkWhatsRightOfThePlayer
    lda playerPixelX                ; }
    lsr                             ; }
    lsr                             ; }
    clc                             ; }
    adc #2                          ; }
    sta cursorX                     ; } TAB(playerX/4 + 2, (newPlayerPixelY + playerYNegativeOffsetWithinCell)/8)
    lda newPlayerPixelY             ; }
    clc                             ; }
    adc playerYNegativeOffsetWithinCell ; }
    lsr                             ; }
    lsr                             ; }
    lsr                             ; }
    sta cursorY                     ; }
    jsr readTwoCharactersVertically ;

    lda newPlayerPixelY             ;
    and #7                          ;
    cmp #0                          ;
    beq +                           ;

    ; if we are not vertically aligned with a cell then we need to check another cell
    lda screenCharacterB            ;
    sta screenCharacterAPrime       ;
    inc cursorY                     ;
    jsr readTwoCharactersVertically ;

+
    lda screenCharacterAPrime       ;
    cmp #$20                        ;
    bne checkForCollisionRight       ; if (not a space) then branch (check for collision)

    lda screenCharacterB            ;
    cmp #$20                        ;
    bne checkForCollisionRight       ; if (not a space) then branch (check for collision)

    lda jumpPhase                   ;
    cmp #5                          ;
    bne checkForCollisionRight      ;
    rts                             ;

; ***************************************************************************************
checkForCollisionRight
    lda screenCharacterA            ;
    cmp #$8f                        ;
    beq markAsBlockedToTheRight     ; if (wall) then branch

    lda screenCharacterB            ;
    cmp #$8f                        ;
    beq markAsBlockedToTheRight     ; if (wall) then branch

    lda screenCharacterAPrime       ;
    cmp #$8f                        ;
    beq markAsBlockedToTheRight     ; if (wall) then branch
    rts                             ;

; ***************************************************************************************
markAsBlockedToTheRight
    lda #$fe                        ;
    sta willyDeltaX                 ;
    rts                             ;

; ***************************************************************************************
updateWillyOnConveyor
    lda conveyorDirection           ;
    cmp #1                          ;
    bne updateConveyorMovement      ;
    lda willyAnimationEOR           ;
    cmp #3                          ;
    bne updateConveyorMovement      ;

    lda #>willyRight0               ; }
    sta willyGraphicsPage           ; }
    lda #0                          ; } look right
    sta willyAnimationEOR           ; }

    jmp checkIfBlockedLeftOrRight   ;

; ***************************************************************************************
updateConveyorMovement
    lda conveyorDirection           ;
    cmp #1                          ;
    bne +                           ;

    ; conveyor right
    lda conveyorDirection           ;
    sta willyDeltaX                 ;
    lda newPlayerPixelX             ;
    clc                             ;
    adc conveyorDirection           ;
    sta newPlayerPixelX             ;
    rts                             ;

; ***************************************************************************************
+
    lda conveyorDirection           ;
    cmp #$ff                        ;
    bne walkWithConveyor            ;

    ; conveyor left
    lda willyAnimationEOR           ;
    cmp #0                          ;
    bne walkWithConveyor            ;
    lda #>willyLeft0                ; }
    sta willyGraphicsPage           ; }
    lda #3                          ; } look left
    sta willyAnimationEOR           ; }
    jmp checkIfBlockedLeftOrRight   ;

; ***************************************************************************************
walkWithConveyor
    lda conveyorDirection           ;
    sta willyDeltaX                 ;
    lda newPlayerPixelX             ;
    clc                             ;
    adc conveyorDirection           ;
    sta newPlayerPixelX             ;
    rts                             ;

; ***************************************************************************************
;
; On Entry:
;   A = 0   means read from cache and write to screen
;   A = 1   means read from screen and write to cache
;   X = x pixel position
;   Y = Y pixel position
;
; ***************************************************************************************
readOrWriteCachedBackground
    stx $71                         ;
    sty $72                         ;
    sta $70                         ;
    txa                             ;
    and #$fc                        ; X cell * 4
    sta tempX                       ;
    lsr                             ;
    lsr                             ;
    sta cachedCellX                 ;

    tya                             ;
    lsr                             ;
    lsr                             ;
    lsr                             ;
    sta cachedCellY                 ; Y cell

    ; read screen row address and add 16 * cell X to screen address
    tax                             ; row
    lda #0                          ;
    sta tempHigh                    ;
    lda tempX                       ; }
    asl                             ; } X cell * 4 again
    rol tempHigh                    ; }
    asl                             ; }
    rol tempHigh                    ; }
    clc                             ;
    adc screenRowAddressLow,x       ; }
    sta screenLow                   ; }
    lda screenRowAddressHigh,x      ; } add screen row address
    adc tempHigh                    ; }
    sta screenHigh                  ; }

    ; test which direction we want to read/write
    lda $70                                 ;
    beq +                                   ;

    ; set up for reading from the screen and writing to the background cache:
    ;   lda logicalScreenStart,x            ; screen address
    ;   sta backgroundCache,y               ; off-the-visible-screen storage area
    lda screenLow                           ;
    sta readFromMemory + 1                  ;
    lda screenHigh                          ;
    sta readFromMemory + 2                  ;

    lda #<backgroundCache                   ;
    sta writeToMemory + 1                   ;
    lda #>backgroundCache                   ;
    sta writeToMemory + 2                   ;
    jmp copyCache                           ;

+
    ; set up for reading from the background cache and writing to the screen:
    ;   lda backgroundCache,y               ; off-the-visible-screen storage area
    ;   sta logicalScreenStart,x            ; screen address

    lda #<backgroundCache                   ;
    sta readFromMemory + 1                  ;
    lda #>backgroundCache                   ;
    sta readFromMemory + 2                  ;

    lda screenLow                           ;
    sta writeToMemory + 1                   ;
    lda screenHigh                          ;
    sta writeToMemory + 2                   ;

; ***************************************************************************************
copyCache
    ldy #0                              ; outer loop counter (number of rows)
readWriteBackgroundCacheLoop
    ldx #31                             ; inner loop counter (within one row)
readFromMemory
    lda $ffff,x                         ;
writeToMemory
    sta $ffff,x                         ;
    dex                                 ;
    bpl readFromMemory                  ;

    ; go to next row

    ; test which direction we want to read/write
    lda $70                                 ;
    beq otherDirection                      ;

    ; read from screen, write to cache
    lda readFromMemory + 1              ; }
    clc                                 ; }
    adc #$80                            ; }
    sta readFromMemory + 1              ; } add $0280 to screen address (goto next row)
    lda readFromMemory + 2              ; }
    adc #$02                            ; }
    sta readFromMemory + 2              ; }

    lda writeToMemory + 1               ; }
    clc                                 ; }
    adc #32                             ; }
    sta writeToMemory + 1               ; } add 32 to cache address (goto next row)
    bcc +                               ; }
    inc writeToMemory + 2               ; }
+
    jmp checkForEndOfLoop               ;

otherDirection
    ; read from cache, write to screen
    lda writeToMemory + 1               ; }
    clc                                 ; }
    adc #$80                            ; }
    sta writeToMemory + 1               ; } add $0280 to screen address (goto next row)
    lda writeToMemory + 2               ; }
    adc #$02                            ; }
    sta writeToMemory + 2               ; }

    lda readFromMemory + 1              ; }
    clc                                 ; }
    adc #32                             ; }
    sta readFromMemory + 1              ; } add 32 to cache address (goto next row)
    bcc +                               ; }
    inc readFromMemory + 2              ; }
+

checkForEndOfLoop
    iny                                 ;
    cpy #3                              ;
    bcc readWriteBackgroundCacheLoop    ; if (Y < 3) then branch (loop back)
    rts                                 ;

; ***************************************************************************************
updateVerticalGuardians
    lda currentLevel                    ;
    cmp #5                              ;
    beq updateAndDrawEugene             ;
    cmp #8                              ;
    beq drawRegularKong                 ;
    cmp #12                             ;
    beq drawRegularKong                 ; if (level 8 or 12) then branch (draw Kong)
    cmp #9                              ;
    beq drawVerticalGuardiansJumper     ;
    cmp #16                             ;
    beq return16                        ; if (level 16 - The Sixteenth Cavern) then branch (return)
    cmp #11                             ;
    bcs drawVerticalGuardiansJumper     ;
return16
    rts                                 ;

; ***************************************************************************************
drawVerticalGuardiansJumper
    jmp drawVerticalGuardians

; ***************************************************************************************
updateAndDrawEugene
eugeneColourMask = * + 1
    lda #$f0                            ;
    sta spriteColourMask                ; colour 2
    lda eugenePositionY                 ;
    and #$7f                            ;
    cmp #$60                            ; bottom coordinate
    beq toggleEugeneDirection           ;
    cmp #8                              ;
    beq toggleEugeneDirection           ; top coordinate
moveEugene
    lda eugenePositionY                 ;
    and #$80                            ;
    beq moveEugeneDown                  ;

    ; move Eugene up
    inc eugenePositionY                 ;
    jmp drawEugene                      ;

; ***************************************************************************************
moveEugeneDown
    dec eugenePositionY                 ;
drawEugene
    ldx #$4c                            ;
    lda eugenePositionY                 ;
    and #$7f                            ;
    tay                                 ;
    jsr setEugineSprite                 ;
    lda #3                              ;
    jmp plot                            ; plot Eugene (mode 3)

; ***************************************************************************************
setEugineSprite
    lda #<verticalGuardianMODE1Address  ; }
    sta plotSourceSpriteAddressLow      ; } address verticalGuardianMODE1Address
    lda #>verticalGuardianMODE1Address  ; }
    sta plotSourceSpriteAddressHigh     ; }
    rts                                 ;

; ***************************************************************************************
toggleEugeneDirection
    lda eugenePositionY                 ;
    eor #$80                            ;
    sta eugenePositionY                 ;
doWeMoveEugeneOpcode = *
    jmp moveEugene                      ; [this must be a 'JMP abs' as the opcode is overwritten]

; ***************************************************************************************
drawRegularKong
    lda #$f0                            ;
    sta spriteColourMask                ; colour 2

    inc kongAnimationCounter            ;
    lda kongAnimationCounter            ;
    and #8                              ;
    cmp #8                              ;
    beq showKongAnimationState1         ;
    lda #<verticalGuardianMODE1Address  ; }
    sta plotSourceSpriteAddressLow      ; }
    lda #>verticalGuardianMODE1Address  ; } address of Kong animation 0
    sta plotSourceSpriteAddressHigh     ; }
    jmp +                               ;

; ***************************************************************************************
showKongAnimationState1
    lda #<verticalGuardianMODE1Address1 ; }
    sta plotSourceSpriteAddressLow      ; } address of Kong animation 1
    lda #>verticalGuardianMODE1Address1 ; }
    sta plotSourceSpriteAddressHigh     ; }
+
    ldx #78                             ;
    ldy #8                              ;
    lda #3                              ;
    jmp plot                            ; draw Kong (mode 3)

; ***************************************************************************************
return7
    rts                                 ;

; ***************************************************************************************
drawLevel19VerticalGuardians
    lda #4                              ;
    sta drawGuardianPlotType            ;
    lda #5                              ;
    sta verticalGuardiansPlotType       ;
    jmp drawRegularVerticalGuardians    ;

; ***************************************************************************************
drawVerticalGuardians
    lda currentLevel                    ;
    cmp #19                             ;
    beq drawLevel19VerticalGuardians    ;
    lda #2                              ;
    sta verticalGuardiansPlotType       ;
    lda #3                              ;
    sta drawGuardianPlotType            ;

drawRegularVerticalGuardians
    inc verticalAnimationCounter        ;
    lda verticalAnimationCounter        ;
    lsr                                 ;
    and #3                              ;
    sta verticalAnimationIndex          ; animation state
    ldx #0                              ;
    lda #<verticalGuardianMODE1Address  ; }
    sta tempGuardianSpriteAddrLow       ; } address of vertical guardian sprite
    lda #>verticalGuardianMODE1Address  ; }
    sta tempGuardianSpriteAddrHigh      ; }
-
verticalAnimationIndex = * + 1
    cpx #$ff                            ; animation state
    beq gotSpriteAddress                ; multiplication by repeated addition
    inx                                 ;
    lda tempGuardianSpriteAddrLow       ; }
    clc                                 ; }
    adc #$40                            ; } increment by $40
    sta tempGuardianSpriteAddrLow       ; }
    jmp -                               ;

; ***************************************************************************************
gotSpriteAddress
    lda currentLevel                    ;
    cmp #14                             ;
    bne +                               ;

    ; level 14 - Skylab Landing Bay specific code
    lda #0                              ;
    sta tempGuardianSpriteAddrLow       ;

+
    lda #0                              ;
    sta currentGuardianColour           ;
    ldx #0                              ;
    stx currentGuardianIndex            ;

updateOneVerticalGuardian
    lda currentVerticalGuardians,x      ;
    cmp #$ff                            ;
    beq return7                         ;
    sta currentGuardianX                ; x coordinate + top bit for direction + bit 6 for speed
    inx                                 ;
    jsr readByteFromVerticalGuardians   ;
    sta currentGuardianY                ; y coordinate
    inx                                 ;
    jsr readByteFromVerticalGuardians   ;
    sta currentGuardianExtent1          ; Y extent 1
    inx                                 ;
    jsr readByteFromVerticalGuardians   ;
    sta currentGuardianExtent2          ; Y extent 2
    stx currentGuardianIndex            ;
    lda currentGuardianX                ;
    and #$40                            ;
    cmp #$40                            ;
    beq fastVerticalGuardian            ;
    lda #2                              ; set slow speed
    jmp +                               ;

; ***************************************************************************************
fastVerticalGuardian
    lda #4                          ; set fast speed
+
    sta currentGuardianSpeed        ;
    lda currentGuardianColour       ;
    and #3                          ;
    tax                             ;
    lda guardianColourMasks,x       ;
    sta spriteColourMask            ; set sprite colour
    lda currentGuardianExtent1      ;
    and #$80                        ;
    cmp #$80                        ;
    bne updateVerticalGuardian      ;
    jmp drawSkylabCrashing          ;

; ***************************************************************************************
updateVerticalGuardian
    lda currentLevel                ;
    cmp #19                         ;
    bne +                           ; if (not level 19 - The Meteor Storm) then branch

    ; level 19 specific code
    lda spriteColourMask            ;
    cmp #$ff                        ;
    bne +                           ; if (not colour 3) then branch
    lda #$f0                        ; make the meteors in the Meteor Storm colour 2
    sta spriteColourMask            ;

+
    lda currentGuardianX            ;
    and #$3f                        ;
    asl                             ;
    asl                             ;
    clc                             ;
    adc #$10                        ;
    tax                             ;
    lda currentGuardianY            ;
    clc                             ;
    adc #8                          ;
    tay                             ;
verticalGuardiansPlotType = * + 1
    lda #5                          ;
    jsr plot                        ; draw vertical guardian (mode 2 or mode 5)
    lda currentGuardianX            ; }
    and #$80                        ; } check current direction
    cmp #$80                        ; }
    beq moveVerticalGuardianDown    ; if (down) then branch

    ; move guardian up
    lda currentGuardianY            ;
    sec                             ;
    sbc currentGuardianSpeed        ;
    sta currentGuardianY            ;
    jmp drawVerticalGuardian        ;

; ***************************************************************************************
moveVerticalGuardianDown
    lda currentGuardianY            ;
    clc                             ;
    adc currentGuardianSpeed        ;
    sta currentGuardianY            ;

drawVerticalGuardian
    lda currentGuardianX            ;
    and #$3f                        ;
    asl                             ;
    asl                             ;
    clc                             ;
    adc #$10                        ;
    tax                             ; X = (guardianX * 4) + 16
    lda currentGuardianY            ;
    clc                             ;
    adc #8                          ;
    tay                             ; Y = (guardianY + 8)
    lda tempGuardianSpriteAddrLow   ;
    sta plotSourceSpriteAddressLow  ;
    lda tempGuardianSpriteAddrHigh  ;
    sta plotSourceSpriteAddressHigh ;
drawGuardianPlotType = * + 1
    lda #4                          ;
    jsr plot                        ; draw vertical guardian (mode 4, or mode 3 on level 19)

    lda currentGuardianY            ;
    cmp currentGuardianExtent1      ;
    beq bounceCurrentGuardian       ;
    cmp currentGuardianExtent2      ;
    beq bounceCurrentGuardian       ;

updateCurrentVerticalSkylab
    ldx currentGuardianIndex            ;
    dex                                 ;
    dex                                 ;
    dex                                 ;
    lda currentGuardianX                ;
    jsr writeByteToVerticalGuardians    ;
    inx                                 ;
    lda currentGuardianY                ;
    jsr writeByteToVerticalGuardians    ;
    inx                                 ;
    lda currentGuardianExtent1          ;
    jsr writeByteToVerticalGuardians    ;
    inx                                 ;
    lda currentGuardianExtent2          ;
    jsr writeByteToVerticalGuardians    ;
    inx                                 ;
    stx currentGuardianIndex            ;
    lda currentGuardianColour           ;
    clc                                 ;
    adc #1                              ;
    and #3                              ;
    sta currentGuardianColour           ;
    cpx #$10                            ;
    beq return11                        ;
    jmp updateOneVerticalGuardian       ;

; ***************************************************************************************
return11
    rts                                 ;

; ***************************************************************************************
bounceCurrentGuardian
    lda currentLevel                    ;
    cmp #14                             ;
    beq crashLand                       ; if (skylab landing bay) then don't bounce, crash land
    lda currentGuardianX                ; }
    eor #$80                            ; } flip direction
    sta currentGuardianX                ; }
    jmp updateCurrentVerticalSkylab     ;

; ***************************************************************************************
crashLand
    lda currentGuardianExtent1          ;
    eor #$80                            ;
    sta currentGuardianExtent1          ;
    jsr getSkylabAnimationIndex         ;
    lda #0                              ;
    sta guardianSpriteOffsets,y         ;
    jmp updateCurrentVerticalSkylab     ;

; ***************************************************************************************
drawSkylabCrashing
    jsr getSkylabAnimationIndex         ;
    lda guardianSpriteOffsets,y         ; }
    clc                                 ; }
    adc #1                              ; } add one to sprite offsets
    sta guardianSpriteOffsets,y         ; }
    asl                                 ;
    asl                                 ;
    asl                                 ;
    asl                                 ;
    asl                                 ;
    asl                                 ;
    sta plotSourceSpriteAddressLow      ; set source address (low) to 64 * spriteOffset
    sty tempGuardianSpriteOffset        ;
    jsr getSkylabSprite                 ;
    lda currentGuardianX                ;
    and #$3f                            ;
    asl                                 ;
    asl                                 ;
    clc                                 ;
    adc #$10                            ;
    tax                                 ;
    lda currentGuardianY                ;
    clc                                 ;
    adc #8                              ;
    tay                                 ;
    lda #3                              ;
    jsr plot                            ; draw Skylab crashing (mode 3)
    ldy tempGuardianSpriteOffset        ;
    lda guardianSpriteOffsets,y         ;
    cmp #6                              ;
    beq finishedCrashingSkylab          ;
    jmp updateCurrentVerticalSkylab     ;

; ***************************************************************************************
finishedCrashingSkylab
    lda #0                          ;
    sta currentGuardianY            ;
    lda currentGuardianExtent1      ;
    eor #$80                        ;
    sta currentGuardianExtent1      ;
    lda currentGuardianX            ;
    ora #$80                        ;
    clc                             ;
    adc #8                          ;
    sta currentGuardianX            ;
    and #$3f                        ;
    cmp #$20                        ;
    bcs guardianXTooBig             ;
    jmp updateCurrentVerticalSkylab ;

; ***************************************************************************************
getSkylabAnimationIndex
    lda currentGuardianY            ;
    cmp #$48                        ;
    beq setYZero                    ;
    cmp #$38                        ;
    beq setYOne                     ;

    ldy #2                          ;
    rts                             ;

; ***************************************************************************************
setYZero
    ldy #0                          ;
    rts                             ;

; ***************************************************************************************
setYOne
    ldy #1                          ;
    rts                             ;

; ***************************************************************************************
guardianXTooBig
    lda currentGuardianX            ;
    sec                             ;
    sbc #$20                        ;
    sta currentGuardianX            ;
    jmp updateCurrentVerticalSkylab ;

; ***************************************************************************************
getSkylabSprite
    jsr getSkylabAnimationIndex     ;
    lda guardianSpriteOffsets,y     ;
    cmp #4                          ;
    beq setSkylabSprite4            ;
    cmp #5                          ;
    beq setSkylabSprite5            ;
    cmp #6                          ;
    beq setSkylabSprite6            ;
    lda #>verticalGuardianMODE1Address  ;
    sta plotSourceSpriteAddressHigh     ;
    rts                                 ;

; ***************************************************************************************
setSkylabSprite4
    lda #<skylab4Sprite             ;
    sta plotSourceSpriteAddressLow  ; set sprite address
    lda #>skylab4Sprite             ;
    sta plotSourceSpriteAddressHigh ;
    rts                             ;

; ***************************************************************************************
setSkylabSprite5
    lda #<skylab5Sprite             ;
    sta plotSourceSpriteAddressLow  ; set sprite address
    lda #>skylab5Sprite             ;
    sta plotSourceSpriteAddressHigh ;
    rts                             ;

; ***************************************************************************************
setSkylabSprite6
    lda #<blankAreaOfScreen         ;
    sta plotSourceSpriteAddressLow  ; set sprite address (area to the right of screen that is blank)
    lda #>blankAreaOfScreen         ;
    sta plotSourceSpriteAddressHigh ;
    rts                             ;


; ***************************************************************************************
copyVerticalGuardianIntoMODE1Format
    ldy #0                              ; loop counter
    lda #<verticalGuardianMODE1Address  ; }
    sta storeByteY + 1                  ; }
!if (<verticalGuardianMODE1Address) != 0 {
    !error "vertical guardian address should be on a page boundary"
}
    sty tempX                           ; }
    lda #>verticalGuardianMODE1Address  ; }
    sta storeByteY + 2                  ; }

-
    ldx tempX                       ;
specialSpriteSourceAddress = * + 1
    lda $ffff,x                     ; [address overwritten before use]
    sta copyEugeneSourceByte        ; store source byte
    stx tempX                       ; [redundant]
    and #$f0                        ; extract top nybble
    sta copyEugeneTempByte          ; save it
    lsr                             ;
    lsr                             ;
    lsr                             ;
    lsr                             ; shift to lower nybble
    clc                             ;
    adc copyEugeneTempByte          ; add original to get a Eugene in colour 3

    jsr storeByteY                  ; store left hand byte

    lda copyEugeneSourceByte        ; recall source byte
    and #$0f                        ; lower nybble
    sta copyEugeneTempByte          ; save it
    asl                             ;
    asl                             ;
    asl                             ;
    asl                             ;
    clc                             ;
    adc copyEugeneTempByte          ; add lower nybble to get white Eugene in colour 3
    sta copyEugeneTempByte          ; store

    tya                             ; }
    clc                             ; } Y += 8
    adc #8                          ; }
    tay                             ; }

    lda copyEugeneTempByte          ;
    jsr storeByteY                  ; store right hand side byte of Eugene
    ldx tempX                       ;
    inx                             ; increment source counter
    stx tempX                       ;
    tya                             ; }
    sec                             ; }
    sbc #7                          ; } Y -= 7
    tay                             ; }
    cmp #8                          ;
    bne -                           ; loop 8 times
    ldy #$00                        ; reset loop counter
    lda storeByteY + 1              ;
    clc                             ;
    adc #$10                        ; add 16 to destination byte
    sta storeByteY + 1              ;
    ldx tempX                       ;
    cpx #$80                        ; check if we are done
    bne -                           ; if (not done) then branch (loop back)
    rts                             ;

; ***************************************************************************************
levelWithKongBeast
    lda #2                          ;
    sta copyWhichSprite             ; copy Kong
    jmp continueCopySprites         ;

; ***************************************************************************************
levelWithAmoebatrons
    lda #8                          ;
    sta copyWhichSprite             ; copy Amoebatrons
    jmp continueCopySprites         ;

; ***************************************************************************************
levelEugenesLair
    lda #1                          ;
    sta copyWhichSprite             ; copy Eugene
    lda #8                          ;
    sta eugenePositionY             ;
    jmp continueCopySprites         ;

; ***************************************************************************************
copyVerticalSprites
    lda #0                              ;
    sta verticalAnimationCounter        ;

    lda #>verticalGuardianGraphics      ; }
    sta specialSpriteSourceAddress + 1  ; } start of vertical graphics
    lda #<verticalGuardianGraphics      ; }
    sta specialSpriteSourceAddress      ; }
    lda currentLevel                    ;
    cmp #12                             ;
    beq levelWithKongBeast              ;
    cmp #8                              ;
    beq levelWithKongBeast              ;
    cmp #9                              ;
    beq levelWithAmoebatrons            ;
    cmp #5                              ;
    beq levelEugenesLair                ;
    lda currentLevel                    ;
    sec                                 ;
    sbc #10                             ;
    tax                                 ;
    lda verticalGuardiansSpritesArray,x ;
    sta copyWhichSprite                 ; copy based on level number - 10
continueCopySprites

    ; copy tolerances

    ; Top Left
    ldx copyWhichSprite                         ;
    lda #32                                     ;
    sec                                         ;
    sbc verticalGuardianTolerancesTL - 1, x     ;
    sta verticalToleranceTL                     ;
    sta verticalToleranceReversedTR             ;

    ; Top Right
    lda #32                                     ;
    sec                                         ;
    sbc verticalGuardianTolerancesTR - 1, x     ;
    sta verticalToleranceTR                     ;
    sta verticalToleranceReversedTL             ;

    ; Bottom Left
    lda #32                                     ;
    sec                                         ;
    sbc verticalGuardianTolerancesBL - 1, x     ;
    sta verticalToleranceBL                     ;
    sta verticalToleranceReversedBR             ;

    ; Bottom Right
    lda #32                                     ;
    sec                                         ;
    sbc verticalGuardianTolerancesBR - 1, x     ;
    sta verticalToleranceBR                     ;
    sta verticalToleranceReversedBL             ;

    ldx #1                              ;
-
    cpx copyWhichSprite                 ; multiplication by repeated addition
    beq foundSprite                     ;

    lda specialSpriteSourceAddress      ; }
    clc                                 ; }
    adc #$80                            ; }
    sta specialSpriteSourceAddress      ; } add $80 to address
    lda specialSpriteSourceAddress + 1  ; }
    adc #0                              ; }
    sta specialSpriteSourceAddress + 1  ; }

    inx                                 ;
    jmp -                               ;

; ***************************************************************************************
return4
    rts                                 ;

; ***************************************************************************************
foundSprite
    jsr copyVerticalGuardianIntoMODE1Format ;
    lda currentLevel                    ;
    cmp #9                              ; Levels 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
    beq handleVerticalGuardians         ; have vertical guardians
    cmp #11                             ;
    bcc return4                         ; if (currentLevel < 11) then branch (return)

handleVerticalGuardians
    sec                                 ;
    sbc #8                              ;
    asl                                 ;
    asl                                 ;
    asl                                 ;

    clc                                 ;
    adc #<verticalGuardianPositions     ;
    sta readVerticalGuardiansByte + 1   ; addr = verticalGuardianPositions + 8 * (currentLevel-8)
    lda #>verticalGuardianPositions     ;
    adc #0                              ;
    sta readVerticalGuardiansByte + 2   ;

    ldx #0                              ; loop counter
    ldy #0                              ;
-
    jsr readVerticalGuardiansByte       ;
    cmp #$ff                            ;
    beq finishUpVerticalGuardians       ; if (terminator) then branch
    sta currentVerticalGuardians,y      ; write x coordinate of vertical guardian. top bit is direction (clear = up, set = down)
    iny                                 ;
    inx                                 ;
    jsr readVerticalGuardiansByte       ;
    sta currentVerticalGuardians,y      ; write byte 1: copy byte 1
    iny                                 ;
    sta currentVerticalGuardians,y      ; write byte 2: copy byte 1
    iny                                 ;
    sta currentVerticalGuardians,y      ; write byte 3: copy byte 1

    lda currentVerticalGuardians,y      ; [redundant]
    and #$0f                            ;
    asl                                 ;
    asl                                 ;
    asl                                 ;
    sta currentVerticalGuardians,y      ; write first extent (bottom nybble of byte 1 multiplied by eight)

    dey                                 ;
    lda currentVerticalGuardians,y      ;
    and #$f0                            ;
    lsr                                 ;
    sta currentVerticalGuardians,y      ; write second extent (top nybble of byte 1 divided by two)

    dey                                 ;
    sta currentVerticalGuardians,y      ; write y coordinate (top nybble of byte 1 divided by two)
    iny                                 ;
    iny                                 ;
    iny                                 ; Y is effectively moved on four bytes in aggregate
    inx                                 ;
    cpx #8                              ; loop eight times
    bne -                               ;
    rts                                 ;

; ***************************************************************************************
finishUpVerticalGuardians
    sta currentVerticalGuardians,y      ;
    rts                                 ;

; ***************************************************************************************
readVerticalGuardiansByte
    lda verticalGuardianPositions + 8,x ;
    rts                                 ;

; ***************************************************************************************
readByteFromVerticalGuardians
    lda currentVerticalGuardians,x      ;
    rts                                 ;

; ***************************************************************************************
writeByteToVerticalGuardians
    sta currentVerticalGuardians,x      ;
return15
    rts                                 ;

; ***************************************************************************************
readGuardianByte
    lda $2280,x                     ; [address is overwritten before use]
    rts                             ;

; ***************************************************************************************
animateKeysUpdateHorizontalGuardiansAndLevel19EnergyFields
    jsr colourCycleKeys             ;
    jsr updateHorizontalGuardians   ;

    lda currentLevel                ;
    cmp #19                         ;
    bne return15                    ; if (level 19 - The Meteor Storm) then branch (update guardians and energy fields)
    jmp updateLevel19Special        ;

; ***************************************************************************************
updateHorizontalGuardians
    lda #0                          ;
    sta drawGuardianLoopCounter     ;
    tay                             ;
    tax                             ;

drawGuardiansLoop
    lda horizontalGuardianPositions,y ; }
    sta zpGuardianPositionX,x       ; }
    iny                             ; } copy guardian info to zero page cache
    inx                             ; } from horizontalGuardianPositions to $8a for four bytes
    cpx #4                          ; }
    bne drawGuardiansLoop           ; }

    lda zpGuardianPositionX         ;
    cmp #$ff                        ;
    beq return15                    ; if (end of guardian array) then branch (finish up)

    jsr updateAndDrawGuardian       ; update and draw guardian

    lda drawGuardianLoopCounter     ;
    clc                             ;
    rol                             ;
    rol                             ;
    tay                             ; Y = 4 * loop counter
    ldx #0                          ; loop counter

-
    lda zpGuardianPositionX,x       ; }
    sta horizontalGuardianPositions,y ; }
    inx                             ; } copy guardian info back from zero page cache
    iny                             ; } from $8a to horizontalGuardianPositions for four bytes
    cpx #4                          ; }
    bne -                           ; }

    inc drawGuardianLoopCounter     ;

    lda drawGuardianLoopCounter     ;
    clc                             ;
    rol                             ;
    rol                             ;
    tay                             ;
    ldx #0                          ;
    jmp drawGuardiansLoop           ;

; ***************************************************************************************
updateAndDrawGuardian
!ifdef debugPixelCollision {
    lda zpGuardianPositionX         ;
    and #3                          ;
    asl                             ;
    sta zpGuardianAnimIndex         ; temp = 2 * (guardianX and 3)
    jmp notAtCellXBoundary
}
    lda zpGuardianPositionY         ;
    eor #$40                        ; flip bit 6
    sta zpGuardianPositionY         ;

    tay                             ;
    and #$20                        ;
    cmp #$20                        ;
    bne moveLeftOrRight             ; if (bit 5 clear) then branch
    tya                             ;
    and #$40                        ;
    cmp #$40                        ;
    beq moveLeftOrRight             ; if (bit 6 set) then branch
    rts                             ;

spriteToDraw
    !byte $e0, $e1, $e8, $e9
    !byte $f1, $f0, $f9, $f8

; ***************************************************************************************
moveLeftOrRight
    lda drawGuardianLoopCounter     ;
    and #3                          ;
    tax                             ;
    lda guardianColourTable,x       ;
    sta plotColourMask              ; set plot colour

    lda zpGuardianPositionY         ;
    and #$80                        ;
    beq moveGuardianLeft            ;

    ; move guardian right
    lda zpGuardianPositionX         ;
    clc                             ;
    adc #1                          ;
    and #$7f                        ;
    sta zpGuardianPositionX         ;

    and #3                          ;
    asl                             ;
    sta zpGuardianAnimIndex         ; temp = 2 * (guardianX and 3)
    bne notAtCellXBoundary          ;

    jsr positionCursorAtGuardian    ;
    jsr eraseLeftOfGuardian         ;

notAtCellXBoundary
    jsr testForBounceHorizontal     ;
    jsr positionCursorAtGuardian    ;
    jmp drawHorizontalGuardian      ;

drawHorizontalGuardian
    ldx #0
    lda zpGuardianPositionY         ;
    bmi +                           ;
    ldx #4                          ;
+
    ; draw e0+temp, e1+temp
    ;      e8+temp, e9+temp
    ;
    ; or   f1+temp, f0+temp
    ;      f9+temp, f8+temp
    lda spriteToDraw,x              ;
    clc                             ;
    adc zpGuardianAnimIndex         ;
    jsr drawIfNotOverExit           ;

    lda spriteToDraw + 1,x          ;
    clc                             ;
    adc zpGuardianAnimIndex         ;
    jsr drawIfNotOverExit           ;

    inc cursorY                     ;
    dec cursorX                     ;
    dec cursorX                     ;

    lda spriteToDraw + 2,x          ;
    clc                             ;
    adc zpGuardianAnimIndex         ;
    jsr drawIfNotOverExit           ;

    lda spriteToDraw + 3,x          ;
    clc                             ;
    adc zpGuardianAnimIndex         ;
    jmp drawIfNotOverExit           ;

; ***************************************************************************************
setAnimIndexBasedOnX
;    lda zpGuardianPositionX         ;
;    and #3                          ;
;    asl                             ;
;    sta zpGuardianAnimIndex         ;
;    jmp afterSetAnimIndex           ;

; ***************************************************************************************
moveGuardianLeft
    lda zpGuardianPositionX         ;
    sec                             ;
    sbc #1                          ;
    and #$7f                        ;
    sta zpGuardianPositionX         ;
    and #3                          ;
    eor #3                          ;
    asl                             ;
    sta zpGuardianAnimIndex         ;
    bne +                           ;

    jsr positionCursorAtGuardian    ;
    jsr eraseRightOfGuardian        ;
+
;    lda currentLevel                ; }
;    cmp #19                         ; }
;    beq setAnimIndexBasedOnX        ; } these horizontal guardians reverse the direction
;    cmp #15                         ; } of animation when moving left
;    beq setAnimIndexBasedOnX        ; }

afterSetAnimIndex
    jsr testForBounceHorizontal     ;
    jsr positionCursorAtGuardian    ;

    jmp drawHorizontalGuardian      ;

; ***************************************************************************************
positionCursorAtGuardian
    lda zpGuardianPositionX         ;
    and #$fc                        ;
    lsr                             ;
    lsr                             ; TAB($8a/4 + 5, ($8b AND $0f) + 1)
    clc                             ;
    adc #5                          ;
    sta cursorX                     ;

    lda zpGuardianPositionY         ;
    and #$0f                        ;
    clc                             ;
    adc #1                          ;
    sta cursorY                     ;
    rts                             ;

; ***************************************************************************************
eraseLeftOfGuardian
    dec cursorX                     ; move left one character
    jmp +                           ;

; ***************************************************************************************
eraseRightOfGuardian
    inc cursorX                     ;
    inc cursorX                     ; move forward two characters
+
    jsr eraseIfNotOverExit          ;

    inc cursorY                     ; down
    dec cursorX                     ; left

    jsr eraseIfNotOverExit          ;
    rts                             ;

; ***************************************************************************************
toggleGuardianDirection
    lda zpGuardianPositionY         ;
    eor #$80                        ; toggle direction
    sta zpGuardianPositionY         ;
    lda zpGuardianAnimIndex         ;
    lsr                             ;
    eor #3                          ;
    asl                             ;
    sta zpGuardianAnimIndex         ;
    rts                             ;

; ***************************************************************************************
testForBounceHorizontal
    lda zpGuardianPositionX         ;
    cmp zpGuardianLimit1            ;
    beq toggleGuardianDirection     ;
    cmp zpGuardianLimit2            ;
    beq toggleGuardianDirection     ;
    rts                             ;

; ***************************************************************************************
copyGuardianSprites
    ldx currentLevel                    ;
    lda guardianSetForEachLevel - 1,x   ;
    sta zpGuardianPositionX             ;

    ; Top Left
    tax                                 ;
    lda #32                             ;
    sec                                 ;
    sbc guardianToleranceTL - 1, x      ;
    sta horizontalToleranceTL           ;
    sta horizontalToleranceReversedTR   ;

    ; Top Right
    lda #32                             ;
    sec                                 ;
    sbc guardianToleranceTR - 1, x      ;
    sta horizontalToleranceTR           ;
    sta horizontalToleranceReversedTL   ;

    ; Bottom Left
    lda #32                             ;
    sec                                 ;
    sbc guardianToleranceBL - 1, x      ;
    sta horizontalToleranceBL           ;
    sta horizontalToleranceReversedBR   ;

    ; Bottom Right
    lda #32                             ;
    sec                                 ;
    sbc guardianToleranceBR - 1, x      ;
    sta horizontalToleranceBR           ;
    sta horizontalToleranceReversedBL   ;

    lda #<guardianGraphics              ;
    sta readGuardianByte + 1            ; set address to read guardian graphics
    lda #>guardianGraphics              ;
    sta readGuardianByte + 2            ;

    ldx #1                              ;
-
    cpx zpGuardianPositionX             ;
    beq copyHorizontalGuardiansWithAddress  ;

    lda readGuardianByte + 1            ;
    clc                                 ;
    adc #$80                            ; multiplication by repeated addition
    sta readGuardianByte + 1            ; add $80 for each X up to zpGuardianPositionX
    lda readGuardianByte + 2            ;
    adc #0                              ;
    sta readGuardianByte + 2            ;
    inx                                 ;
    jmp -                               ;

; ***************************************************************************************
copyHorizontalGuardiansWithAddress
    ldx #0                              ; loop counter
-
    jsr readGuardianByte                ;
    sta horizontalGuardianCache,x       ; copy from guardian sprites to cache
    jsr reverseBits                     ;
    sta horizontalGuardianCache + $80,x ; copy reflected guardians to cache
    inx                                 ;
    cpx #$80                            ;
    bne -                               ;

    ; find guardian position data for current level
    lda #<(horizontalGuardianPositionData - 1)       ;
    sta readGuardianByte + 1            ; set start of guardian level data
    lda #>(horizontalGuardianPositionData - 1)       ;
    sta readGuardianByte + 2            ;

    ldy #0                              ;
    ldx #0                              ;
findGuardianDataLoop
    inc readGuardianByte + 1            ; } increment source address
    bne +                               ; }
    inc readGuardianByte + 2            ; }
+
    jsr readGuardianByte                ;
    cmp #$ff                            ;
    bne findGuardianDataLoop            ; until we reach a 255 (a level separator byte), branch back

    ; check level number
    iny                                 ;
    cpy currentLevel                    ;
    bne findGuardianDataLoop            ; if (not current level) then branch (loop back)

    ldy #0                              ;
    ldx #1                              ;
copyGuardianPositionDataLoop
    jsr readGuardianByte                ; Read Initial X Coordinate
    cmp #$ff                            ;
    beq finishedReadingGuardians        ;
    sta horizontalGuardianPositions,y   ; Store initial X coordinate
    inx
    iny                                 ;
    jsr readGuardianByte                ; Read Y Coordinate
    sta horizontalGuardianPositions,y   ; Store Y Coordinate
    inx
    iny                                 ;
    jsr readGuardianByte                ; Read X1 coordinate
    sta horizontalGuardianPositions,y   ; Store X1 coordinate
    inx                                 ;
    iny                                 ;
    jsr readGuardianByte                ; Read X2 coordinate
    sta horizontalGuardianPositions,y   ; Store X2 coordinate
    inx                                 ;
    iny                                 ;
    jmp copyGuardianPositionDataLoop    ;
finishedReadingGuardians
    sta horizontalGuardianPositions,y   ; terminator
    rts                                 ;

; ***************************************************************************************
isOverExit
    lda cursorY                         ;
    clc                                 ;
    adc #2                              ;
    cmp exitPositionY                   ;
    beq textXPosition                   ; if (matches Y, then test X)
    sec                                 ;
    sbc #1                              ;
    cmp exitPositionY                   ;
    bne return13                        ; if (not over exit) return with Z=0
textXPosition
    lda cursorX                         ;
    cmp exitPositionX                   ;
    beq return13                        ; if (over exit) return with Z=1
    sec                                 ;
    sbc #1                              ;
    cmp exitPositionX                   ; if (over exit) return with Z=1
return13
    rts                                 ;

; ***************************************************************************************
setCursorScreenAddress
    lda cursorX                         ;
    asl                                 ;
    asl                                 ;
    tax                                 ;
    stx plotX                           ;

    lda cursorY                         ;
    asl                                 ;
    asl                                 ;
    asl                                 ;
    tay                                 ;
    sty plotY                           ;

    ; remember plot screen address
    lda plotScreenAddressLow            ;
    pha                                 ;
    lda plotScreenAddressHigh           ;
    pha                                 ;

    jsr plotGetScreenAddress            ;

    ; record results
    lda plotScreenAddressLow            ;
    sta cellScreenAddressLow            ;
    lda plotScreenAddressHigh           ;
    sta cellScreenAddressHigh           ;

    ; restore plot screen address
    pla                                 ;
    sta plotScreenAddressHigh           ;
    pla                                 ;
    sta plotScreenAddressLow            ;
    rts                                 ;

; ***************************************************************************************
drawIfNotOverExit
    sta rememberCharacterToDraw         ;
    txa                                 ;
    pha                                 ;
    jsr isOverExit                      ;
    beq moveForward                     ;

    jsr setCursorScreenAddress          ;
    lda rememberCharacterToDraw         ;
    and #$1f                            ;
    asl                                 ;
    asl                                 ;
    asl                                 ;
    clc                                 ;
    adc #<horizontalGuardianCache       ;
    sta cellPlotSourceSpriteAddressLow  ;
    lda #>horizontalGuardianCache       ;
    adc #0                              ;
    sta cellPlotSourceSpriteAddressHigh ;
    jsr cellPlot                        ;

moveForward
    inc cursorX                         ; move forward
    pla                                 ;
    tax                                 ;
    rts                                 ;

; ***************************************************************************************
eraseIfNotOverExit
    jsr isOverExit                      ;
    beq moveForward2                    ;

    jsr setCursorScreenAddress          ;
    lda #<eraseGuardianEmptyBytes       ;
    sta cellPlotSourceSpriteAddressLow  ;
    lda #>eraseGuardianEmptyBytes       ;
    sta cellPlotSourceSpriteAddressHigh ;
    jsr cellPlot                        ;

moveForward2
    inc cursorX                         ; move forward
    rts                                 ;

; ***************************************************************************************
swapGuardianInfoWithCopy
    ldx #0                              ; loop counter
-
    lda guardianPositionsCopy,x         ;
    tay                                 ;
    lda horizontalGuardianPositions,x   ;
    sta guardianPositionsCopy,x         ;
    tya                                 ;
    sta horizontalGuardianPositions,x   ;
    inx                                 ;
    cpx #5                              ;
    bne -                               ;
    rts                                 ;

; ***************************************************************************************
checkForMeteorCollision
    ; copy guardian info away
    jsr swapGuardianInfoWithCopy        ;

    lda meteorXCoordinate               ; x coordinate
    sec                                 ;
    sbc #5                              ;
    asl                                 ;
    asl                                 ;
    sta horizontalGuardianPositions     ;

    lda meteorYCoordinate               ; y coordinate
    clc                                 ;
    adc #1                              ;
    sta horizontalGuardianPositions + 1 ; set y coordinate

    lda #$ff                            ;
    sta horizontalGuardianPositions + 4 ; only one guardian
    jsr collideWithHorizontalGuardians  ; check for collision

    ; copy guardian info back
    jmp swapGuardianInfoWithCopy        ;

; ***************************************************************************************
eraseTail
    jsr eraseCell                       ;
    jmp afterEraseTail                  ;

drawMeteorPart
    clc                                 ;
    adc #<meteorAndTailSprites          ;
    sta cellPlotSourceSpriteAddressLow  ;
    lda #>meteorAndTailSprites          ;
    adc #0                              ;
    sta cellPlotSourceSpriteAddressHigh ;
    jmp cellPlot                        ;

; ***************************************************************************************
updateLevel19Special
    jsr updateLevel19EnergyFields       ;

    ; update meteors...
    jsr checkForMeteorCollision         ;

    inc meteorYCoordinate               ; meteor moves down
    lda meteorYCoordinate               ;
    and #1                              ;
    asl                                 ;
    asl                                 ;
    asl                                 ;
    sta meteorTailAnimationOffset       ;

    lda #$ff                            ;
    sta plotColourMask                  ; COLOUR 3

    lda meteorXCoordinate               ;
    sta cursorX                         ;
    lda meteorYCoordinate               ;
    sta cursorY                         ;
    bne eraseTail                       ;
afterEraseTail
    inc cursorY                         ;
    jsr setCursorScreenAddress          ;

    ; check for meteor landing
    lda meteorYCoordinate               ;
    cmp meteorLandingY                  ;
    beq meteorLanded                    ;

    ; meteor still falling
meteorStillFalling
drawMeteor
    lda meteorTailAnimationOffset       ;
    jsr drawMeteorPart                  ;
    inc cursorY                         ;
    jsr setCursorScreenAddress          ;
    lda meteorTailAnimationOffset       ;
    clc                                 ;
    adc #16                             ;
    jmp drawMeteorPart                  ;

meteorLandState1
    lda #32                             ;
-
    sta meteorTailAnimationOffset       ;
    jmp drawMeteor                      ;

; ***************************************************************************************
meteorLanded
    inc meteorAnimationState            ;
    dec meteorYCoordinate               ;
    lda meteorAnimationState            ;
    cmp #4                              ;
    beq eraseLandedMeteors              ;
    cmp #1                              ;
    beq meteorStillFalling              ;
    cmp #2                              ;
    beq meteorLandState1                ;

    ; animation state 3 (second landed state)
    lda #40                             ;
    jmp -                               ;

; ***************************************************************************************
eraseLandedMeteors
    jsr eraseCell                       ;
    inc cursorY                         ;
    jsr setCursorScreenAddress          ;
    jsr eraseCell                       ;

    lda #0                              ;
    sta meteorAnimationState            ;
    lda #$ff                            ;
    sta meteorYCoordinate               ;

    ; show next meteor
    inc meteorIndex                     ;
    lda meteorIndex                     ;
    and #$0f                            ;
    tax                                 ;
    lda meteorXCellPositions,x          ;
    sta meteorXCoordinate               ;
    lda meteorLandingYCell,x            ;
    sta meteorLandingY                  ;
    rts                                 ;

; ***************************************************************************************
updateLevel19EnergyFields
    lda energyFieldTimer                ;
    and #$10                            ;
    cmp #0                              ;
    beq +                               ;
    ldx #3                              ;
    ldy #$ff                            ;
    jsr checkForEnergyFieldCollisions   ;
+
    ldx #3                              ;
    jmp updateEnergyFields              ;

; ***************************************************************************************
level19EnergyFieldAddress0 = $3ff2
level19EnergyFieldAddress1 = $3ff2 + $90
level19EnergyFieldAddress2 = $49f2
level19EnergyFieldAddress3 = $49f2 + $90

level20EnergyFieldAddress0 = $3942
level20EnergyFieldAddress1 = $4f42

energyFieldAddressesLow
    !byte <level19EnergyFieldAddress0
    !byte <level19EnergyFieldAddress1
    !byte <level19EnergyFieldAddress2
    !byte <level19EnergyFieldAddress3
    !byte <level20EnergyFieldAddress0
    !byte <level20EnergyFieldAddress1
energyFieldAddressesHigh
    !byte >level19EnergyFieldAddress0
    !byte >level19EnergyFieldAddress1
    !byte >level19EnergyFieldAddress2
    !byte >level19EnergyFieldAddress3
    !byte >level20EnergyFieldAddress0
    !byte >level20EnergyFieldAddress1

; ***************************************************************************************
checkForEnergyFieldCollisions
    sty minIndex                    ;
-
    lda energyFieldAddressesLow,x   ;
    sta altScreenAddressLow         ;
    lda energyFieldAddressesHigh,x  ;
    sta altScreenAddressHigh        ;
    ldy #0                          ;
    lda (altScreenAddressLow), y    ;
    and #$80                        ; top bit set indicates collision
    bne deathJumper2                ;
    ldy #7                          ;
    lda (altScreenAddressLow), y    ;
    and #1                          ; bottom bit set indicates collision
    bne deathJumper2                ;
    dex                             ;
minIndex = * + 1
    cpx #0                          ;
    bne -                           ;

    rts                             ;

; ***************************************************************************************
deathJumper2
    jmp death                       ;

; ***************************************************************************************
drawFooterText
    lda #$60                        ;
    sta drawFooterTextOrReturn      ; Store opcode for RTS
    jsr drawRoomName                ;
    jmp drawScoreLevelLives         ;

; ***************************************************************************************
resetLevel19Meteors
    lda #$20                        ; }
    sta drawFooterTextOrReturn      ; } store opcode for JSR
    lda #8                          ;
    sta meteorXCoordinate           ;
    lda #$ff                        ;
    sta meteorYCoordinate           ;
    lda #6                          ;
    sta meteorLandingY              ;
    lda #0                          ;
    sta meteorIndex                 ;
    lda #$f0                        ;
    sta energyFieldTimer            ;
    jmp resetVerticalSprites        ;

; ***************************************************************************************
showTitleScreenMessageAndWaitForRETURN
    lda #2                          ;
    sta lives                       ;

    ; set palette to regular numbers for the title screen
    ldx #0                          ;
-
    lda titleScreenPalette,x        ;
    sta playAreaPalette,x           ;
    lda titleScreenFooterPalette,x  ;
    sta footerPalette,x             ;
    inx                             ;
    cpx #4                          ;
    bne -                           ;

    ; wait for key press loop
    lda #$ff                        ;
    sta $70                         ;
    lda #0                          ;
    sta $71                         ;
waitForKeyPressDelayLoop
    ldx #keyCodeRETURN              ; }
    jsr isKeyPressed                ; } is RETURN pressed
    beq startGameJumper             ; if (RETURN pressed) then branch
    inc $71                         ;
    bne waitForKeyPressDelayLoop    ;
    dec $70                         ;
    bne waitForKeyPressDelayLoop    ;

    ; start demo mode
    lda #$ff                        ;
    sta previousNoteByte            ;
    sta musicCounter                ;
    lda #200                        ;
    sta currentNoteTimePlayed       ;
    jsr resumeMusic                 ;
    jmp playAttractLoop             ;

; ***************************************************************************************
startGameJumper
    jmp startGame                   ;

; ***************************************************************************************
resetVerticalSprites
    lda #$ff                        ;
    sta willyIsOnGround             ;
    jmp copyVerticalSprites         ;

; ***************************************************************************************
drawFooterTextOrReturn
    jsr drawFooterText              ;

drawScoreLevelLives
    lda currentLevel                ;
    cmp #10                         ; level 10 - The Endorian Forest
    bne nonLevel10                  ;
    lda #$ff                        ;
    sta conveyorLength              ;
    jmp drawFixedString             ;

; ***************************************************************************************
nonLevel10
    lda #1                          ;
    sta conveyorDirection           ; direction = $01
    ldy currentLevel                ;
    lda fixedText - 1,y             ;
    bmi +                           ; conveyor direction
    lda #255
    sta conveyorDirection           ; direction = $ff
+
    lda $71                         ;
    clc                             ;
    adc #5                          ;
    sta conveyorX                   ;

    lda $72                         ;
    and #$1f                        ;
    clc                             ;
    adc #1                          ;
    sta conveyorY                   ;

    lda $73                         ;
    and #$1f                        ;
    sta conveyorLength              ;

    lda $73                         ;
    asl                             ;
    rol                             ;
    rol                             ;
    and #3                          ;
    tax                             ;
    lda maskColourTable, x          ;
    sta conveyorColour              ;

drawFixedString
    ldx #4                          ;
    ldy #20                         ;
    jsr setTextPos                  ; TAB(4,20)

    ; draw fixed text below play area
    ldy #0                          ;
-
    lda fixedText,y                 ;
    and #$7f                        ;
    jsr OSWRCH                      ;
    iny                             ;
    cpy #fixedTextEnd - fixedText   ;
    bne -                           ;
    rts                             ;

; ***************************************************************************************
; On Entry:
;       A = colour (add 128 to set background colour)
setTextColour
    pha                             ;
    lda #17                         ;
    jsr OSWRCH                      ;
    pla                             ;
    jmp OSWRCH                      ;

; ***************************************************************************************
setTextPosFromPixelPos
    txa                             ; }
    lsr                             ; }
    lsr                             ; }
    sta cursorX                     ; } TAB(X/4, Y/8+2)
    tya                             ; }
    lsr                             ; }
    lsr                             ; }
    lsr                             ; }
    clc                             ; }
    adc #2                          ; }
    sta cursorY                     ; }
    rts                             ;

; ***************************************************************************************
setTextPos
    lda #31                         ;
    jsr OSWRCH                      ;
    txa                             ;
    jsr OSWRCH                      ;
    tya                             ;
    jmp OSWRCH                      ;

; ***************************************************************************************
;
; On Entry:
;   cellPlotSourceSpriteAddress is address of sprite
;   cellScreenAddress           is screen address (use plotGetScreenAddress to get address)
;   plotColourMask              is $00 for colour 0, $0f for colour 1, $f0 for colour 2, and $ff for colour 3
;
; ***************************************************************************************
cellPlot
    ldy #7                              ;
-
    lda (cellPlotSourceSpriteAddressLow),y  ;
    and #$f0                            ;
    sta tempCellPlotA                   ;
    lsr                                 ;
    lsr                                 ;
    lsr                                 ;
    lsr                                 ;
tempCellPlotA = * + 1
    adc #$ff                            ;
    and plotColourMask                  ;
    sta (cellScreenAddressLow),y        ; left side
    dey                                 ;
    bpl -                               ;

    lda cellPlotSourceSpriteAddressLow  ;
    sec                                 ;
    sbc #8                              ;
    sta cellPlotSourceSpriteAddressLow  ;
    bcs +                               ;
    dec cellPlotSourceSpriteAddressHigh ;
+

    ldy #15                             ;
-
    lda (cellPlotSourceSpriteAddressLow),y  ;
    and #$0f                            ;
    tax                                 ;
    lda toFullColour,x                  ;
    and plotColourMask                  ;
    sta (cellScreenAddressLow),y        ; right side
    dey                                 ;
    cpy #7                              ;
    bne -                               ;
return10
    rts                                 ;

; ***************************************************************************************
drawConveyor
    lda hasDrawnConveyors               ;
    bne return10                        ;
    lda #1                              ;
    sta hasDrawnConveyors               ;

    lda currentLevel                    ;
    cmp #18                             ;
    beq return10                        ;

    inc conveyorSpriteOffset            ;
    lda conveyorLength                  ;
    cmp #$ff                            ;
    beq return10                        ;

    lda #0                              ;
    ldx conveyorDirection               ;
    cpx #1                              ;
    bne +                               ;
    lda #3                              ;
+
    eor conveyorSpriteOffset            ;

    and #3                              ;
    asl                                 ;
    asl                                 ;
    asl                                 ;
    clc                                 ;
    adc #<currentConveyorSprites        ;
    sta cellPlotSourceSpriteAddressLow  ;
    lda #>currentConveyorSprites        ; currentConveyorSprites + offset*8
    sta cellPlotSourceSpriteAddressHigh ;

    lda conveyorX                       ;
    sta cursorX                         ;

    lda conveyorY                       ;
    sta cursorY                         ;

    jsr setCursorScreenAddress          ;
    lda conveyorColour                  ;
    sta plotColourMask                  ; plot colour 2

    jsr cellPlot                        ; plot first conveyor
    ldx conveyorLength                  ;

    lda cellScreenAddressLow            ;
    sta fromScreenAddressLow            ;
    sta toScreenAddressLow              ;
    lda cellScreenAddressHigh           ;
    sta fromScreenAddressHigh           ;
    sta toScreenAddressHigh             ;

--
    dex                                 ;
    beq doneConveying                   ;

    lda toScreenAddressLow              ;
    clc                                 ;
    adc #16                             ;
    sta toScreenAddressLow              ;
    bcc +
    inc toScreenAddressHigh             ;
+
    ldy #15                             ;
-
fromScreenAddressLow = * + 1
fromScreenAddressHigh = * + 2
    lda $ffff,y                         ;
toScreenAddressLow = * + 1
toScreenAddressHigh = * + 2
    sta $ffff,y                         ;
    dey                                 ;
    bpl -                               ;

    jmp --                              ;
doneConveying
    rts                                 ;


; ***************************************************************************************
showScoreLivesAndLevel
    lda #$ff                        ; }
    jsr addToScore                  ; } add 0 to score

    ; show lives
    ldx #34                         ; }
    ldy #20                         ; }
    jsr setTextPos                  ; } TAB(34,20)

    lda currentLevel                ; show current level
    tax                             ; [redundant]
    ldy #0                          ; counter for tens digit
    jsr print10sDigit               ; print 10s digit
    txa                             ; X is units
    tay                             ;
    jmp printY                      ; print units

; ***************************************************************************************
;
; On Entry:
;   A is the number to print
;   Y = 0
;
; ***************************************************************************************
print10sDigit
    cmp #10                         ;
    bcc printY                      ;
    iny                             ;
    sec                             ;
    sbc #10                         ;
    jmp print10sDigit               ;

; ***************************************************************************************
;
; print a single digit 0-9 in the Y register
;
; On Entry:
;   Y is the digit 0-9 to print
;
; ***************************************************************************************
printY
    tax                             ;
    tya                             ;
    clc                             ;
    adc #$30                        ;
    jmp OSWRCH                      ;

; ***************************************************************************************
setVerticalDisplayedCharacters
    stx numChars                    ;
    jsr printFollowingMessage       ;
    !byte 10                        ; number of characters to print
    !byte 23, 0, 6                  ;
numChars
    !byte $ff                       ;
    !byte 0,0,0,0,0,0               ;
    rts                             ;

; ***************************************************************************************
clearScreen
    ldy #>(screenEndAddress - screenStartAddress)   ;
    ldx #<(screenEndAddress - screenStartAddress)   ; XY = length of area to clear
clearScreenXY
    ; clear memory from screenStartAddress to screenEndAddress
    lda #<screenStartAddress        ;
    sta injectAddressLow            ;
    lda #>screenStartAddress        ;
    sta injectAddressHigh           ;
    lda #0                          ;
    beq +                           ;
-
    dex                             ;
injectAddressLow = * + 1
injectAddressHigh = * + 2
    sta $ffff,x                     ; clear screen
    bne -                           ;
    lda #<screenEndAddress          ;
    sta injectAddressLow            ;
    txa                             ; A = 0
    inc injectAddressHigh           ;
+
    dey                             ;
    bpl -                           ;

    ldx #20                             ; show 20 character rows
    jmp setVerticalDisplayedCharacters  ;

; ***************************************************************************************
level10Init
    lda #$81                            ; } use alternative floor as conveyor (not used?)
    sta levelFeatureConveyorOrLadder    ; }
    jmp levelInitContinued              ;

; ***************************************************************************************
drawSwitches
    jsr printFollowingMessage       ;
    !byte drawSwitchesMessageEnd - drawSwitchesMessage
drawSwitchesMessage
    !byte 17, 3                     ; COLOUR 3
    !byte 31, 10, 1                 ; TAB
    !byte $98                       ; Switch
    !byte charSPACE, charSPACE, charSPACE, charSPACE, charSPACE
    !byte charSPACE, charSPACE, charSPACE, charSPACE, charSPACE, charSPACE    ; 11 Spaces
    !byte $98                       ; Switch
drawSwitchesMessageEnd
    jmp nonLevel10Init              ;

level13Init
    lda #$95                        ; ladder
    sta levelFeatureCrumble         ;
    jmp levelInitContinued          ;

; ***************************************************************************************
readByteOffsetX
    lda $2c00,x                     ; read byte [high byte of address overwritten before use]
    rts                             ;

; ***************************************************************************************
initLevel
    jsr setBlackPalette             ;
    jsr clearScreen                 ;
    lda #<levelDefinitions          ; }
    sta readByteOffsetX + 1         ; }
    lda #>levelDefinitions          ; } read data from level definitions upwards
    sta readByteOffsetX + 2         ; }

    lda #$8b                         ;
    sta levelFeatureConveyorOrLadder ; default conveyor is the regular crumble floor sprite

    lda currentLevel                ;
    cmp #10                         ;
    beq level10Init                 ;
    cmp #8                          ; }
    beq drawSwitches                ; } if (level 8 or 12) then branch (show switches)
    cmp #12                         ; }
    beq drawSwitches                ; }

nonLevel10Init
    lda #$8b                         ; } alternative conveyor (thin)
    sta levelFeatureConveyorOrLadder ; }

    lda currentLevel                ;
    cmp #13                         ;
    beq level13Init                 ;
    lda #$82                        ; crumble floor
    sta levelFeatureCrumble         ;

levelInitContinued
    ldx #0                          ;
    stx levelNumberCounter          ;

findLevelDataLoop
    jsr readByteOffsetX             ;
    inx                             ;
    cpx #0                          ;
    bne +                           ;
    inc readByteOffsetX + 2         ; increment high byte
+
    cmp #$ff                        ;
    beq +                           ;
    jmp findLevelDataLoop           ;

+
    jsr readByteOffsetX             ;
    cmp #$ff                        ;
    bne findLevelDataLoop           ; if (not end of current level data) then branch (loop back)
    inc levelNumberCounter          ;
    lda levelNumberCounter          ; add one to level counter
    cmp currentLevel                ;
    bne findLevelDataLoop           ; if (not the level we are looking for) then branch (loop back)
    jmp foundLevelData              ;

; ***************************************************************************************
readLevelDataByte
    lda $2c00,x                     ;
    rts                             ;

; ***************************************************************************************
setBlackPalette
    ; set palette to black
    lda #0                          ;
    ldx #0                          ;
-
    sta playAreaPalette, x          ;
    sta footerPalette, x            ;
    inx                             ;
    cpx #4                          ;
    bne -                           ;
    rts                             ;

; ***************************************************************************************
foundLevelData
    inx                             ; }
    txa                             ; }
    clc                             ; }
    adc readByteOffsetX + 1         ; }
    sta readLevelDataByte + 1       ; } store address of start of level data
    lda readByteOffsetX + 2         ; }
    adc #0                          ; }
    sta readLevelDataByte + 2       ; }

    ; *****************************
    ; get level colours
    ; *****************************
    ldx currentLevel                ;
    lda levelColoursArray - 1, x    ;
    sta levelColours                ;
    lda levelColours2Array - 1, x   ;
    sta levelColours2               ;

    ; *****************************
    ; get floor sprite
    ; *****************************
    lda levelFloorCrumbleArray - 1, x   ;
    and #$f0                        ;
    lsr                             ;
    tax                             ;

    ; copy floor sprite from floorSprites+X to currentFloorSprites for 16 bytes
    ldy #0                          ;
-
    lda floorSprites,x              ;
    sta currentFloorSprites,y       ;
    inx                             ;
    iny                             ;
    cpy #16                         ;
    bne -                           ;

    ; *****************************
    ; get crumble floor sprites
    ; *****************************
    ldx currentLevel                    ;
    lda levelFloorCrumbleArray - 1, x   ;
    and #$0f                        ;
    clc                             ;
    rol                             ;
    rol                             ;
    rol                             ;
    tax                             ;

    ; copy crumble sprite from crumbleSprites+X to currentCrumbleSprites for 8 bytes
    ldy #0                          ;
-
    lda crumbleSprites,x            ;
    sta currentCrumbleSprites,y     ;
    iny                             ;
    inx                             ;
    cpy #8                          ;
    bne -                           ;

    ;
    ; copy crumble seven times into the different crumbled states:
    ;
    ;       $0c19-$0c28
    ;       $0c22-$0c30
    ;       $0c2b-$0c38
    ;       $0c34-$0c40
    ;       $0c3d-$0c48
    ;       $0c46-$0c50
    ;       $0c4f-$0c58
    ;
    lda #1                          ;
    sta tempCounter                 ;
    lda #$18                        ;
    sta storeAddressLow             ;

tempLoop
    ldx #0                          ;
    ldy tempCounter                 ; loop counter

-
    lda currentCrumbleSprites,x     ;
storeAddressLow = * + 1
    sta currentCrumbleSprites+8,y   ;
    inx                             ;
    iny                             ;
    cpy #8                          ;
    bne -                           ;

    inc tempCounter                 ;
    lda storeAddressLow             ;
    clc                             ;
    adc #8                          ;
    sta storeAddressLow             ;
    lda tempCounter                 ;
    cmp #8                          ;
    bne tempLoop                    ;

    ; *****************************
    ; get side wall colours
    ; *****************************
    ldx currentLevel                                ;
    lda levelSideWallColoursConveyorArray - 1, x    ;
    lsr                             ;
    lsr                             ;
    lsr                             ;
    lsr                             ;
    tay                             ;
    and #3                          ;
    sta sideWallColour1             ;
    tya                             ;
    lsr                             ;
    lsr                             ;
    sta sideWallColour2             ;

    ; *****************************
    ; get conveyor sprite
    ; *****************************
    ; We transform abcdefgh -> fgh00000
    lda levelSideWallColoursConveyorArray - 1, x    ;
    asl                             ;
    asl                             ;
    asl                             ;
    asl                             ;
    asl                             ;
    tax                             ;

    ; copy conveyor sprite from conveyorSprites+X to currentConveyorSprites for 32 bytes
    ldy #0                          ;
-
    lda conveyorSprites,x           ;
    sta currentConveyorSprites,y    ;
    inx                             ;
    iny                             ;
    cpy #$20                        ;
    bne -                           ;

    ; *****************************
    ; get side wall sprite
    ; *****************************
    ldx currentLevel                    ;
    lda levelSideWallKeyArray - 1, x    ;
    and #$f0                            ; get upper nybble
    lsr                                 ; divide by 2
    tax                                 ;

    ; copy side wall sprite from wallSprites+X to currentWallSprite for 8 bytes
    ldy #0                          ;
-
    lda wallSprites,x               ;
    sta currentWallSprite,y         ;
    iny                             ;
    inx                             ;
    cpy #8                          ;
    bne -                           ;

    ; *****************************
    ; get key sprite
    ; *****************************
    ldx currentLevel                    ;
    lda levelSideWallKeyArray - 1, x    ;
    and #$0f                        ; get lower nybble
    asl                             ;
    asl                             ;
    asl                             ; multiply by eight
    tax                             ;

    ; copy key sprite from keySprites+X to currentKeySprite for 8 bytes
    ldy #0                          ;
-
    lda keySprites,x                ;
    sta currentKeySprite,y          ;
    iny                             ;
    inx                             ;
    cpy #8                          ;
    bne -                           ;

    jsr getExitSprite               ;

    ; For the Master, define the graphics officially
    jsr defineMasterCharacters      ;

    jsr setBlackPalette             ;
    jmp drawLevel                   ;

; ***************************************************************************************
defineMasterCharacters
    ldy #0                          ;
-
    tya                             ;
    and #7                          ;
    bne +                           ;
    lda #23                         ;
    jsr OSWRCH                      ;
    tya                             ;
    lsr                             ;
    lsr                             ;
    lsr                             ;
    clc                             ;
    adc #$80                        ;
    jsr OSWRCH                      ;
+
    lda $0c00,y                     ;
    jsr OSWRCH                      ;
    iny                             ;
    bne -                           ;
    rts                             ;

; ***************************************************************************************
getExitSprite
    ; $86 bottom 6 bits holds the exit sprite
    ;     top two bits are the type:
    ;
    ;   00 = 8x8 exit sprite repeated four times (lower 3 bits are sprite number)
    ;   01 = 16x16 exit sprite (lower 3 bits are the sprite number)
    ;   10 = 8x16 exit sprite reflected in the Y axis (lower bits are the sprite number)
    ;   11 = 8x8 exit sprite reflected four times (lower 5 bits are sprite number)
    ;
    ldx currentLevel                    ;
    lda levelExitTypeSpriteArray - 1, x ;
    and #$c0                        ; get top two bits
    beq getExit8x8                  ; if (neither bit set) then branch
    cmp #$80                        ;
    beq getExit8x16                 ;
    cmp #$c0                        ;
    beq getExit8x8Reflected         ;

getExit16x16
    lda levelExitTypeSpriteArray - 1, x ;
    asl                             ;
    asl                             ;
    asl                             ;
    asl                             ;
    asl                             ; multiply by 32
    tax                             ;
    ; copy 32 bytes of exit sprite to currentExitSprite
    ldy #0                          ;
-
    lda exitSprites2x2,x            ;
    sta currentExitSprite,y         ;
    inx                             ;
    iny                             ;
    cpy #32                         ;
    bcc -                           ;
    rts                             ;

getExit8x8Reflected
    lda levelExitTypeSpriteArray - 1, x     ;
    asl                             ;
    asl                             ;
    asl                             ; multiply by eight
    tax                             ;

    ; copy eight bytes of exit sprite, store in top left quadrant, then reverse the bits
    ; and store in the top right.
    ldy #0                          ;
-
    lda exitSprites1x1Reflected,x   ;
    sta currentExitSprite,y         ;
    jsr reverseBits                 ;
    sta currentExitSprite + 8,y     ;
    inx                             ;
    iny                             ;
    cpy #8                          ;
    bne -                           ;

    ; copy the bytes from the top half of the exit to the bottom half, reflecting
    ldy #0                          ;
    ldx #7                          ;
-
    lda currentExitSprite,y         ;
    sta currentExitSprite + 16,x    ;
    lda currentExitSprite + 8,y     ;
    sta currentExitSprite + 24,x    ;
    iny                             ;
    dex                             ;
    bpl -                           ;
    rts                             ;

getExit8x8
    lda levelExitTypeSpriteArray - 1, x     ;
    asl                             ;
    asl                             ;
    asl                             ; multiply by eight
    tax                             ;

    ; copy eight bytes of the exit
    ldy #0                          ;
-
    lda exitSprites1x1,x            ;
    sta currentExitSprite,y         ;
    sta currentExitSprite + 8,y     ;
    sta currentExitSprite + 16,y    ;
    sta currentExitSprite + 24,y    ;
    inx                             ;
    iny                             ;
    cpy #8                          ;
    bne -                           ;
    rts                             ;

getExit8x16
    lda #>exitSprites1x2            ;
    sta getExitSourceByte + 2       ;
    lda levelExitTypeSpriteArray - 1, x ;
    asl                             ;
    asl                             ;
    asl                             ;
    asl                             ;
    clc                             ;
    adc #<exitSprites1x2            ;
    sta getExitSourceByte + 1       ;
    bcc +                           ;
    inc getExitSourceByte + 2       ;
+

    ; copy 16 bytes
    ldy #15                          ; loop counter
getExitSourceByte
    lda exitSprites1x2,y            ;
    sta currentExitSprite,y         ;
    dey                             ;
    bpl getExitSourceByte           ;

    ; reverse the left hand side of the exit to get the right hand side
    ldx #7                          ;
-
    lda currentExitSprite + 8,x     ;
    sta currentExitSprite + 16,x    ;
    jsr reverseBits                 ;
    sta currentExitSprite + 24,x    ;

    lda currentExitSprite,x         ;
    jsr reverseBits                 ;
    sta currentExitSprite + 8,x     ;

    dex                             ;
    bpl -                           ;
    rts                             ;

; ***************************************************************************************
;
; Reverse the order of all bits in A
;
;  from https://sites.google.com/site/h2obsession/programming/6502
;
; ***************************************************************************************
reverseBits
    sta byteToReverse               ;
    lda #1                          ;
-
    lsr byteToReverse               ;
    rol                             ;
    bcc -                           ;
    rts                             ;

; ***************************************************************************************
drawExit
    ldx currentLevel                    ;
    lda levelExitColourArray - 1, x     ;
    sta exitColour                      ;
    sta plotColourMask                  ;
    ldx currentLevel                    ;
    lda levelExitPositionXArray - 1, x  ;
    sta $70                             ;
    sta exitPositionX                   ;
    lda levelExitPositionYArray - 1, x  ;
    sta $71                             ;
    sta exitPositionY                   ;

    jmp flashExit                   ;

; ***************************************************************************************
setRoomColours
    lda #0                          ;
    jsr OSWRCH                      ; [replace with cellPlot?]
    jsr drawInitialAirMeter         ;

    jsr updateAirAndCheckExit       ;
    jsr drawConveyor                ;
    jsr drawExit                    ;

    lda levelColours                ;
    and #$0f                        ;
    sta playAreaPalette             ; set palette from lower nybble
    sta footerPalette               ; set footer background too
    cmp #red                        ; }
    bne +                           ; } with a red background (Eugene's Lair) choose a magenta air bar
    lda #magenta                    ; }
    jmp ++                          ; }
+
    lda #red                        ; }
++
    sta footerPalette + 1           ;
    lda #green
    sta footerPalette + 2           ;
    lda #white
    sta footerPalette + 3           ;

    lda levelColours                ;
    and #$f0                        ;
    lsr                             ;
    lsr                             ;
    lsr                             ;
    lsr                             ;
    sta playAreaPalette + 1         ; set palette from upper nybble

    lda levelColours2               ;
    and #$0f                        ;
    sta playAreaPalette + 2         ; set palette from second colour byte (lower nybble)
    lda #3                          ;
    sta playAreaPalette + 3         ; set palette(3) = 3
    rts                             ;

; ***************************************************************************************
;
; Level decoding and drawing
;
; ***************************************************************************************

; ***************************************************************************************
command255IncrementFeatureIndex
    stx levelDataOffset             ;
    lda currentLevelFeatureIndex    ;
    cmp #5                          ;
    beq setRoomColours              ; if (feature 5) then branch (we have finished)
    inc currentLevelFeatureIndex    ; increment current level feature
    jmp decodeNextFeature           ;

; ***************************************************************************************
command253SetType
    inx                             ;
    jsr readLevelDataByte           ; read next byte
    sta currentLevelFeatureIndex    ; store as the current feature index
    stx $70                         ; record incremented index
    jmp decodeNextFeature           ;

; ***************************************************************************************
command254Rectangle
    inx                             ;
    ldy #0                          ; loop counter
-
    jsr readLevelDataByte           ; }
    sta $0071,y                     ; }
    inx                             ; } read four level bytes and store them in $71,$72,$73,$74
    iny                             ; }
    cpy #4                          ; }
    bne -                           ; }

    dex                             ;
    stx levelDataOffset             ;

    jsr drawRectangularFeature      ;
    jmp decodeNextFeature           ;

; ***************************************************************************************
drawRectangularFeature
    jsr commandDrawHorizontalStrip      ;
    inc $72                             ; increment y cell
    lda $72                             ;
    eor $74                             ;
    and #$1f                            ;
    bne drawRectangularFeature          ; if (not at limit) then branch (loop back)
    rts                                 ;

; ***************************************************************************************
drawLevel
    jsr drawSideWallsAndFloor           ;
    lda #$ff                            ;
    sta levelDataOffset                 ;
    lda #0                              ;
    sta currentLevelFeatureIndex        ;
    ; fall through...

; ***************************************************************************************
decodeNextFeature
    inc levelDataOffset                 ;
    ldx levelDataOffset                 ;
    jsr readLevelDataByte               ; read next byte of data
    cmp #$ff                            ;
    beq command255IncrementFeatureIndex ; if (255) then branch
    cmp #$fe                            ;
    beq command254Rectangle             ; if (254) then branch
    cmp #$fd                            ;
    beq command253SetType               ; if (253) then branch

    ; we have a level strip (3 bytes)
    ; decode into $71, $72, $73 (X, Y, length)
    ldy #0                              ;
    ldx levelDataOffset                 ;
-
    jsr readLevelDataByte               ;
    sta $0071,y                         ;
    iny                                 ; store next three bytes of level data into $71, $72, $73
    inx                                 ; these are X, Y, Length of a feature
    cpy #3                              ; (y_max value is unchanged)
    bne -                               ;
    dex                                 ;
    stx levelDataOffset                 ; remember incremented level data offset

    ; draw the strip
    jsr commandDrawHorizontalStrip      ;

    jmp decodeNextFeature               ;

; ***************************************************************************************
setColourAndDrawLevel14Platform
    lda currentLevelFeatureIndex        ;
    cmp #0                              ;
    bne setColourAndDrawPlatform        ;

    lda #1                              ; COLOUR 1
    jsr setTextColour                   ;

    lda #31                             ;
    jsr OSWRCH                          ;
    lda $71                             ;
    clc                                 ;
    adc #5                              ;
    jsr OSWRCH                          ; TAB($71 + 5, $72 + 1)
    lda $72                             ;
    clc                                 ;
    adc #1                              ;
    jsr OSWRCH                          ;

    lda #$80                            ;
    jsr OSWRCH                          ; [replace with cellPlot?]
    lda #$81                            ;
    jsr OSWRCH                          ; [replace with cellPlot?]

    rts                                 ;

; ***************************************************************************************
commandDrawHorizontalStrip
    lda currentLevel                    ;
    cmp #14                             ;
    beq setColourAndDrawLevel14Platform ;

setColourAndDrawPlatform
drawPlatform
    lda #31                             ;
    jsr OSWRCH                          ;

    lda $71                             ;
    clc                                 ;
    adc #5                              ;
    jsr OSWRCH                          ; TAB($71 + 5, $72 + 1)

    lda $72                             ;
    and #$1f                            ;
    clc                                 ;
    adc #1                              ;
    jsr OSWRCH                          ;

    lda $73                             ;
    and #$1f                            ;
    tay                                 ; Y is the width to draw
    lda $73                             ;
    asl                                 ;
    rol                                 ;
    rol                                 ;
    and #3                              ; extract foreground colour
    jsr setTextColour                   ;

    lda $72                             ;
    asl                                 ;
    rol                                 ;
    rol                                 ;
    and #3                              ; extract background colour
    clc                                 ;
    adc #$80                            ;
    jsr setTextColour                   ;

    ldx currentLevelFeatureIndex        ;
    lda levelFeatureArray,x             ;
-
    jsr OSWRCH                          ; [replace with cellPlot?]
    dey                                 ;
    bne -                               ;
    lda currentLevelFeatureIndex        ;
    cmp #3                              ;
    beq +                               ;

restoreBackgroundColour
    lda #128                            ;
    jsr setTextColour                   ;
    rts                                 ;

+
    lda currentLevel                    ;
    cmp #10                             ; level 10 specific feature
    beq +                               ;
    lda #$96                            ; Set to ladder sprite ('T')
    sta levelFeatureConveyorOrLadder    ;

+
    jsr restoreBackgroundColour         ;
    jmp drawFooterTextOrReturn          ;

; ***************************************************************************************
drawSideWallsAndFloor
    ; draw left edge wall
    lda #$ff                            ; }
    sta $71                             ; }
    lda sideWallColour2                 ; }
    lsr                                 ; }
    ror                                 ; }
    ror                                 ; } from (-1, 0), colour sideWallColour1
    sta $72                             ; }

    lda sideWallColour1                 ; }
    lsr                                 ; }
    ror                                 ; }
    ror                                 ; }
    clc                                 ; }
    adc #1                              ; }
    sta $73                             ; } width 1, colour sideWallColour2

    lda #16                             ; } to (-1, 16)
    sta $74                             ; }

    lda #2                              ; wall
    sta currentLevelFeatureIndex        ;
    jsr drawRectangularFeature          ; draw

    ; draw right edge wall
    lda #30                             ; }
    sta $71                             ; }
    lda sideWallColour2                 ; }
    lsr                                 ; }
    ror                                 ; }
    ror                                 ; } from (30, 0), colour sideWallColour1
    sta $72                             ; }

    lda sideWallColour1                 ; }
    lsr                                 ; }
    ror                                 ; }
    ror                                 ; }
    clc                                 ; }
    adc #1                              ; }
    sta $73                             ; } width 1,  colour sideWallColour2

    lda #16                             ; }
    sta $74                             ; } to (30, 16)
    jsr drawRectangularFeature          ; draw

    ; draw floor
    lda #0                              ;
    sta currentLevelFeatureIndex        ;
    lda #0                              ; }
    sta $71                             ; }
    lda #(0 * 64) + 15                  ; } at (0,15) background colour 0
    sta $72                             ; }

    lda #(1 * 64) + 30                  ; }
    sta $73                             ; } 30 is width, foreground colour 1
    jmp commandDrawHorizontalStrip      ;

; ***************************************************************************************
;
; called on vsync to update the audio
;
; ***************************************************************************************
mainInterruptRoutine
    txa                                 ; Remember X and Y registers
    pha                                 ;
    tya                                 ;
    pha                                 ;

    lda userVIAInterruptFlagRegister    ; What kind of interrupt?
    and #%11000000                      ; }
    cmp #%11000000                      ; } is it the User VIA Timer 1?
    beq +

    ; unknown interrupt - pass through
    pla                                 ; Restore X and Y registers
    tay                                 ;
    pla                                 ;
    tax                                 ;

    lda interruptAccumulator            ;
oldIrq1RoutineLow = * + 1
oldIrq1RoutineHigh = * + 2
    jmp $ffff                           ;

+
    lda #$40                            ; clear User VIA timer 1 interrupt
    sta userVIAInterruptFlagRegister    ;

;    lda rasterArea                      ;
;    jsr debugChangePalette              ;

    inc rasterArea                      ;
    lda rasterArea                      ;

    cmp #2                              ;
    beq updateAudio                     ;

    cmp #5                              ;
    beq changePalette                   ;
    cmp #6                              ;
    beq restorePalette                  ;

    cmp #13                             ;
    bne handledInterrupt                ;
    lda #0                              ;
    sta rasterArea                      ;
    beq handledInterrupt                ; ALWAYS branch

; ***************************************************************************************
changePalette
    LDX #footerPalette - startOfPalettes + 3    ; }
    JSR definePaletteAX                         ; } Set palette for header
    inc metronome                               ;
    jmp handledInterrupt                        ;

; ***************************************************************************************
restorePalette
    LDX #playAreaPalette - startOfPalettes + 3  ; } Set palette for play area
    JSR definePaletteAX                         ; }
    jmp handledInterrupt                        ;

; ***************************************************************************************
definePaletteAX
    ldy #3                                  ;
-
    lda startOfPalettes, X                  ;
    eor #7                                  ;
    ora paletteLookupTable,Y                ;
    sta videoULAPaletteRegister             ; store actual colour in register
    eor #$10                                ;
    sta videoULAPaletteRegister             ; store actual colour in register
    eor #$50                                ;
    sta videoULAPaletteRegister             ; store actual colour in register
    eor #$10                                ;
    sta videoULAPaletteRegister             ; store actual colour in register
    dex                                     ;
    dey                                     ;
    bpl -                                   ;
    rts                                     ;

; ***************************************************************************************
updateSpotSound
    ; update sound effects. Used for:
    ;
    ; (1) draining air at the end of the level and
    ; (2) when lowering the foot on game over
    ;
    lda channel2Frequency               ;
    cmp #$fe                            ;
    beq return17                        ;
    cmp #$ff                            ;
    beq silenceChannel2                 ;

    lda #$b1                            ;
    jsr soundDirect                     ; Set channel 2 almost maximum volume
    lda #$a0                            ;
    jsr soundDirect                     ; Set channel 2 frequency first byte
    lda channel2Frequency               ;
    jsr soundDirect                     ; Set channel 2 frequency second byte

    lda #$ff                            ;
    sta channel2Frequency               ; silence for next time
return17
    rts

silenceChannel2
    lda #$bf                            ;
    jsr soundDirect                     ; set zero volume on channel 2
    lda #$fe                            ;
    sta channel2Frequency               ;
    rts                                 ;

; ***************************************************************************************
updateAudio
    jsr updateMusic                     ;
    jsr updateSpotSound                 ;

handledInterrupt
    pla                                 ; Restore X and Y registers
    tay                                 ;
    pla                                 ;
    tax                                 ;
    lda interruptAccumulator            ;
    rti                                 ;

; ***************************************************************************************
updateMusic
updateMusicOpcode = *
    inc currentNoteTimePlayed       ; This first instruction MUST be an INC (this byte is modified elsewhere)
    lda currentNoteTimePlayed       ;
    cmp #10                         ;
    bcs updateChannel3              ; update channel 3
updateMusicVolume
    cmp #6                          ; }
    bcc +                           ; } decrease the volume more slowly after 6 ticks
    and #1                          ; }
    bne ++                          ; }
+
    inc volumeIndex                 ; }
++
    lda volumeIndex                 ;
    lsr                             ;
    clc                             ;
    adc #$93                        ;
    cmp #$9f                        ;
    bcc +                           ;
    lda #$9f                        ;
+
    jmp soundDirect                 ; set channel 3 volume

updateChannel3
    lda #0                          ;
    sta currentNoteTimePlayed       ;
    inc musicCounter                ;
    lda musicCounter                ;
    tax                             ;
    lda music,x                     ;
    cmp #$ff                        ;
    beq finishChannel3Notes         ; if (end of tune) then branch
    cmp previousNoteByte            ;
    beq updateMusicVolume           ; if (same as previous note) then branch
    sta previousNoteByte            ;
    ldx #4                          ;
    cmp #$80                        ;
    bcc +                           ;
    and #$7f                        ;
    ldx #2                          ;
+
    stx volumeIndex                 ;
    tax                             ;
    lda soundFrequenciesFirst,x     ;
    jsr soundDirect                 ; Channel 3 frequency
    lda soundFrequenciesSecond,x    ;
    jsr soundDirect                 ; Channel 3 frequency
    jmp updateMusicVolume           ;

finishChannel3Notes
    lda #$ff                        ;
    sta musicCounter                ; end channel 3 notes
    sta volumeIndex                 ;
    sta previousNoteByte            ;
    lda #200                        ;
    sta currentNoteTimePlayed       ;
+
    rts                             ;


quietChannel3
    lda #$9f                        ;
    jmp soundDirect                 ; set zero volume on channel 3


; ***************************************************************************************
; send a byte to the sound chip (as seen in the advanced user guide)
soundDirect
    php                             ; remember if interrupts are enabled
    sei                             ;
    pha                             ; remember A

    stx saveX                       ;
    sty saveY                       ;

    lda #151                        ;
    ldx #$43                        ; Data direction register A
    ldy #$ff                        ; Set all 8 bits as output
    jsr OSBYTE                      ; Write to SHEILA OSBYTE CALL

    ldx #$41                        ; Output register A
    pla                             ;
    tay                             ; Y holds byte to sound chip
    lda #151                        ; Write to SHEILA OSBYTE CALL
    jsr OSBYTE                      ; Output to slow data bus

    ldx #$40                        ; Output register B
    ldy #0                          ; Set sound chip write pin low
    jsr OSBYTE                      ;

    ldy #8                          ; Set sound chip write pin high
    jsr OSBYTE                      ;

    ldx saveX                       ;
    ldy saveY                       ;

    plp                             ; Restore interrupt enabled as needed
    rts                             ;

; ***************************************************************************************
titleScreenPalette
    !byte blue, red, green, white
titleScreenFooterPalette
    !byte blue, cyan, green, magenta

startOfPalettes
playAreaPalette
    !byte black, red, green, yellow
footerPalette
    !byte black, red, green, white

paletteLookupTable
    !byte $00, $20, $80, $A0


; ***************************************************************************************
playAttractLoop
    lda #1                          ;
    sta currentLevel                ; start attract loop on level 1 - Central Cavern

    lda #2                          ;
    sta lives                       ; start with 2 remaining lives (3 lives total)

    ; clear the score
    jsr zeroScore                   ;

attractLoop
    lda currentLevel                ;
    jsr showLevel                   ;
    lda #0                          ;
    sta attractModeTimer            ;
showALevelLoop
    jsr updateAirAndCheckExit       ;
    lda #0                          ;
    sta hasDrawnConveyors           ;
    jsr drawConveyor                ;
    jsr animateKeysUpdateHorizontalGuardiansAndLevel19EnergyFields   ;
    jsr updateVerticalGuardians     ;

    ; wait for tick
-
    lda metronome                   ;
    cmp #3                          ;
    bcc -                           ;
    lda #0                          ;
    sta metronome                   ;

    inc attractModeTimer            ;
    lda attractModeTimer            ;
    cmp #$40                        ;
    beq showNextLevel               ;

    ldx #keyCodeRETURN              ; }
    jsr isKeyPressed                ; } is RETURN pressed
    beq +                           ;

    jmp showALevelLoop              ;

+
    jmp startGame                   ;

showNextLevel
    inc currentLevel                ;
    lda currentLevel                ;
    cmp #21                         ;
    beq endOfAttractLoop            ;
    jmp attractLoop                 ;

endOfAttractLoop
    jmp showTitleScreen            ;

; ***************************************************************************************
checkCheatCode
    lda $ed                         ;
    cmp #0                          ;
    bne resetCheatProgress          ; if (two keys pressed) then branch (reset progress)
    lda $ec                         ; read key pressed
    and #$7f                        ; remove top bit set
    cmp #0                          ;
    beq return2                     ; if (nothing pressed) then branch (return)
    ldx cheatCodeCounter            ;
    cmp cheatCode,x                 ;
    beq incrementCheatCode          ; if (next key in code pressed) then branch
    dex                             ;
    cmp cheatCode,x                 ;
    beq return2                     ; if (current key in code still pressed) then branch (return)

resetCheatProgress
    lda #0                          ;
    sta cheatCodeCounter            ;
    rts                             ;

incrementCheatCode
    inc cheatCodeCounter            ;
    lda cheatCodeCounter            ;
    cmp #cheatCodeEnd - cheatCode   ;
    beq toggleCheatMode             ;
    rts                             ;

toggleCheatMode
    lda cheatModeEnabled            ;
    eor #1                          ;
    sta cheatModeEnabled            ;

    lda #$03                        ; }
    ldx #$64                        ; }
    ldy #$03                        ; } SOUND
    jmp playSoundAXY                ; }

return2
    rts                             ;

; ***************************************************************************************
updateJumpAndFallSounds
    lda isJumping                   ;
    cmp #1                          ;
    bne notInAir                    ; if (not in air) then branch
    lda jumpPhase                   ;
    cmp #1                          ;
    bne notInAir                    ;

    lda #$04                        ; }
    ldx #$64                        ; }
    ldy #$02                        ; } play jump sound
    jmp playSoundAXY                ; }

notInAir
    lda isJumping                   ;
    cmp #1                          ;
    beq return5                     ;
    lda willyIsOnGround             ;
    cmp #0                          ;
    bne return5                     ;

    lda #$ff                        ;
    sta oswordSoundBlock + 3        ;

    lda newPlayerPixelY             ; }
    sec                             ; }
    sbc playerHeightOnTakeOff       ; }
    eor #$7f                        ; } play descending falling sound
    tax                             ; }
    lda #$f1                        ; }
    ldy #1                          ; }
    jsr playSoundAXY                ; }

    lda #0                          ;
    sta oswordSoundBlock + 3        ;
return5
    rts                             ;

; ***************************************************************************************
printFollowingMessage
    pla                                     ;
    sta altScreenAddressLow                 ;
    pla                                     ;
    sta altScreenAddressHigh                ; Pull the return address off the stack
    ldy #1                                  ;
    lda (altScreenAddressLow), Y            ;
    tax                                     ;
-
    iny                                     ;
    lda (altScreenAddressLow), Y            ;
    jsr OSWRCH                              ;
    dex                                     ;
    bne -                                   ;
    tya                                     ;
    clc
    adc altScreenAddressLow                 ;
    sta altScreenAddressLow                 ;
    bcc +                                   ;
    inc altScreenAddressHigh                ;
+
    lda altScreenAddressHigh                ; Pushing the return address onto the stack
    pha                                     ; immediately after the data
    lda altScreenAddressLow                 ;
    pha                                     ;
    rts                                     ;


; ***************************************************************************************
showTitleScreen
    jsr setBlackPalette             ;
    jsr clearScreen                 ;
    jsr zeroScore                   ;

    lda #3                          ;
    jsr setTextColour               ;

    jsr pauseMusic                  ;

    ; Show credits
    ldx #0                          ; loop counter
-
    lda creditsMessage,x            ;
    jsr OSWRCH                      ;
    inx                             ;
    cpx #creditsMessageEnd - creditsMessage ;
    bne -                           ;

    ; swap in the flowery logo
    jsr swapLogoWithC00             ;

    ; draw the flowery logo
    ldx #$80                        ; loop counter (and character to print)
-
    txa                             ;
    jsr OSWRCH                      ;
    inx                             ;
    cpx #$91                        ;
    bne -                           ;

    ; swap out the flowery logo
    jsr swapLogoWithC00             ;

    jsr printFollowingMessage       ;
    !byte highScorePositionMessageEnd - highScorePositionMessage
highScorePositionMessage
    !byte 5
    !byte 18, 0, 3                  ; GCOL
    !byte 25, 4                     ;
    !word 368 + 11 * 32, 390        ;
highScorePositionMessageEnd

    ; print three pairs of numbers for the high score
    ldx #2                          ;
-
    lda highScore,x                 ;
    jsr printBCDNumber              ;
    dex                             ;
    bpl -                           ;

    ; finish up (return to regular VDU 4 mode)
    jsr setVdu4CursorOff            ;

    ; plot triangle logo
    ldx #$ff                        ;
plotLoop
    jsr getNextPenroseByte          ;
    cmp #$ff                        ;
    beq finishPlot                  ;
    cmp #$fe                        ;
    beq gcol                        ;
    sta plotType                    ; PLOT type
    lda #0                          ;
    sta plotXHigh                   ;
    sta plotYHigh                   ;
    jsr getNextPenroseByte          ; Y coordinate low (top 2 bits) and X low (top two bits)
    asl                             ;
    rol plotXHigh                   ;
    asl                             ;
    rol plotXHigh                   ;
    sta plotXLow                    ;
    jsr getNextPenroseByte          ;
    asl                             ;
    rol plotYHigh                   ;
    asl                             ;
    rol plotYHigh                   ;
    sta plotYLow                    ;

    ; PLOT
    ldy #0                          ; loop counter
-
    lda plotMessageStart,y          ;
    jsr OSWRCH                      ;
    iny                             ;
    cpy #plotMessageEnd - plotMessageStart  ;
    bne -                           ;
    jmp plotLoop                    ;

; ***************************************************************************************
finishPlot
    lda #128                        ;
    jsr setTextColour               ;

    jmp showTitleScreenMessageAndWaitForRETURN  ;

; ***************************************************************************************
gcol
    lda #18                         ;
    jsr OSWRCH                      ;
    lda #0                          ; GCOL 0,next byte
    jsr OSWRCH                      ;
    jsr getNextPenroseByte          ;
    jsr OSWRCH                      ;
    jmp plotLoop                    ;

; ***************************************************************************************
getNextPenroseByte
    inx                             ;
    lda penroseTriangle,x           ;
    rts                             ;

; ***************************************************************************************
swapLogoWithC00
    ldx #0                          ; loop counter
-
    lda manicMinerGraphic,x         ;
    tay                             ;
    lda softCharacterDefinitions,x  ;
    sta manicMinerGraphic,x         ;
    tya                             ; swap logo with current character defintions
    sta softCharacterDefinitions,x  ;
    inx                             ;
    bne -                           ;

    ; For the Master, define the graphics officially
    jsr defineMasterCharacters      ;

    rts                             ;

; ***************************************************************************************
zeroScore
    ; clear the score (6 digits in 3 BCD bytes)
    lda #0                          ;
    ldx #2                          ;
-
    sta score,x                     ;
    dex                             ;
    bpl -                           ;
    rts                             ;

; ***************************************************************************************
getLevelDataByte
    lda $2a28                           ; [address is overwritten before use]
    rts                                 ;

; ***************************************************************************************
level18Thing
    jsr drawFooterTextOrReturn          ;
    jmp afterLevel18Thing               ;

; ***************************************************************************************
decodeSingleItemData
    lda #0                                  ;
    sta keyPositionCounter                  ;
    lda #>(levelSingleItemDefinitions - 1)  ;
    sta getLevelDataByte + 2                ;
    lda currentLevel                        ;
    cmp #18                                 ;
    beq level18Thing                        ;
afterLevel18Thing
    lda #0                                  ;
    sta decodeLevelByte                     ;
    lda #<(levelSingleItemDefinitions - 1)  ;
    sta getLevelDataByte + 1                ;

skipToTerminator
    jsr incrementLevelDataPointer       ;
    jsr getLevelDataByte                ;
    cmp #$ff                            ; level separator
    beq +                               ;
    jmp skipToTerminator                ;
+
    inc decodeLevelByte                 ; increment level counter
    lda decodeLevelByte                 ;
    cmp currentLevel                    ;
    bne skipToTerminator                ; if (not current room) then branch back (find next level separator)

    jsr incrementLevelDataPointer       ;
    jsr getLevelDataByte                ;
    sta singleItemType                  ;
    lda singleItemType                  ;
    and #$3f                            ;
    sta singleItemSpriteOffset          ; singleItemSpriteOffset = bottom 6 bits
    lda singleItemType                  ;
    and #$c0                            ;
    clc                                 ;
    rol                                 ;
    rol                                 ;
    rol                                 ;
    sta singleItemType                  ;
    inc singleItemType                  ; singleItemType = (top two bits / 64) + 1
    lda #$90                            ;
    sta singleItemSprite                ; singleItemSprite = $f0
    jsr setSingleOffsetX5               ; singleItemOffsetX = 5, type++

    lda #255                            ;
    sta newSingleItemColour             ;
    ldx #0                              ;
    jmp decodeNextSingleItem            ;

; ***************************************************************************************
drawExtraSpikes
    lda currentLevel                    ;
    cmp #8                              ; }
    beq drawSpecialSpikes               ; } special thinner spikes on
    cmp #12                             ; } the ceiling of levels 8 and 12
    beq drawSpecialSpikes               ; }
    ldx #0                              ; swap characters back
    jmp swapPagesC00andSingleItemPage   ;

; ***************************************************************************************
drawSpecialSpikes
    lda #2                              ; COLOUR 2
    jsr setTextColour                   ;

    lda #31                             ; }
    jsr OSWRCH                          ; }
    lda #6                              ; }
    jsr OSWRCH                          ; } TAB(6,1)
    lda #1                              ; }
    jsr OSWRCH                          ; }

    lda #$8c                            ; } [replace with cellPlot?]
    jsr OSWRCH                          ; } VDU &EC (spike)

    lda #9                              ;
    ldx #0                              ; loop counter
-
    inx                                 ;
    jsr OSWRCH                          ; output seven forward spaces
    cpx #7                              ;
    bne -                               ;

    lda #$8c                            ; }
    jsr OSWRCH                          ; } VDU &EC (second spike)

    ldx #0                              ; swap characters back
    jmp swapPagesC00andSingleItemPage   ;

; ***************************************************************************************
setSingleItemOffset15Command
    jsr setSingleItemOffset15           ;
    jmp decodeNextSingleItem            ;

; ***************************************************************************************
setSingleItemNextTypeCommand
    jsr setSingleOffsetX5               ;
    lda singleItemSprite                ;
    sec                                 ;
    adc singleItemSpriteOffset          ; add 1 + sprite offset to current sprite
    sta singleItemSprite                ;
    jmp decodeNextSingleItem            ;

; ***************************************************************************************
setSingleItemColourCommand
    clc                                 ;
    adc #7                              ;
    sta newSingleItemColour             ;
    jsr setTextColour                   ;
    jmp decodeNextSingleItem            ;

; ***************************************************************************************
toggleAlternativeSingleItemSprite
    jsr setSingleOffsetX5               ; X offset 5, type++
    ldx #0                              ;
    jsr swapPagesC00andSingleItemPage   ; swap pages
    lda #$8b                            ; regular single item character code
    sta singleItemSprite                ;
    jmp decodeNextSingleItem            ;

; ***************************************************************************************
decodeNextSingleItem
    jsr incrementLevelDataPointer       ;
    jsr getLevelDataByte                ;
    sta decodeLevelByte                 ;
    cmp #$ff                            ;
    beq drawExtraSpikes                 ; if (command 255) then branch (we are finished
                                        ; with this loop. Finally we draw the special
                                        ; spikes for level 8 and 12).
    cmp #$fe                            ;
    beq setSingleItemOffset15Command    ; if (command 254) then set X offset to 15
    cmp #$fd                            ;
    beq setSingleItemNextTypeCommand    ; if (command 253) then type += offset; set X offset to 5
    cmp #$fa                            ;
    bcs setSingleItemColourCommand      ; if (command 250) then set colour 'command - 249'

    dec singleItemType                  ;

    lda decodeLevelByte                 ;
    and #$f0                            ; top nybble contains the X position
    clc                                 ;
    ror                                 ;
    ror                                 ;
    ror                                 ;
    ror                                 ;
    sta singleItemX                     ;
    lda decodeLevelByte                 ;
    and #$0f                            ; bottom nybble contains the Y position
    sta singleItemY                     ;

    lda #31                             ; TAB
    jsr OSWRCH                          ;

    lda singleItemX                     ;
    clc                                 ;
    adc singleItemOffsetX               ;
    jsr OSWRCH                          ; X pos

    lda singleItemY                     ;
    clc                                 ;
    adc #1                              ;
    jsr OSWRCH                          ; Y pos

    lda singleItemSprite                ;
    cmp #$8e                            ;
    beq drawSpiderAndThread             ; if (spider sprite) then branch
    cmp #$98                            ;
    beq drawSpiderAndThread             ; if (spider sprite) then branch
    cmp #$90                            ;
    beq handleKey                       ; if (key) then branch
    cmp #$8b                            ;
    bne handleSpike                     ; if (spike) then branch
drawSingleItem
    lda singleItemSprite                    ;
    jsr OSWRCH                              ; [replace with cellPlot?]
    lda singleItemType                      ;
    cmp #$ff                                ;
    beq toggleAlternativeSingleItemSprite   ;
    jmp decodeNextSingleItem                ;

; ***************************************************************************************
handleKey
    lda #3                              ; COLOUR 3
    jsr setTextColour                   ;
    jsr recordKey                       ;
    rts                                 ;

; ***************************************************************************************
handleSpike
    lda newSingleItemColour         ;
    bpl +                           ;
    lda #1                          ; COLOUR 1
+
    jsr setTextColour               ;
    jmp drawSingleItem              ;

; ***************************************************************************************
setSingleItemOffset15
    lda #$15                        ;
    sta singleItemOffsetX           ;
    rts                             ;

; ***************************************************************************************
setSingleOffsetX5
    lda #5                          ;
    sta singleItemOffsetX           ;
    rts                             ;

; ***************************************************************************************
swapPagesC00andSingleItemPage
    lda softCharacterDefinitions,x      ;
    tay                                 ;
    lda startOfSingleItemPage,x         ;
    sta softCharacterDefinitions,x      ;
    tya                                 ;
    sta startOfSingleItemPage,x         ;
    inx                                 ;
    cpx #$ff                            ;
    bne swapPagesC00andSingleItemPage   ;
    jsr defineMasterCharacters          ;
    rts                                 ;

; ***************************************************************************************
incrementLevelDataPointer
    inc getLevelDataByte + 1        ;
    bne +                           ;
    inc getLevelDataByte + 2        ;
+
    rts                             ;

; ***************************************************************************************
drawSpiderAndThread
    jsr incrementLevelDataPointer   ;
    jsr getLevelDataByte            ;
    sta decodeLevelByte             ;

    lda newSingleItemColour         ;
    bpl +                           ;
    lda #2                          ; COLOUR 2
+
    jsr setTextColour               ;

    ; draw line of vertical thread
    ldx #0                          ; loop counter
threadLoop
    cpx decodeLevelByte             ;
    beq drawSpider                  ; if (length of thread reached) then branch

    lda #$95                        ; draw vertical thread
    jsr OSWRCH                      ; [replace with cellPlot?]
    lda #$0a                        ; move down one character
    jsr OSWRCH                      ; [replace with cellPlot?]
    lda #$08                        ;
    jsr OSWRCH                      ; and back one character [replace with cellPlot?]
    inx                             ;
    jmp threadLoop                  ;

; ***************************************************************************************
drawSpider
    lda singleItemSprite            ; spider at end of thread
    jsr OSWRCH                      ; [replace with cellPlot?]
    jmp decodeNextSingleItem        ;

; ***************************************************************************************
recordKey
    lda keyPositionCounter          ;
    cmp #5                          ; only store five keys (don't go beyond the end of the buffer)
    bcc +                           ;
    jmp drawSingleItem              ;

+
    lda singleItemX                 ;
    clc                             ;
    adc singleItemOffsetX           ;
    ldy keyPositionCounter          ;
    sta keyXPositions,y             ; store key position x
    lda singleItemY                 ;
    clc                             ;
    adc #1                          ;
    sta keyYPositions,y             ; store key position y
    inc keyPositionCounter          ;
    jmp drawSingleItem              ;

; ***************************************************************************************
colourCycleKeys
    ldx currentKeyIndex             ; }
    inx                             ; }
    cpx #5                          ; } cycle between zero and the number of keys
    bcc +                           ; }
    ldx #0                          ; }
+
    stx currentKeyIndex             ; }

    ; cycle around colours 0,1,2
    inc keyColourCounter            ;
    lda keyColourCounter            ;
    cmp #3                          ;
    bcc +                           ;
    lda #0                          ;
    sta keyColourCounter            ;
+

    lda currentKeyIndex             ;
    cmp keyPositionCounter          ;
    bcs return12                    ;

    lda keyGot,x                    ;
    bne return12                    ; if (got) then skip animating

    ; tab into to position
    lda keyXPositions,x             ;
    sta cursorX                     ;
    lda keyYPositions,x             ;
    sta cursorY                     ;

    ldx keyColourCounter            ;
    lda guardianColourMasks,x       ;
    sta plotColourMask              ;

    jsr setCursorScreenAddress          ;

    lda #<currentKeySprite              ;
    sta cellPlotSourceSpriteAddressLow  ;
    lda #>currentKeySprite              ;
    sta cellPlotSourceSpriteAddressHigh ;
    jmp cellPlot                        ;

; ***************************************************************************************
setVdu4CursorOff
    ldx #0                          ;
-
    lda vdu4CursorOff,x             ;
    jsr OSWRCH                      ;
    inx                             ;
    cpx #vdu4CursorOffEnd - vdu4CursorOff   ;
    bne -                           ;
    rts                             ;

; ***************************************************************************************
readRoomNameCharacter
    lda $ffff,x                     ;
return12
    rts                             ;

drawRoomName
    lda #<levelTitles               ;
    sta readRoomNameCharacter + 1   ;
    lda #>levelTitles               ;
    sta readRoomNameCharacter + 2   ;
    lda #0                          ;
    sta roomNumberReached           ;

    ; scan for next control character
    ldx #0                          ; loop counter
scanForControl
    jsr readRoomNameCharacter       ;
    cmp #charSPACE                  ;
    bcc foundControlCharacter       ;
-
    inx                             ;
    cpx #0                          ;
    bne scanForControl              ;
    inc readRoomNameCharacter + 2   ;
    jmp scanForControl              ;

foundControlCharacter
    inc roomNumberReached           ; }
    lda currentLevel                ; }
    cmp roomNumberReached           ; }
    bne -                           ; } if (room not reached) then branch back

    stx tempX                       ;

    ; calculate the correct position
    lda #0
    sta titleTextStartXHigh         ;
    ldx tempX                       ;
    jsr readRoomNameCharacter       ; get cell X to draw room title
    clc                             ;
    adc #4                          ;
    ldx #4                          ;
-
    asl                             ; }
    rol titleTextStartXHigh         ; } x32
    dex                             ; }
    bpl -                           ; }
    sta titleTextStartXLow          ;

    ; draw the background an move into position
    ldx #0
drawRoomTitleBackgroundLoop
    lda roomTitleBackground, x      ;
    jsr OSWRCH                      ;
    inx                             ;
    cpx #roomTitleBackgroundEnd - roomTitleBackground   ;
    bne drawRoomTitleBackgroundLoop ;

    ; print the room title
    ldx tempX                       ;
-
    inx                             ;
    jsr readRoomNameCharacter       ; read next character
    cmp #charSPACE                  ;
    bcc +                           ; if (control character) then branch
    jsr OSWRCH                      ;
    jmp -
+

    ; finish up (return to regular VDU 4 mode)
    jsr setVdu4CursorOff            ;

    ; clear colours just in case?
    lda #128                        ; COLOUR 128
    jsr setTextColour               ;
    lda #3                          ; COLOUR 3
    jmp setTextColour               ;

copySpikeSprites
    ldx #0                          ; loop counter
-
    lda spikePlant,x                ;
    sta currentSpikeSprite,x        ; copy spike plant sprite to current spike sprite
    inx                             ;
    cpx #8                          ;
    bne -                           ;

    lda singleItemSpriteOffset      ;
    asl                             ;
    asl                             ;
    asl                             ;
    tax                             ;

    ldy #0                          ; loop counter
-
    lda allOtherSpikes,x            ;
    sta currentSpikeSprite2,y       ; copy spike from allOtherSpikes+(8*singleItemSpriteOffset) to currentSpikeSprite2
    inx                             ;
    iny                             ;
    cpy #8                          ;
    bne -                           ;

    ; clear array of 'key got' flags
    ldx #4                          ;
    lda #0                          ;
-
    sta keyGot,x                    ;
    dex                             ;
    bpl -                           ;


    lda keyPositionCounter          ;
    cmp #2                          ;
    beq +                           ; special case for handling one key only
    sta keysLeft                    ;
    rts                             ;

+
    lda #1                          ;
    sta keysLeft                    ;
    rts                             ;

readOrWriteByte
readOrWriteAddrLow = readOrWriteByte + 1
readOrWriteAddrHigh = readOrWriteByte + 2
    lda $ffff,x                     ;
    rts                             ;

; ***************************************************************************************

startGame
    lda #1                                  ; set level 1 - Central Cavern
    jsr showLevel                           ;
    jsr updateMusicState                    ; pause / resume music
    lda #0                                  ;
    sta metronome                           ;

playCurrentLevel
    lda #0                                  ;
    sta hasDrawnConveyors                   ;

    lda tempScreenAddressLow                ; }
    sta plotScreenAddressLow                ; } restore screen plotting address
    lda tempScreenAddressHigh               ; }
    sta plotScreenAddressHigh               ; }

    jsr updatePlayer                        ;

    lda plotScreenAddressLow                ; }
    sta tempScreenAddressLow                ; } save screen plotting address
    lda plotScreenAddressHigh               ; }
    sta tempScreenAddressHigh               ; }

    jsr animateKeysUpdateHorizontalGuardiansAndLevel19EnergyFields  ;
    jsr updateVerticalGuardians                                     ;
    jsr checkForCollisions                                          ;
    jsr updateJumpAndFallSounds                                     ;

    ; wait for tick
-
    lda metronome                           ;
    cmp #3                                  ;
    bcc -                                   ;
    lda #0                                  ;
    sta metronome                           ;

    ; read special keys (for sound on/off, pause, quit)
    ldx #keyCodeDELETE                      ;
    jsr isKeyPressed                        ; is DELETE pressed
    beq freezeGame                          ;

    ldx #keyCodeESCAPE                      ;
    jsr isKeyPressed                        ; is ESCAPE pressed
    beq endGame                             ;

    ldx #keyCodeS                           ;
    jsr isKeyPressed                        ; is S pressed
    beq musicOn                             ;

    ldx #keyCodeQ                           ;
    jsr isKeyPressed                        ; is Q pressed
    beq musicOff                            ;

    ; check for cheat mode enabled
checkForFunctionKeys
    lda cheatModeEnabled                    ;
    cmp #0                                  ;
    beq +                                   ; if (cheat mode not enabled) then branch

    ; read function keys
    lda #0                                  ;
    sta keyCounter                          ; zero loop counter
readKeysLoop
    ldx keyCounter                          ;
    lda keysToRead,x                        ; get key to read
    tax                                     ;
    jsr isKeyPressed                        ;
    beq functionKeyPressed                  ; if (function key pressed) then branch

    inc keyCounter                          ; increment counter
    lda keyCounter                          ;
    cmp #keysToReadEnd - keysToRead         ;
    bne readKeysLoop                        ;
+
    jmp playCurrentLevel                    ;

freezeGame
    jsr pauseMusic                          ;
waitForCOPYKey
    jsr checkCheatCode                      ;

    ldx #keyCodeCOPY                        ;
    jsr isKeyPressed                        ; is COPY pressed
    bne waitForCOPYKey                      ;

    jsr updateMusicState                    ;
    jmp playCurrentLevel                    ;

endGame
    jmp showTitleScreen                     ;

musicOff
    lda #0                                  ;
    sta musicEnabled                        ;
    jsr pauseMusic                          ;
    jmp checkForFunctionKeys                ;

musicOn
    lda #255                                ;
    sta musicEnabled                        ;
    jsr resumeMusic                         ;
    jmp checkForFunctionKeys                ;

showLevel
    jsr storeLevelNumber                    ; store level number
    lda #5                                  ;
    sta keysLeft                            ;

    lda #2                                  ; COLOUR 2
    jsr setTextColour                       ;

    lda #0                                  ;
    sta flashingExitCounter                 ;

    lda currentLevel                        ;
    jsr initLevel                           ;
    jsr copyGuardianSprites                 ;
    jsr resetLevel19Meteors                 ;
    jmp initializeLevelSprites              ;

resumeMusic
    lda #$e6                                ; opcode for 'INC zp'
    sta updateMusicOpcode                   ; store INC opcode in the code that updates music
    rts                                     ;

pauseMusic
    lda #$60                                ; opcode for 'RTS'
    sta updateMusicOpcode                   ; store RTS opcode in the code that updates music
    lda #$9f                                ;
    jmp soundDirect                         ; silence sound channel 3

updateMusicState
    lda #$ff                                ;
    sta musicCounter                        ;
    sta previousNoteByte                    ;
    lda #200                                ;
    sta currentNoteTimePlayed               ;
    lda musicEnabled                        ;
    beq pauseMusic                          ;
    jmp resumeMusic                         ;

functionKeyPressed
    ldx #keyCodeSHIFT                       ;
    jsr isKeyPressed                        ; is SHIFT pressed
    beq shiftPressed                        ;

afterShiftHandled
    lda keyCounter                          ;
    cmp zeroBasedLevel                      ;
    beq +                                   ;
    sta zeroBasedLevel                      ;
    clc                                     ;
    adc #1                                  ;
    jsr showLevel                           ; change level
+
    jmp playCurrentLevel                    ;

shiftPressed
    lda keyCounter                          ;
    clc                                     ;
    adc #$0a                                ;
    sta keyCounter                          ; add 10 to the key counter
    jmp afterShiftHandled                   ;

; ***************************************************************************************
;
; On Entry:
;   A = current level (1 based)
;
; ***************************************************************************************
storeLevelNumber
    sta currentLevel                    ;
    sta zeroBasedLevel                  ;
    dec zeroBasedLevel                  ; make the level zero based

    lda cheatModeEnabled                ;
    cmp #0                              ;
    beq .return1                        ;

    lda currentLevel                    ;
    cmp #21                             ;
    bcc .return1                        ; if (current level < 21)
    lda #1                              ; set level 1 - Central Cavern
    sta currentLevel                    ;
    lda #0                              ; zero based level number is zero
.return1
    rts                                 ;

; ***************************************************************************************
initializeLevelSprites
    ldx #0                              ;
-
    lda currentFloorSprites,x           ;
    sta currentFloorSpriteCopy,x        ;       copy eight bytes of floor

    lda currentWallSprite,x             ;
    sta currentWallSpriteCopy,x         ;       copy eight bytes of wall

    lda currentFloorSprites + 8,x       ;
    sta currentSecondFloorSpriteCopy,x  ;       copy eight bytes of second floor

    inx                                 ;
    cpx #8                              ;
    bne -                               ;

    ; punch out one line
    lda #0                                  ;
    sta currentFloorSpriteCopy + 6          ;
    sta currentWallSpriteCopy + 6           ;
    sta currentSecondFloorSpriteCopy + 6    ;

    ; fill in another line
    lda #$ff                                ;
    sta currentFloorSpriteCopy + 7          ;
    sta currentWallSpriteCopy + 7           ;
    sta currentSecondFloorSpriteCopy + 7    ;

    lda #$4c                        ; }
    sta doWeMoveEugeneOpcode        ; } store opcode for 'JMP abs'

    lda #$f0                        ;
    sta eugeneColourMask            ;

    lda #16                         ;
    sta kongYCoordinate             ;

    ; draw regular Kong
    lda #$a9                        ; opcode for 'LDA #'
    sta drawRegularKong             ;

    lda #0                          ;
    sta kongBeastSwitchTriggered    ;
    sta isJumping                   ;

    lda #$27                        ;
    sta willySpriteAddressLow       ;

    lda #>willyLeft0                ; }
    sta willyGraphicsPage           ; } look left

    ; set player start position
    ldx currentLevel                ;
    lda playerStartXPositions - 1,x ;
    sta playerPixelX                ;
    sta newPlayerPixelX             ;
    lda playerStartYPositions - 1,x ;
    sta playerPixelY                ; playerPixelY = (lower nybble * 8)
    sta newPlayerPixelY             ;
    sta willyHighestPointReachedOnCurrentJump ;

    ldx playerPixelX                ; if (start X < 64) then look right at start
    cpx #64                         ;
    bcc lookRight                   ;
    lda #3                          ; look left
afterLooking
    sta willyAnimationEOR           ;
    ldy playerPixelY                ;
    lda #1                          ; read from screen, write to cache
    jsr readOrWriteCachedBackground ;
    lda willyGraphicsPage           ;
    sta willySpriteAddressHigh      ;

    jmp copySpikeSprites            ;

lookRight
    lda #$e7                        ;
    sta willySpriteAddressLow       ;
    lda #>willyRight0               ; }
    sta willyGraphicsPage           ; } look right
    lda #0                          ; }
    jmp afterLooking                ; }

; ***************************************************************************************
gotoNextLevel
    lda cheatModeEnabled            ;
    cmp #1                          ;
    beq +                           ; if (cheat mode enabled) then branch (reset same level)
    lda currentLevel                ;
    cmp #20                         ;
    beq startGameJumper2            ; if (current level is the last) then branch (start a new game)
    inc currentLevel                ;
+
    lda currentLevel                ;
    jsr showLevel                   ;
    jmp playCurrentLevel            ;

startGameJumper2
    jmp startGame                   ;

updateAirAndCheckExit
    jsr updateAir                   ;
    lda keysLeft                    ;
    beq checkExit                   ;
    rts                             ;

; ***************************************************************************************
moveCursorToBackgroundCache
    lda #34                         ;
    sta cursorX                     ;
    lda #31                         ; TAB(34, 31)
    sta cursorY                     ;
    rts                             ;

; ***************************************************************************************
checkExit
    jsr moveCursorToBackgroundCache ;

    jsr readTwoCharactersFromScreen ;
    lda currentLevel                ;
    cmp #5                          ;
    bne +                           ;

    ; level 5 - Eugene's Lair specific code
    lda eugenePositionY             ;
    ora #$80                        ; set top bit (ensure moving down)
    sta eugenePositionY             ;

    lda #$60                        ; store opcode for 'RTS'
    sta doWeMoveEugeneOpcode        ;

    jsr updateEugeneFalling         ;
+
    lda newPlayerPixelX             ;
    lsr                             ;
    lsr                             ;
    cmp exitPositionX               ;
    bne notAtExit                   ;

    lda newPlayerPixelY             ;
    lsr                             ;
    lsr                             ;
    lsr                             ;
    clc                             ;
    adc #2                          ;
    cmp exitPositionY               ;
    bne notAtExit                   ;
    jmp reachedExit                 ;

notAtExit
    lda currentLevel                ;
    cmp #6                          ;
    bne updateFlashingExit          ;

    ; special code to handle level 6 - Processing Plant flashing exit
    lda playerPixelX                ;
    cmp #130                        ;
    bne updateFlashingExit          ;

    lda playerPixelY                ;
    cmp #13                         ;
    bne updateFlashingExit          ;
    jmp reachedExit                 ;

updateFlashingExit
    inc flashingExitCounter         ;
    lda flashingExitCounter         ;
    and #3                          ;
    cmp #0                          ;
    beq flashExit                   ;
    rts                             ;

flashExit
    lda flashingExitCounter         ;
    and #4                          ;
    cmp #4                          ;
    beq +                           ;
    lda exitColour                  ; plot colour for exit
    jmp setColourAndShowExit
+
    lda exitColour                  ;
    eor #$ff                        ; 'invert' exit colour
    bne setColourAndShowExit        ; make sure it's not colour zero
    lda #$0f                        ; plot colour 1 instead
setColourAndShowExit
    sta plotColourMask              ;

    lda exitPositionX               ;
    sta cursorX                     ;
    lda exitPositionY               ;
    sec                             ; TAB(exitX, exitY-2)
    sbc #2                          ;
    sta cursorY                     ;

    lda #<currentExitSprite             ;
    sta cellPlotSourceSpriteAddressLow  ;
    lda #>currentExitSprite             ; use exit sprite
    sta cellPlotSourceSpriteAddressHigh ;

    jsr drawExitCell                ; top left
    inc cursorX                     ;
    jsr drawExitCell                ; top right
    inc cursorY                     ;
    dec cursorX                     ;
    jsr drawExitCell                ; bottom left
    inc cursorX                     ;
    jsr drawExitCell                ; bottom right

    rts                             ;

; ***************************************************************************************
drawExitCell
    jsr setCursorScreenAddress          ;
    jsr cellPlot                        ;
    lda cellPlotSourceSpriteAddressLow  ;
    clc                                 ;
    adc #16                             ;
    sta cellPlotSourceSpriteAddressLow  ;
    bcc +                               ;
    inc cellPlotSourceSpriteAddressHigh ;
+
    rts                                 ;

; ***************************************************************************************
reachedExit
    lda #$4c                        ;
    sta opcodeForJsrPlot            ; set opcode 'JMP abs'
    jsr updatePlayerWithAnimation   ;
    lda #$20                        ;
    sta opcodeForJsrPlot            ; set opcode 'JSR abs'
    jsr pauseMusic                  ;
    lda #0                          ;
    sta keyCounter                  ;

    lda playAreaPalette + 1         ;
    sta playAreaPalette + 2         ;
    sta playAreaPalette + 3         ;
drainAirRemaining
    lda airRemaining                ;
    lsr                             ;
    lsr                             ;
    eor #$ff                        ;
    and #$3f                        ;
    sta channel2Frequency           ; update sound
    jsr updateAir                   ;
    jsr updateAir                   ;
    inc keyCounter                  ;
    lda keyCounter                  ;
    and #3                          ;
    cmp #0                          ;
    beq addScoreAsAirDrains         ;
continueDrainingAir
    lda airRemaining                ;
    cmp #0                          ;
    bne drainAirRemaining           ;
    lda #255                        ;
    sta channel2Frequency           ; stop sound
    jsr updateMusicState            ;
    jmp gotoNextLevel               ;

addScoreAsAirDrains
    lda #1                          ;
    jsr addToScore                  ; add 2 to score
    jmp continueDrainingAir         ;

; ***************************************************************************************
drawInitialAirMeter
    lda #224                        ;
    sta airRemaining                ;
    lda #0                          ;
    sta airRemainingOffsetWithinCell;

    lda #3                          ; COLOUR 3
    jsr setTextColour               ;

    jsr showScoreAndResetVerticalGuardians  ;
    jsr decodeSingleItemData                ;

    ; show 'AIR' message
    ldx #0                          ; loop counter
-
    lda airMessage,x                ;
    jsr OSWRCH                      ;
    inx                             ;
    cpx #airMessageEnd - airMessage ;
    bne -                           ;

    rts                             ;

; ***************************************************************************************
storeByteY
    sta $ffff,y                     ;
    rts                             ;

; ***************************************************************************************
updateAir
    lda kongBeastSwitchTriggered    ;
    beq +                           ;
    jsr updateKongFalling           ;
+
    inc airRemainingDelayCounter    ;
    lda airRemainingDelayCounter    ;
    and #$07                        ;
    cmp #0                          ;
!ifndef debugPixelCollision {
    beq loseAir                     ;
}
    rts                             ;

airStartAddress = $5d86

; ***************************************************************************************
loseAir
    lda airRemaining                    ;
    beq return14                        ;
    dec airRemaining                    ;

    ; draw a single vertical line to remove air from bar
    lda #0                              ;
    sta airScreenAddressHigh            ;
    lda airRemaining                    ; }
    and #$fc                            ; } cell X

    asl                                 ; }
    rol airScreenAddressHigh            ; }
    clc                                 ; }
    adc #<airStartAddress               ; }
    sta airScreenAddressLow             ; } start + cellX
    lda #>airStartAddress               ; }
    adc airScreenAddressHigh            ; }
    sta airScreenAddressHigh            ; }

    lda airRemaining                    ;
    and #3                              ; X offset within cell
    tax                                 ;

    lda airRemaining                    ;
    cmp #48                             ;
    bcc redAir                          ;
    lda byteMaskGreen, x                ;
    jmp writeAir                        ;
redAir
    lda byteMaskRed, x                  ;

    ; write the first two pixel rows
writeAir
    sta byteToWrite                     ;
    ldy #0                              ;
    sta (airScreenAddressLow),y         ;
    iny                                 ;
    sta (airScreenAddressLow),y         ;

    ; move to next character row
    lda airScreenAddressLow             ;
    clc                                 ;
    adc #$80 - 6                        ;
    sta airScreenAddressLow             ;
    lda airScreenAddressHigh            ;
    adc #2                              ;
    sta airScreenAddressHigh            ;

    lda byteToWrite                     ;

    ; write last three pixel rows
    ldy #0                              ;
-
    sta (airScreenAddressLow),y         ;
    iny                                 ;
    cpy #3                              ;
    bne -                               ;

return14
    rts                                 ;

; ***************************************************************************************
lowerKong
    lda kongYCoordinate             ;
    clc                             ;
    adc #4                          ; lower kong
    sta kongYCoordinate             ;
    rts                             ;

; ***************************************************************************************
updateKongFalling
    jsr getKongVisibleStateIntoX    ; X= 0 (visible) or 1 (invisible)
    lda kongYCoordinate             ;
    cmp #112                        ;
    bcs resetKongTriggered          ; if (kongY >= 112) then branch (reset trigger)
    cmp #16                         ;
    beq startLoweringKong           ; if (kongY == 16) then branch
    and #4                          ;
    cmp #4                          ;
    beq fourFramesInEveryEight      ;
    jsr drawKongState1              ; draw or erase Kong

    jsr lowerKong                   ;

    ldx #0                          ;
    jsr drawKongState2              ;
    jmp setColour2AndShowExit       ;

; ***************************************************************************************
fourFramesInEveryEight
    jsr drawKongState2              ; draw or erase Kong

    jsr lowerKong                   ; move to new position

    ldx #0                          ;
    jsr drawKongState1              ; draw Kong in new position
    jmp setColour2AndShowExit       ;

; ***************************************************************************************
resetKongTriggered
    lda #0                          ;
    sta kongBeastSwitchTriggered    ;
    jmp setColour2AndShowExit       ;

; ***************************************************************************************
startLoweringKong
    jsr lowerKong                   ;
    jmp drawKongState2              ;

; ***************************************************************************************
drawKongState1
    cpx #1                              ;
    beq addToScoreAndEraseKong          ;
    lda #<verticalGuardianMODE1Address2 ; }
    sta plotSourceSpriteAddressLow      ; } set first animation state
    lda #>verticalGuardianMODE1Address2 ; }
    sta plotSourceSpriteAddressHigh     ; }
    jmp addToScoreAndDrawKong           ;

; ***************************************************************************************
drawKongState2
    cpx #1                              ;
    beq addToScoreAndEraseKong          ;

    lda #<verticalGuardianMODE1Address3 ; }
    sta plotSourceSpriteAddressLow      ; } set second animation state
    lda #>verticalGuardianMODE1Address3 ; }
    sta plotSourceSpriteAddressHigh     ; }
    jmp addToScoreAndDrawKong           ; [redundant]

; ***************************************************************************************
addToScoreAndDrawKong
    lda #$39                        ;
    jsr addToScore                  ; add 40 to score
    ldx #78                         ;
    ldy kongYCoordinate             ;
    lda #$f0                        ;
    sta plotColourMask              ;
    lda #6                          ;
    jmp plot                        ; draw Kong falling (plot mode 6)

; ***************************************************************************************
addToScoreAndEraseKong
    lda #$69                        ;
    jsr addToScore                  ; add 70 to score
    ldx #78                         ;
    ldy kongYCoordinate             ;
    lda #2                          ;
    jmp plot                        ; erase Kong falling (plot mode 2)

; ***************************************************************************************
setColour2AndShowExit
    lda #2                          ; COLOUR 2
    jsr setTextColour               ;
    jmp drawExit                    ;

; ***************************************************************************************
getKongVisibleStateIntoX
    lda kongYCoordinate             ;
    cmp #96                         ;
    bcs +                           ; if (kong low enough) then return 1
    ldx #0                          ; draw Kong
    rts                             ;
+
    ldx #1                          ; erase Kong
    rts                             ;

; ***************************************************************************************
updateHighScore
    ldx #2                          ;
-
    lda score, x                    ;
    cmp highScore, x                ;
    bcc +                           ;
    bcs setHighScore                ;
    dex                             ;
    bpl -                           ;
+
    rts                             ;

; ***************************************************************************************
setHighScore
    ldx #2                          ;
-
    lda score, x                    ;
    sta highScore, x                ;
    dex                             ;
    bpl -                           ;
    rts                             ;


; ***************************************************************************************
;
; On Entry:
;   (A+1) is the BCD value of the score to add
;
; ***************************************************************************************
addToScore
    clc                             ; }
    adc #1                          ; }
    sed                             ; }
    clc                             ; } add (A+1) to score (binary coded decimal)
    adc score                       ; }
    sta score                       ; }
    lda score + 1                   ; }
    adc #0                          ; }
    sta score + 1                   ; }
    lda score + 2                   ;
    bcs extraLife                   ; if (score passes each 10000 boundary) then branch (extra life)

printScoreAndLives
    cld                             ;

    jsr updateHighScore             ;

    ldx #10                         ;
    ldy #20                         ;
    jsr setTextPos                  ;

    lda #3                          ; COLOUR 3
    jsr setTextColour               ;

    ; print three pairs of numbers for the score
    ldx #2                          ;
-
    lda score,x                     ;
    jsr printBCDNumber              ;
    dex                             ;
    bpl -                           ;

    ; move eight positions right
    lda #9                          ; forward space
    ldx #8                          ; loop eight times
-
    jsr OSWRCH                      ;
    dex                             ;
    bne -                           ;

    ; print lives
    lda lives                       ;
    jmp printBCDNumber              ;

extraLife
    adc #0                          ;
    sta score + 2                   ;
    cld                             ;

    jsr updateHighScore             ;

    lda #3                          ;
    ldx #100                        ;
    ldy #4                          ;
    jsr playSoundAXY                ; Play sound for extra life: SOUND
    inc lives                       ;
    jmp printScoreAndLives          ;

; ***************************************************************************************
;
; print two digits: 0-9 from the upper nybble, then 0-9 from the lower nybble
;
; ***************************************************************************************
printBCDNumber
    tay                             ;
    and #$f0                        ;
    lsr                             ;
    lsr                             ;
    lsr                             ;
    lsr                             ;
    clc                             ;
    adc #$30                        ;
    jsr OSWRCH                      ;
    tya                             ;
    and #$0f                        ;
    clc                             ;
    adc #$30                        ;
    jmp OSWRCH                      ;

; ***************************************************************************************
keyTaken
    lda #7                          ; }
    ldx #<oswordSoundBlock3         ; } Stop playing sound. This allows the OS to realise that the pitch needs to change.
    ldy #>oswordSoundBlock3         ; } We use updateSpotSound to poke the chip directly behind the OS's back.
    jsr OSWORD                      ; } So otherwise the OS doesn't realise the pitch needs to change.
    lda #7                          ;
    ldx #<oswordSoundBlock2         ; Play key taken SOUND
    ldy #>oswordSoundBlock2         ;
    jsr OSWORD                      ;

    lda #$49                        ;
    jsr addToScore                  ; add 50 to score
    lda #$49                        ;
    jmp addToScore                  ; add 50 to score

; ***************************************************************************************
;
; A = Amplitude
; X = pitch
; Y = duration
;
; ***************************************************************************************
playSoundAXY
    sta oswordSoundBlock + 2        ;
    stx oswordSoundBlock + 4        ;
    sty oswordSoundBlock + 6        ;
    lda #7                          ;
    ldx #<oswordSoundBlock          ; SOUND
    ldy #>oswordSoundBlock          ;
    jmp OSWORD                      ;

getNextColour
    dec $72                         ;
    bne +
    lda #3                          ;
    sta $72                         ;
+
    lda $72
    rts                             ;

; ***************************************************************************************
delayAndClearPedestalSprite
    lda #48                         ; delay amount
    sta $70                         ;
    lda #1                          ;
    sta $72                         ;

delayOuterLoop
    ldx #14                         ;
    ldy #8                          ;
    jsr setTextPos                  ;
    ldy #0                          ;
-
    jsr getNextColour               ;
    jsr setTextColour               ;
    lda gameOverMessage,y           ;
    jsr OSWRCH                      ;
    iny                             ;
    cpy #gameOverMessageEnd - gameOverMessage ;
    bne -                           ;

    lda #19                         ;
    jsr OSBYTE                      ;
    lda #19                         ;
    jsr OSBYTE                      ;
    lda #19                         ;
    jsr OSBYTE                      ;

    jsr getNextColour               ;
    dec $70                         ;
    bne delayOuterLoop              ;

    ; clear pedestal sprite
    ldx #0                          ;
    txa                             ;
-
    sta softCharacterDefinitions,x  ;
    inx                             ;
    cpx #$40                        ;
    bne -                           ;
    rts                             ;

; ***************************************************************************************
death
    jsr pauseMusic                  ;

    lda #$01                        ; }
    ldx #$c8                        ; } Play death sound
    ldy #$01                        ; }
    jsr playSoundAXY                ; }

    ; pause for a very short time
    lda #5                          ;
-
    pha                             ;
    lda #19                         ;
    jsr OSBYTE                      ;
    pla                             ;
    sec                             ;
    sbc #1                          ;
    bne -                           ;

    ldx #$fd                        ;
    txs                             ; fix the stack pointer!!

    lda lives                       ;
    bne +                           ;
    jmp gameOver                    ; if (already zero lives left) then branch (game over)
+
    dec lives                       ;

    lda currentLevel                ;
    jsr showLevel                   ;
    jsr updateMusicState            ;
    jmp playCurrentLevel            ;

horizontalGuardianCache
    * = * + 256

; ***************************************************************************************
;
; Like OSBYTE 135, this reads a character from the screen and returns it's ASCII code in X
; but this is tweaked to only check SPACE and the user defined characters 128-160
;
; ***************************************************************************************
readCharacter
    JSR readCharacterDefinitionMaskFromScreen           ; read from screen, making a one bit
                                                        ; mask of 8 bytes to match against
                                                        ; each character, in workspaceA-H

    ; check for a SPACE character first
    ldx #7                                              ; x=7
-
    lda characterFromScreen,x                           ; get byte in workspaceA-H copy
    bne checkFullCharacter                              ; if (not the same) then branch (to skip to next character)
    dex                                                 ; x--
    bpl -                                               ; if (still non-negative) then branch (back to loop eight times, to check each row of the character)
    ldx #charSPACE                                      ;
    rts                                                 ;

    ; check for special 'filled in' wall
checkFullCharacter
    ldx #7                                              ; x=7
-
    lda characterFromScreen,x                           ; get byte in workspaceA-H copy
    cmp #255                                            ;
    bne checkUserDefinedCharacters                      ; if (not full) then branch (to skip to next character)
    dex                                                 ; x--
    bpl -                                               ; if (still non-negative) then branch (back to loop eight times, to check each row of the character)
    ldx #$8f                                            ; wall
    rts                                                 ;

checkUserDefinedCharacters
    ldy #<softCharacterDefinitions                      ; loop counter
    sty characterAddrLow                                ;
    lda #>softCharacterDefinitions                      ;
    sta characterAddrHigh                               ;
readCharLoop
    ldx #7                                              ; x=7
-
    lda characterFromScreen,x                           ; get byte in workspaceA-H copy
characterAddrLow = * + 1
characterAddrHigh = * + 2
    cmp $ffff,x                                         ; check against character definition
    bne gotoNextCharacter                               ; if (not the same) then branch (to skip to next character)
    dex                                                 ; x--
    bpl -                                               ; if (still non-negative) then branch (back to loop eight times, to check each row of the character)
finishUp
    tya                                                 ; At this point the character matches
    ora #$80                                            ; Add 128 to the code returned
    tax                                                 ;
    rts                                                 ;

gotoNextCharacter
    iny                                                 ; no match on this character so increment to next character
    lda characterAddrLow                                ; }
    clc                                                 ; } Add 8 to address of character definition to move on to the next character
    adc #8                                              ; } Affects low byte only as we check one page of characters at a time
    sta characterAddrLow                                ; }
    bne readCharLoop                                    ; if (we have not reached the end of the page) then branch (back to check the character)

    cpy #32                                             ; check for end of page
    bne readCharLoop                                    ; if (not done with all characters) then branch (loop back)
    ldx #0                                              ; nothing found
    rts                                                 ;

; ***************************************************************************************
;
; Read character from screen pixels
;
; Reads 8x8 cell of pixels from the screen. This will be compared against each of the
; character definitions to determine which character is on screen.
;
; ***************************************************************************************
readCharacterDefinitionMaskFromScreen
    ; Set readCharScreenAddress = $3000 + cursorY*$280 + cursorX * 16
    ; get the row address
    ldx cursorY                         ;
    lda screenRowAddressLow,x           ;
    sta readCharScreenAddressLow        ;
    lda screenRowAddressHigh,x          ;
    sta readCharScreenAddressHigh       ;

    ; add 16 * cell X
    lda #0                              ;
    sta tempHigh                        ;
    lda cursorX                         ;
    asl                                 ; no need for a rol here, as X is too small
    asl                                 ;
    rol tempHigh                        ;
    asl                                 ;
    rol tempHigh                        ;
    asl                                 ;
    rol tempHigh                        ;
    clc
    adc readCharScreenAddressLow        ;
    sta readCharScreenAddressLow        ;
    lda readCharScreenAddressHigh       ;
    adc tempHigh                        ;
    sta readCharScreenAddressHigh       ;

    ldy #7                                              ; Y=7
setupPatternLoop
    sty tempLoopCounter                                 ; tempLoopCounter=Y (loop counter)
    lda #1                                              ; A=1
    sta tempByte                                        ; tempByte=A
--
    lda #$88                                            ; A=left colour mask
    sta tempMask                                        ; store in tempMask
    lda (readCharScreenAddressLow),Y                    ; get a byte from screen
;    eor vduBackgroundTextColour                         ; EOR with text background colour
    clc                                                 ; clear carry
-
    bit tempMask                                        ; and check bits of colour mask
    beq +                                               ; if (result = 0) then branch (this becomes a zero bit in our mask)
    sec                                                 ; set carry. This becomes a one bit in our mask
+
    rol tempByte                                        ; Rotate left and add the carry in the low bit
    bcs +                                               ; if (carry now set; bit 7 originally set) then branch (because we are done:
                                                        ;               the initial value of 1 has rotated through the 8 bits and into the carry)
    lsr tempMask                                        ; shift mask right one place for the next pixel
    bcc -                                               ; if (carry clear; nothing shifted off the left) then branch (loop back)
    tya                                                 ; }
    adc #7                                              ; } Y = Y + 8 (Carry is set, so adding 7 + carry = 8)
    tay                                                 ; }
    bcc --                                              ; if (no overflow from the add) then branch (loop back, move on to the next cell to read from)
+
    ldy tempLoopCounter                                 ; read modified values into Y and A
    lda tempByte                                        ;
    sta characterFromScreen,Y                           ; store copy
    dey                                                 ; and do it again
    bpl setupPatternLoop                                ; until 8 bytes copied
    rts                                                 ;

energyFieldSprites
    !byte %########
    !byte %.##..##.
    !byte %........
    !byte %..#..#..
    !byte %.#....#.
    !byte %..#..#..
    !byte %.#....#.
    !byte %..#..#..
    !byte %.#....#.
    !byte %..#..#..
    !byte %.#....#.
    !byte %..#..#..
    !byte %.#....#.
    !byte %........
    !byte %.##..##.
    !byte %########

    !byte %########
    !byte %.##..##.
    !byte %........
    !byte %.#....#.
    !byte %..#..#..
    !byte %.#....#.
    !byte %..#..#..
    !byte %.#....#.
    !byte %..#..#..
    !byte %.#....#.
    !byte %..#..#..
    !byte %.#....#.
    !byte %..#..#..
    !byte %........
    !byte %.##..##.
    !byte %########

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

meteorAndTailSprites
    !byte %........
    !byte %........
    !byte %..#...#.
    !byte %#..#...#
    !byte %.#..#.#.
    !byte %#..#...#
    !byte %.#..#.#.
    !byte %...#..#.

    !byte %........
    !byte %..#.....
    !byte %..#.#.#.
    !byte %.#..#.#.
    !byte %.#..#.#.
    !byte %.#.#...#
    !byte %..#...#.
    !byte %...#.#..

    !byte %.#..#...
    !byte %...###..
    !byte %..#.###.
    !byte %.#####.#
    !byte %.#.#.###
    !byte %.#####.#
    !byte %..##.##.
    !byte %...###..

    !byte %.#....#.
    !byte %..####..
    !byte %..##.##.
    !byte %.#.#####
    !byte %.#####.#
    !byte %.##.####
    !byte %..###.#.
    !byte %...###..

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %..#...#.
    !byte %#..#...#
    !byte %.#..#.#.

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %.#......

    !byte %#..#...#
    !byte %.#..#.#.
    !byte %...#..#.
    !byte %.#..#...
    !byte %...###..
    !byte %..#.###.
    !byte %.#####.#
    !byte %.#.#.###

    !byte %....#..#
    !byte %..#.....
    !byte %...#.#..
    !byte %.#......
    !byte %..#.#...
    !byte %......#.
    !byte %..#...#.
    !byte %.#.###.#

; ***************************************************************************************
;
; Later levels (9 and 11 upwards) can have up to four vertical guardians
;
; Guardian position data is packed into two bytes:
;
; <x coordinate>    x position in cells, top bit specifies initial direction, (clear = up, set = down), bit 6 is speed (1 = fast)
; <y coordinates>   top nybble is the initial Y and also the second extent, bottom nybble is the first extent
;
; ***************************************************************************************
verticalGuardianPositions
    !byte $00, $00,  $00, $00,  $00, $00,  $00, $00    ; [UNUSED]
    !byte $85, $0d,  $cb, $0d,  $94, $0d,  $d9, $0d    ; level 9 - Wacky Amoebatrons
    !byte $00, $00,  $00, $00,  $00, $00,  $00, $00    ; [UNUSED]
    !byte $83, $4d,  $8c, $07,  $95, $6d,  $da, $0d    ; level 11 - Attack of the Mutant Telephones
    !byte $ff, $ff,  $ff, $ff,  $ff, $ff,  $ff, $ff    ; level 12 - Return of the Alien Kong Beast
    !byte $85, $1d,  $ff, $ff,  $ff, $ff,  $ff, $ff    ; level 13 - Ore Refinery
    !byte $c1, $09,  $8b, $04,  $d5, $07,  $ff, $ff    ; level 14 - Skylab Landing Bay
    !byte $89, $4d,  $8f, $5d,  $d5, $4d,  $ff, $ff    ; level 15 - The Bank
    !byte $ff, $ff,  $ff, $ff,  $ff, $ff,  $ff, $ff    ; level 16 - The Sixteenth Cavern
    !byte $83, $8d,  $4a, $c0,  $13, $80,  $db, $0c    ; level 17 - The Warehouse
    !byte $c5, $1d,  $8a, $1d,  $d4, $1d,  $99, $1d    ; level 18 - Amoebatrons' Revenge
    !byte $ff, $ff,  $ff, $ff,  $ff, $ff,  $ff, $ff    ; level 19 - The Meteor Storm
    !byte $82, $06,  $da, $4d,  $ff, $ff,  $ff, $ff    ; level 20 - The Final Barrier

; ***************************************************************************************
verticalGuardiansSpritesArray
    ; vertical guardians for the later levels
    ; Level     11,  12,  13,  14,  15,  16,  17,  18,  19,  20
    !byte $ea, $03, $00, $04, $05, $06, $00, $07, $09, $08, $04

; ***************************************************************************************
cheatCode
    ; code: A, <space>, S,   E,   C,   R,   E,   T
    ;
    ; key codes as stored in memory address $ec (by the OS) when pressed, all with top bit set:
    ;     $C1, $E2, $D1, $A2, $D2, $B3, $A2, $A3
    ; stored here without top bit set:
    !byte $41, $62, $51, $22, $52, $33, $22, $23
cheatCodeEnd

; ***************************************************************************************
music
    ;     B2, C#3, D3, E3,     F#3, D3, F#3,           F3, C#3,  F3,          E3,  C3, E3
    !byte  0,   2,  3,  5, $80 + 7,  3,   7,7,   $80 +  6,   2,   6,6,  $80 +  5,   1,  5,5
    ;     B2, C#3, D3, E3,     F#3, D3, F#3,           B3,  A3, F#3,    D3, F#3,       A3
    !byte  0,   2,  3,  5,       7,  3,   7,           12,  10,   7,     3,   7, $80 + 10,$80 + 10,$80 + 10,$80 + 10

    ;     B3, C#4, D4, E4,      F#4, D4, F#4,          F4, C#4,  F4,          E4,  C4, E4
    !byte 12,  14, 15, 17, $80 + 19, 15,  19,19, $80 + 18,  14,  18,18, $80 + 17,  13, 17,17
    ;     B3, C#4, D4, E4,      F#4, D4, F#4,          B4,  A4, F#4,          D4, F#4,       A4
    !byte 12,  14, 15, 17,       19, 15,  19,          24,  22,  19,          15,  19, $80 + 22,$80 + 22,$80 + 22,$80 + 22

    ;    F#3, G#3,A#3, B3,      C#4,A#3, C#4,          D4, A#3,  D4,         C#4, A#3, C#4
    !byte  7,   9, 11, 12, $80 + 14, 11,  14,14, $80 + 15,  11,  15,15, $80 + 14,  11,  14,14
    ;    F#3, G#3,A#3, B3,      C#4,A#3, C#4,          D4, A#3,  D4,         C#4
    !byte  7,   9, 11, 12, $80 + 14, 11,  14,14, $80 + 15,  11,  15,15, $80 + 14, $80 + 14, $80 + 14, $80 + 14

    ;     B2, C#3, D3, E3,       F#3, D3, F#3,           F3, C#3,  F3,          E3,   C3, E3
    !byte  0,   2,  3,  5,  $80 +  7,  3,   7,7,   $80 +  6,   2,   6,6,  $80 +  5,   1,  5, 5
    ;     B2, C#3, D3, E3,       F#3, D3, F#3,           B3, F#3,  D3,         F#3,  B3, B2
    !byte  0,   2,  3,  5,         7,  3,   7,           12,   7,   3,           7,  12,  $80 + 0, $80 + 0, $80 + 0, $80 + 0
    ; delay
    !byte $80 + 0, $80 + 0, $80 + 0, $80 + 0,  $80 + 0, $80 + 0, $80 + 0, $80 + 0, $80 + 0, $80 + 0, $80 + 0, $80 + 0

    !byte $ff

soundFrequenciesFirst
    !byte $80 + 1012 % 16   ; 0   1012  B2
    !byte $80 +  956 % 16   ; 1    956  C3 (=B#2)
    !byte $80 +  902 % 16   ; 2    902  C#3
    !byte $80 +  851 % 16   ; 3    851  D3
    !byte $80 +  804 % 16   ; 4    804  D#3
    !byte $80 +  758 % 16   ; 5    758  E3
    !byte $80 +  716 % 16   ; 6    716  F3 (=E#3)
    !byte $80 +  676 % 16   ; 7    676  F#3
    !byte $80 +  638 % 16   ; 8    638  G3
    !byte $80 +  602 % 16   ; 9    602  G#3
    !byte $80 +  568 % 16   ; 10   568  A3
    !byte $80 +  536 % 16   ; 11   536  A#3
    !byte $80 +  506 % 16   ; 12   506  B3
    !byte $80 +  478 % 16   ; 13   478  C4
    !byte $80 +  451 % 16   ; 14   451  C#4
    !byte $80 +  426 % 16   ; 15   426  D4
    !byte $80 +  402 % 16   ; 16   402  D#4
    !byte $80 +  379 % 16   ; 17   379  E4
    !byte $80 +  358 % 16   ; 18   358  F4
    !byte $80 +  338 % 16   ; 19   338  F#4
    !byte $80 +  319 % 16   ; 20   319  G4
    !byte $80 +  301 % 16   ; 21   301  G#4
    !byte $80 +  284 % 16   ; 22   284  A4
    !byte $80 +  268 % 16   ; 23   268  A#4
    !byte $80 +  253 % 16   ; 24   253  B4

soundFrequenciesSecond
    !byte 1012 / 16         ; 0   1012  B2
    !byte  956 / 16         ; 1    956  C3 (=B#2)
    !byte  902 / 16         ; 2    902  C#3
    !byte  851 / 16         ; 3    851  D3
    !byte  804 / 16         ; 4    804  D#3
    !byte  758 / 16         ; 5    758  E3
    !byte  716 / 16         ; 6    716  F3 (=E#3)
    !byte  676 / 16         ; 7    676  F#3
    !byte  638 / 16         ; 8    638  G3
    !byte  602 / 16         ; 9    602  G#3
    !byte  568 / 16         ; 10   568  A3
    !byte  536 / 16         ; 11   536  A#3
    !byte  506 / 16         ; 12   506  B3
    !byte  478 / 16         ; 13   478  C4
    !byte  451 / 16         ; 14   451  C#4
    !byte  426 / 16         ; 15   426  D4
    !byte  402 / 16         ; 16   402  D#4
    !byte  379 / 16         ; 17   379  E4
    !byte  358 / 16         ; 18   358  F4
    !byte  338 / 16         ; 19   338  F#4
    !byte  319 / 16         ; 20   319  G4
    !byte  301 / 16         ; 21   301  G#4
    !byte  284 / 16         ; 22   284  A4
    !byte  268 / 16         ; 23   268  A#4
    !byte  253 / 16         ; 24   253  B4


; ***************************************************************************************

guardianSetForEachLevel
    ; level 1,   2,   3,   4,   5,   6,   7,  8,    9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20
    !byte $01, $02, $03, $04, $05, $06, $07, $08, $09, $0a, $0b, $08, $0c, $00, $0d, $0e, $0f, $09, $10, $01

guardianToleranceTL
    ;     duck, penguin, ostrich, seal, toilet, pacman, kanga, barrel. wheels, endorian, spinner, ore mac, money, flag, spreader, mirror
    !byte    3,       4,    6,      5,      0,     2,      3,      4,        4,       1,       4,       1,     5,    4,        1,      5
guardianToleranceTR
    !byte    5,      10,    8,      8,     11,     7,      9,       9,      10,      11,       10,      7,    8,    11,        9,      9
guardianToleranceBL
    !byte    3,       3,    4,      1,      0,     3,      0,      3,        1,       1,       3,       2,     0,    3,        0,      1
guardianToleranceBR
    !byte    7,       9,    9,      6,      8,     8,      8,      9,        7,       8,       7,       8,     8,    6,       12,      7

penOffsetX = 0
penOffsetY = 3
    ; A Penrose triangle as encoded PLOT statements
penroseTriangle
    !byte $fe, 1                                    ; GCOL 0,1
    !byte $04, $12 + penOffsetX, $ac + penOffsetY   ; MOVE
    !byte $04, $12 + penOffsetX, $b8 + penOffsetY   ; MOVE
    !byte $55, $78 + penOffsetX, $79 + penOffsetY   ; TRI
    !byte $55, $6c + penOffsetX, $8b + penOffsetY   ; TRI
    !byte $55, $78 + penOffsetX, $d3 + penOffsetY   ; TRI
    !byte $55, $6c + penOffsetX, $cd + penOffsetY   ; TRI
    !byte $fe, 2                                    ; GCOL 0,2
    !byte $04, $78 + penOffsetX, $79 + penOffsetY   ; MOVE
    !byte $04, $83 + penOffsetX, $7f + penOffsetY   ; MOVE
    !byte $55, $78 + penOffsetX, $d3 + penOffsetY   ; TRI
    !byte $55, $83 + penOffsetX, $e4 + penOffsetY   ; TRI
    !byte $55, $37 + penOffsetX, $b3 + penOffsetY   ; TRI
    !byte $55, $2d + penOffsetX, $b8 + penOffsetY   ; TRI
    !byte $fe, 3                                    ; GCOL 0,3
    !byte $04, $6c + penOffsetX, $cc + penOffsetY   ; MOVE
    !byte $05, $6c + penOffsetX, $98 + penOffsetY   ; DRAW
    !byte $05, $2c + penOffsetX, $b8 + penOffsetY   ; DRAW
    !byte $05, $83 + penOffsetX, $e4 + penOffsetY   ; DRAW
    !byte $05, $77 + penOffsetX, $ea + penOffsetY   ; DRAW
    !byte $05, $12 + penOffsetX, $b8 + penOffsetY   ; DRAW
    !byte $05, $12 + penOffsetX, $ac + penOffsetY   ; DRAW
    !byte $05, $78 + penOffsetX, $79 + penOffsetY   ; DRAW
    !byte $05, $83 + penOffsetX, $7f + penOffsetY   ; DRAW
    !byte $05, $83 + penOffsetX, $e4 + penOffsetY   ; DRAW
    !byte $04, $78 + penOffsetX, $79 + penOffsetY   ; MOVE
    !byte $05, $78 + penOffsetX, $d3 + penOffsetY   ; DRAW
    !byte $05, $37 + penOffsetX, $b3 + penOffsetY   ; DRAW
    !byte $04, $6c + penOffsetX, $99 + penOffsetY   ; MOVE
    !byte $05, $6c + penOffsetX, $8b + penOffsetY   ; DRAW
    !byte $05, $12 + penOffsetX, $b8 + penOffsetY   ; DRAW
    !byte $ff                                       ; TERMINATOR

; ***************************************************************************************
boundaryArray
    !byte 255,23,15,8

; ***************************************************************************************
plotMessageStart
    !byte 25                        ; VDU 25
plotType
    !byte $ea                       ;
plotXLow
    !byte $ea                       ;
plotXHigh
    !byte $ea                       ;
plotYLow
    !byte $ea                       ;
plotYHigh
    !byte $ea                       ;
plotMessageEnd

; ***************************************************************************************
byteMaskGreen
    !byte $f0, $f8, $fc, $fe

; ***************************************************************************************
byteMaskRed
    !byte $0f, $8f, $cf, $ef

playerTolerance
    !byte 3, 8, 1, 8, 3, 8, 1, 8

; ***************************************************************************************
;
;   Check collision shapes with the corners chopped off:
;      ______
;   a /      \ b
;    /        \
;   |  player |
;   |    p    |
;    \        /
;   c \______/ d
;
;           ______
;        e /      \ f
;         /        \
;        | guardian|
;        |    g    |
;         \       /
;        g \_____/ h
;
; reject if any one of the following is true:
;
;    (pX + pY) - (gX + gY) + a >= 32 - h
;    (gX + gY) - (pX + pY) + d >= 32 - e
;    (pX - pY) - (gX - gY) + c >= 32 - f
;    (gX - gY) - (pX - pY) + b >= 32 - g
;
; calculations are 16 bit signed. Probably this could be done in 8 bits.
;
; On Entry:
;     X is the index of the horizontal guardian
;     collisionPlayerX        player position
;     playerPixelY
;     collisionGuardianX      guardian position
;     collisionGuardianY
;     toleranceXX set to a,b,c,d,e,f,g,h appropriate values
;
; Preserves X
;
; ***************************************************************************************
checkPixelCollision
    txa                                 ;
    pha                                 ;

    lda horizontalGuardianPositions + 1,x ;
    bpl +                               ;

    ldx #0                              ;
    jmp ++                              ;
+
    ldx #4                              ;
++
    jsr checkPixelCollisionX            ;
    pla                                 ;
    tax                                 ;
    rts                                 ;

checkPixelCollisionX
    ldy #4
    lda willyAnimationEOR               ;
    bne +
    ldy #0
+

    lda #0                              ;
    sta collisionHigh                   ;
    lda collisionPlayerX                ;
    clc                                 ;
    adc playerPixelY                    ;
    bcc +                               ;
    inc collisionHigh                   ;
+
    sec                                 ;
    sbc collisionGuardianX              ;
    bcs +                               ;
    dec collisionHigh                   ;
+
    sec                                 ;
    sbc collisionGuardianY              ;
    sta collisionLow                    ;
    bcs +                               ;
    dec collisionHigh                   ;
+
    lda collisionHigh                   ;
    bmi test2                           ;
    lda collisionLow                    ;
    clc                                 ;
    adc playerTolerance,y               ; value + a
    cmp toleranceBR,x                   ; 32 - h
    bcs finishUp1                       ;

test2
    lda collisionLow                    ;
    eor #$ff                            ;
    sta collisionLow                    ;
    lda collisionHigh                   ;
    eor #$ff                            ;
    sta collisionHigh                   ;
    bmi test3                           ;
    lda collisionLow                    ;
    clc                                 ;
    adc playerTolerance + 3,y           ; value + d
    cmp toleranceTL,x                   ; 32 - e
    bcs finishUp1                       ;

test3
    lda #0                              ;
    sta collisionHigh                   ;
    lda collisionPlayerX                ;
    sec                                 ;
    sbc playerPixelY                    ;
    bcs +                               ;
    dec collisionHigh                   ;
+
    sec                                 ;
    sbc collisionGuardianX              ;
    bcs +                               ;
    dec collisionHigh                   ;
+
    clc
    adc collisionGuardianY              ;
    sta collisionLow                    ;
    bcc +                               ;
    inc collisionHigh                   ;
+
    lda collisionHigh                   ;
    bmi test4                           ;
    lda collisionLow                    ;
    clc                                 ;
    adc playerTolerance + 2,y           ; value + c
    cmp toleranceTR,x                   ; 32 - f
    bcs finishUp1                       ;

test4
    lda collisionLow                    ;
    eor #$ff                            ;
    sta collisionLow                    ;
    lda collisionHigh                   ;
    eor #$ff                            ;
    sta collisionHigh                   ;
    bmi +                               ;
    lda collisionLow                    ;
    clc                                 ;
    adc playerTolerance + 1,y           ; value + b
    cmp toleranceBL,x                   ; 32 - g
    bcs finishUp1                        ;
+
!ifdef debugPixelCollision {
    lda #$0f
    sta $3280
    rts
} else {
    jmp death                           ;
}
finishUp1
!ifdef debugPixelCollision {
    lda #$f0
    sta $3280
}
    rts                                 ;

!ifdef debugPixelCollision {
; ***************************************************************************************
debugDrawVerticalLine
    php
    sta tempLineA
    pha
    txa
    pha
    tya
    pha
    lda #0
    sta debugStartX+1
tempLineA = * + 1
    lda #0
    asl
    rol debugStartX+1
    asl
    rol debugStartX+1
    clc
    adc #160
    sta debugStartX
    sta debugEndX
    lda debugStartX+1
    adc #0
    sta debugStartX+1
    sta debugEndX + 1

    ldx #0
-
    lda debugLineData,x
    jsr OSWRCH
    inx
    cpx #debugLineDataEnd - debugLineData
    bne -
    pla
    tay
    pla
    tax
    pla
    plp
    rts

debugLineData
    !byte 18,0,2
    !byte 25, 4
debugStartX
    !word 0,512
    !byte 25,5
debugEndX
    !word 0,800
debugLineDataEnd
}


; ***************************************************************************************
;debugChangePalette
;    ora paletteLookupTable                  ;
;    sta videoULAPaletteRegister             ;
;    eor #$10                                ;
;    sta videoULAPaletteRegister             ;
;    eor #$50                                ;
;    sta videoULAPaletteRegister             ;
;    eor #$10                                ;
;    sta videoULAPaletteRegister             ;
;    rts                                     ;

; ***************************************************************************************
; sprite numbers to draw (level specific)
levelFeatureArray
levelFeatureFloor
    !byte $80                           ; floor
levelFeatureCrumble
    !byte $82                           ; crumble
levelFeatureWall
    !byte $8f                           ; wall
levelFeatureConveyorOrLadder
    !byte $8b                           ; conveyor
levelFeatureEmpty
    !byte $8a                           ; empty
levelFeature5
    !byte $00                           ; [accessed in error, set to zero to avoid side-effects]


!if (* > $3280 ) {
    !error "Code too big by ", * - $3280, " bytes"
}
free2 = $3280 - *
    * = $3280                       ; start of visible screen
!pseudopc $6480 {

; ***************************************************************************************
playerStartXPositions
    !byte  2 * 4 + 16        ; level 1 - Central Cavern
    !byte  2 * 4 + 16        ; level 2 - The Cold Room
    !byte  2 * 4 + 16        ; level 3 - The Menagerie
    !byte 29 * 4 + 16        ; level 4 - Abandoned Uranium Workings
    !byte  1 * 4 + 16        ; level 5 - Eugene's Lair
    !byte 15 * 4 + 16 + 3    ; level 6 - Processing Plant
    !byte  2 * 4 + 16        ; level 7 - The Vat
    !byte  2 * 4 + 16        ; level 8 - Miner Willy meets the Kong Beast
    !byte  1 * 4 + 16        ; level 9 - Wacky Amoebatrons
    !byte  1 * 4 + 16        ; level 10 - The Endorian Forest
    !byte  3 * 4 + 16        ; level 11 - Attack of the Mutant Telephones
    !byte  2 * 4 + 16        ; level 12 - Return of the Alien Kong Beast
    !byte 29 * 4 + 16        ; level 13 - Ore Refinery
    !byte 29 * 4 + 16        ; level 14 - Skylab Landing Bay
    !byte  2 * 4 + 16        ; level 15 - The Bank
    !byte  2 * 4 + 16        ; level 16 - The Sixteenth Cavern
    !byte  2 * 4 + 16        ; level 17 - The Warehouse
    !byte 29 * 4 + 16 + 3    ; level 18 - Amoebatrons' Revenge
    !byte  2 * 4 + 16        ; level 19 - The Meteor Storm
    !byte  2 * 4 + 16        ; level 20 - The Final Barrier
playerStartYPositions
    !byte 13 * 8 + 8         ; level 1 - Central Cavern
    !byte 13 * 8 + 8         ; level 2 - The Cold Room
    !byte 13 * 8 + 8         ; level 3 - The Menagerie
    !byte 13 * 8 + 8         ; level 4 - Abandoned Uranium Workings
    !byte  3 * 8 + 8         ; level 5 - Eugene's Lair
    !byte  3 * 8 + 8         ; level 6 - Processing Plant
    !byte 13 * 8 + 8         ; level 7 - The Vat
    !byte 13 * 8 + 8         ; level 8 - Miner Willy meets the Kong Beast
    !byte 13 * 8 + 8         ; level 9 - Wacky Amoebatrons
    !byte  4 * 8 + 8         ; level 10 - The Endorian Forest
    !byte  1 * 8 + 8         ; level 11 - Attack of the Mutant Telephones
    !byte 13 * 8 + 8         ; level 12 - Return of the Alien Kong Beast
    !byte 13 * 8 + 8         ; level 13 - Ore Refinery
    !byte 13 * 8 + 8         ; level 14 - Skylab Landing Bay
    !byte 13 * 8 + 8         ; level 15 - The Bank
    !byte 13 * 8 + 8         ; level 16 - The Sixteenth Cavern
    !byte  3 * 8 + 8         ; level 17 - The Warehouse
    !byte 13 * 8 + 8         ; level 18 - Amoebatrons' Revenge
    !byte 13 * 8 + 8         ; level 19 - The Meteor Storm
    !byte 13 * 8 + 8         ; level 20 - The Final Barrier

; ***************************************************************************************
!macro levelStrip .x, .y, .width, .backgroundColour, .colour {
    !byte .x
    !byte .y + 64 * .backgroundColour
    !byte .width + 64 * .colour
}

!macro levelRect .x, .y, .width, .y_max, .backgroundColour, .colour {
    !byte $fe
    !byte .x
    !byte .y + 64 * .backgroundColour
    !byte .width + 64 * .colour
    !byte .y_max
}

!macro levelSetType .type {
    !byte $fd
    !byte .type
}

!macro levelIncrementType {
    !byte $ff
}

!macro levelColours1 .col1, .col2 {
    !byte .col2 * 16 + .col1
}

!macro levelColours2 .col3 {
    !byte .col3
}

!macro levelFloorCrumbleSprites .floor,.crumble {
    !byte .floor * 16 + .crumble
}

!macro levelSideWallColoursConveyor .conveyor, .sideWallColour1, .sideWallColour2{
    !byte (.sideWallColour2 * 4 + .sideWallColour1) * 16 + .conveyor
}

!macro levelSideWallKeySprites .sideWall, .key {
    !byte .sideWall * 16 + .key
}

!macro levelExitTypeSprite .exitType, .exitSprite {
    !byte .exitType + .exitSprite
}
!macro levelExitColour .colour {
    !byte .colour
}

!macro levelExitPositionX .exitX {
    !byte .exitX
}
!macro levelExitPositionY .exitY {
    !byte .exitY
}

; ***************************************************************************************
; Physical colours given for logical colours 0 and 1
levelColoursArray
    +levelColours1 black, red       ; level 1 - Central Cavern
    +levelColours1 blue, magenta    ; level 2 - The Cold Room
    +levelColours1 black, cyan      ; level 3 - The Menagerie
    +levelColours1 black, green     ; level 4 - Abandoned Uranium Workings
    +levelColours1 red, cyan        ; level 5 - Eugene's Lair
    +levelColours1 black, green     ; level 6 - Processing Plant
    +levelColours1 black, blue      ; level 7 - The Vat
    +levelColours1 black, red       ; level 8 - Miner Willy meets the Kong Beast
    +levelColours1 black, red       ; level 9 - Wacky Amoebatrons
    +levelColours1 black, green     ; level 10 - The Endorian Forest
    +levelColours1 black, blue      ; level 11 - Attack of the Mutant Telephones
    +levelColours1 black, magenta   ; level 12 - Return of the Alien Kong Beast
    +levelColours1 black, cyan      ; level 13 - Ore Refinery
    +levelColours1 blue, green      ; level 14 - Skylab Landing Bay
    +levelColours1 black, blue      ; level 15 - The Bank
    +levelColours1 black, red       ; level 16 - The Sixteenth Cavern
    +levelColours1 black, green     ; level 17 - The Warehouse
    +levelColours1 black, red       ; level 18 - Amoebatrons' Revenge
    +levelColours1 blue, green      ; level 19 - The Meteor Storm
    +levelColours1 black, green     ; level 20 - The Final Barrier

; ***************************************************************************************
; Physical colour for logical colour 2
levelColours2Array
    +levelColours2 green            ; level 1 - Central Cavern
    +levelColours2 cyan             ; level 2 - The Cold Room
    +levelColours2 magenta          ; level 3 - The Menagerie
    +levelColours2 magenta          ; level 4 - Abandoned Uranium Workings
    +levelColours2 white            ; level 5 - Eugene's Lair
    +levelColours2 cyan             ; level 6 - Processing Plant
    +levelColours2 red              ; level 7 - The Vat
    +levelColours2 green            ; level 8 - Miner Willy meets the Kong Beast
    +levelColours2 green            ; level 9 - Wacky Amoebatrons
    +levelColours2 red              ; level 10 - The Endorian Forest
    +levelColours2 white            ; level 11 - Attack of the Mutant Telephones
    +levelColours2 green            ; level 12 - Return of the Alien Kong Beast
    +levelColours2 white            ; level 13 - Ore Refinery
    +levelColours2 cyan             ; level 14 - Skylab Landing Bay
    +levelColours2 cyan             ; level 15 - The Bank
    +levelColours2 cyan             ; level 16 - The Sixteenth Cavern
    +levelColours2 blue             ; level 17 - The Warehouse
    +levelColours2 cyan             ; level 18 - Amoebatrons' Revenge
    +levelColours2 white            ; level 19 - The Meteor Storm
    +levelColours2 cyan             ; level 20 - The Final Barrier

; ***************************************************************************************
levelFloorCrumbleArray
    ;                      floor, crumble
    +levelFloorCrumbleSprites  0,       0   ; level 1 - Central Cavern
    +levelFloorCrumbleSprites  0,       0   ; level 2 - The Cold Room
    +levelFloorCrumbleSprites  1,       1   ; level 3 - The Menagerie
    +levelFloorCrumbleSprites  0,       0   ; level 4 - Abandoned Uranium Workings
    +levelFloorCrumbleSprites  0,       0   ; level 5 - Eugene's Lair
    +levelFloorCrumbleSprites  2,       0   ; level 6 - Processing Plant
    +levelFloorCrumbleSprites  0,       3   ; level 7 - The Vat
    +levelFloorCrumbleSprites  0,       0   ; level 8 - Miner Willy meets the Kong Beast
    +levelFloorCrumbleSprites  0,       0   ; level 9 - Wacky Amoebatrons
    +levelFloorCrumbleSprites  3,       2   ; level 10 - The Endorian Forest
    +levelFloorCrumbleSprites  0,       0   ; level 11 - Attack of the Mutant Telephones
    +levelFloorCrumbleSprites  0,       0   ; level 12 - Return of the Alien Kong Beast
    +levelFloorCrumbleSprites  5,       0   ; level 13 - Ore Refinery
    +levelFloorCrumbleSprites  6,       0   ; level 14 - Skylab Landing Bay
    +levelFloorCrumbleSprites  0,       0   ; level 15 - The Bank
    +levelFloorCrumbleSprites  0,       0   ; level 16 - The Sixteenth Cavern
    +levelFloorCrumbleSprites  0,       3   ; level 17 - The Warehouse
    +levelFloorCrumbleSprites  0,       0   ; level 18 - Amoebatrons' Revenge
    +levelFloorCrumbleSprites  0,       0   ; level 19 - The Meteor Storm
    +levelFloorCrumbleSprites  0,       0   ; level 20 - The Final Barrier

; ***************************************************************************************
levelSideWallColoursConveyorArray
    ;                            conveyor, wall colour, wall colour
    +levelSideWallColoursConveyor       1,           3,           1    ; level 1 - Central Cavern
    +levelSideWallColoursConveyor       1,           3,           1    ; level 2 - The Cold Room
    +levelSideWallColoursConveyor       2,           1,           2    ; level 3 - The Menagerie
    +levelSideWallColoursConveyor       1,           2,           1    ; level 4 - Abandoned Uranium Workings
    +levelSideWallColoursConveyor       2,           3,           1    ; level 5 - Eugene's Lair
    +levelSideWallColoursConveyor       1,           3,           0    ; level 6 - Processing Plant
    +levelSideWallColoursConveyor       0,           1,           3    ; level 7 - The Vat
    +levelSideWallColoursConveyor       2,           1,           3    ; level 8 - Miner Willy meets the Kong Beast
    +levelSideWallColoursConveyor       2,           3,           1    ; level 9 - Wacky Amoebatrons
    +levelSideWallColoursConveyor       1,           2,           3    ; level 10 - The Endorian Forest
    +levelSideWallColoursConveyor       0,           3,           1    ; level 11 - Attack of the Mutant Telephones
    +levelSideWallColoursConveyor       2,           2,           1    ; level 12 - Return of the Alien Kong Beast
    +levelSideWallColoursConveyor       2,           3,           1    ; level 13 - Ore Refinery
    +levelSideWallColoursConveyor       2,           2,           0    ; level 14 - Skylab Landing Bay
    +levelSideWallColoursConveyor       0,           3,           1    ; level 15 - The Bank
    +levelSideWallColoursConveyor       2,           2,           3    ; level 16 - The Sixteenth Cavern
    +levelSideWallColoursConveyor       1,           3,           1    ; level 17 - The Warehouse
    +levelSideWallColoursConveyor       0,           3,           1    ; level 18 - Amoebatrons' Revenge
    +levelSideWallColoursConveyor       1,           3,           0    ; level 19 - The Meteor Storm
    +levelSideWallColoursConveyor       1,           3,           0    ; level 20 - The Final Barrier

; ***************************************************************************************
levelSideWallKeyArray
    ;                         side, key
    +levelSideWallKeySprites     0,   0        ; level 1 - Central Cavern
    +levelSideWallKeySprites     0,   1        ; level 2 - The Cold Room
    +levelSideWallKeySprites     1,   0        ; level 3 - The Menagerie
    +levelSideWallKeySprites     0,   0        ; level 4 - Abandoned Uranium Workings
    +levelSideWallKeySprites     0,   2        ; level 5 - Eugene's Lair
    +levelSideWallKeySprites     0,   0        ; level 6 - Processing Plant
    +levelSideWallKeySprites     0,   0        ; level 7 - The Vat
    +levelSideWallKeySprites     0,   3        ; level 8 - Miner Willy meets the Kong Beast
    +levelSideWallKeySprites     8,   0        ; level 9 - Wacky Amoebatrons
    +levelSideWallKeySprites     3,   4        ; level 10 - The Endorian Forest
    +levelSideWallKeySprites     7,   6        ; level 11 - Attack of the Mutant Telephones
    +levelSideWallKeySprites     0,   3        ; level 12 - Return of the Alien Kong Beast
    +levelSideWallKeySprites     8,   5        ; level 13 - Ore Refinery
    +levelSideWallKeySprites     2,   7        ; level 14 - Skylab Landing Bay
    +levelSideWallKeySprites     7,   8        ; level 15 - The Bank
    +levelSideWallKeySprites     0,   9        ; level 16 - The Sixteenth Cavern
    +levelSideWallKeySprites     5,   0        ; level 17 - The Warehouse
    +levelSideWallKeySprites     4,   0        ; level 18 - Amoebatrons' Revenge
    +levelSideWallKeySprites     0,   0        ; level 19 - The Meteor Storm
    +levelSideWallKeySprites     0,   0        ; level 20 - The Final Barrier

; ***************************************************************************************
;   $00 = 8x8 exit sprite repeated four times (lower 3 bits are sprite number)
;   $40 = 16x16 exit sprite (lower 3 bits are the sprite number)
;   $80 = 8x16 exit sprite reflected in the Y axis (lower bits are the sprite number)
;   $c0 = 8x8 exit sprite reflected four times (lower 5 bits are sprite number)
exitType1x1Rep  = $00
exitType2x2     = $40
exitType1x2     = $80
exitType1x1Ref  = $c0

; ***************************************************************************************
levelExitTypeSpriteArray
;                             exit type, exit sprite
    +levelExitTypeSprite exitType1x1Rep, 0        ; level 1 - Central Cavern
    +levelExitTypeSprite exitType1x1Ref, 0        ; level 2 - The Cold Room
    +levelExitTypeSprite exitType2x2,    2        ; level 3 - The Menagerie
    +levelExitTypeSprite exitType1x1Rep, 1        ; level 4 - Abandoned Uranium Workings
    +levelExitTypeSprite exitType1x1Ref, 0        ; level 5 - Eugene's Lair
    +levelExitTypeSprite exitType1x1Ref, 1        ; level 6 - Processing Plant
    +levelExitTypeSprite exitType1x1Rep, 2        ; level 7 - The Vat
    +levelExitTypeSprite exitType1x2,    0        ; level 8 - Miner Willy meets the Kong Beast
    +levelExitTypeSprite exitType1x1Ref, 2        ; level 9 - Wacky Amoebatrons
    +levelExitTypeSprite exitType2x2,    3        ; level 10 - The Endorian Forest
    +levelExitTypeSprite exitType2x2,    4        ; level 11 - Attack of the Mutant Telephones
    +levelExitTypeSprite exitType1x1Ref, 3        ; level 12 - Return of the Alien Kong Beast
    +levelExitTypeSprite exitType2x2,    0        ; level 13 - Ore Refinery
    +levelExitTypeSprite exitType1x1Ref, 4        ; level 14 - Skylab Landing Bay
    +levelExitTypeSprite exitType2x2,    1        ; level 15 - The Bank
    +levelExitTypeSprite exitType1x1Ref, 8        ; level 16 - The Sixteenth Cavern
    +levelExitTypeSprite exitType1x2,    1        ; level 17 - The Warehouse
    +levelExitTypeSprite exitType1x1Ref, 6        ; level 18 - Amoebatrons' Revenge
    +levelExitTypeSprite exitType1x1Ref, 7        ; level 19 - The Meteor Storm
    +levelExitTypeSprite exitType1x2,    2        ; level 20 - The Final Barrier

; ***************************************************************************************
levelExitColourArray
    +levelExitColour $f0        ; level 1 - Central Cavern
    +levelExitColour $0f        ; level 2 - The Cold Room
    +levelExitColour $ff        ; level 3 - The Menagerie
    +levelExitColour $f0        ; level 4 - Abandoned Uranium Workings
    +levelExitColour $f0        ; level 5 - Eugene's Lair
    +levelExitColour $ff        ; level 6 - Processing Plant
    +levelExitColour $f0        ; level 7 - The Vat
    +levelExitColour $f0        ; level 8 - Miner Willy meets the Kong Beast
    +levelExitColour $f0        ; level 9 - Wacky Amoebatrons
    +levelExitColour $f0        ; level 10 - The Endorian Forest
    +levelExitColour $ff        ; level 11 - Attack of the Mutant Telephones
    +levelExitColour $ff        ; level 12 - Return of the Alien Kong Beast
    +levelExitColour $f0        ; level 13 - Ore Refinery
    +levelExitColour $ff        ; level 14 - Skylab Landing Bay
    +levelExitColour $f0        ; level 15 - The Bank
    +levelExitColour $ff        ; level 16 - The Sixteenth Cavern
    +levelExitColour $0f        ; level 17 - The Warehouse
    +levelExitColour $f0        ; level 18 - Amoebatrons' Revenge
    +levelExitColour $f0        ; level 19 - The Meteor Storm
    +levelExitColour $f0        ; level 20 - The Final Barrier

; ***************************************************************************************
levelExitPositionXArray
    +levelExitPositionX 33        ; level 1 - Central Cavern
    +levelExitPositionX 33        ; level 2 - The Cold Room
    +levelExitPositionX 33        ; level 3 - The Menagerie
    +levelExitPositionX 33        ; level 4 - Abandoned Uranium Workings
    +levelExitPositionX 19        ; level 5 - Eugene's Lair
    +levelExitPositionX 33        ; level 6 - Processing Plant
    +levelExitPositionX 19        ; level 7 - The Vat
    +levelExitPositionX 19        ; level 8 - Miner Willy meets the Kong Beast
    +levelExitPositionX 5         ; level 9 - Wacky Amoebatrons
    +levelExitPositionX 17        ; level 10 - The Endorian Forest
    +levelExitPositionX 5         ; level 11 - Attack of the Mutant Telephones
    +levelExitPositionX 19        ; level 12 - Return of the Alien Kong Beast
    +levelExitPositionX 5         ; level 13 - Ore Refinery
    +levelExitPositionX 19        ; level 14 - Skylab Landing Bay
    +levelExitPositionX 5         ; level 15 - The Bank
    +levelExitPositionX 16        ; level 16 - The Sixteenth Cavern
    +levelExitPositionX 33        ; level 17 - The Warehouse
    +levelExitPositionX 33        ; level 18 - Amoebatrons' Revenge
    +levelExitPositionX 19        ; level 19 - The Meteor Storm
    +levelExitPositionX 33        ; level 20 - The Final Barrier

; ***************************************************************************************
levelExitPositionYArray
    +levelExitPositionY 16        ; level 1 - Central Cavern
    +levelExitPositionY 16        ; level 2 - The Cold Room
    +levelExitPositionY 14        ; level 3 - The Menagerie
    +levelExitPositionY  4        ; level 4 - Abandoned Uranium Workings
    +levelExitPositionY 16        ; level 5 - Eugene's Lair
    +levelExitPositionY  3        ; level 6 - Processing Plant
    +levelExitPositionY 16        ; level 7 - The Vat
    +levelExitPositionY 16        ; level 8 - Miner Willy meets the Kong Beast
    +levelExitPositionY  3        ; level 9 - Wacky Amoebatrons
    +levelExitPositionY 16        ; level 10 - The Endorian Forest
    +levelExitPositionY  4        ; level 11 - Attack of the Mutant Telephones
    +levelExitPositionY 16        ; level 12 - Return of the Alien Kong Beast
    +levelExitPositionY 16        ; level 13 - Ore Refinery
    +levelExitPositionY  3        ; level 14 - Skylab Landing Bay
    +levelExitPositionY  6        ; level 15 - The Bank
    +levelExitPositionY  8        ; level 16 - The Sixteenth Cavern
    +levelExitPositionY  4        ; level 17 - The Warehouse
    +levelExitPositionY  3        ; level 18 - Amoebatrons' Revenge
    +levelExitPositionY  7        ; level 19 - The Meteor Storm
    +levelExitPositionY  4        ; level 20 - The Final Barrier

levelDefinitions
    ; ***********************************************************************************
    ; level 1 - Central Cavern
    !byte $ff, $ff

    ; floors
    +levelStrip 4, 13, 15,      0, 1
    +levelStrip 27, 12, 3,      0, 1
    +levelStrip 28, 10, 2,      0, 1
    +levelStrip 0, 9, 4,        0, 1
    +levelStrip 0, 7, 3,        0, 1
    +levelStrip 0, 5, 14,       0, 1
    +levelStrip 17, 5, 1,       0, 1
    +levelStrip 22, 5, 8,       0, 1

    +levelIncrementType

    ; crumble floors
    +levelStrip 22, 12, 5,      0, 1
    +levelStrip 13, 5, 4,       0, 1
    +levelStrip 18, 5, 4,       0, 1

    +levelIncrementType

    ; walls
    +levelStrip 19, 12, 3,      1, 3
    +levelStrip 16, 8, 3,       1, 3

    +levelIncrementType

    ; conveyor
    +levelStrip 7, 9, 20,       0, 2

    ; ***********************************************************************************
    ; level 2 - The Cold Room
    !byte $ff, $ff

    ; floors
    +levelStrip 13, 12, 4,      0, 1
    +levelStrip 8, 9, 7,        0, 1
    +levelStrip 0, 7, 1,        0, 1
    +levelStrip 0, 5, 19,       0, 1
    +levelStrip 20, 6, 4,       0, 1
    +levelStrip 23, 3, 1,       0, 1

    +levelIncrementType

    ; crumble floors
    +levelStrip 7, 13, 4,       0, 1
    +levelStrip 18, 10, 4,      0, 1
    +levelStrip 20, 3, 3,       0, 1
    +levelStrip 1, 7, 5,        0, 1
    +levelStrip 25, 6, 2,       0, 1
    +levelRect 25, 8, 2, 13,    0, 1

    +levelIncrementType

    ; walls
    +levelStrip 18, 0, 12,      1, 3
    +levelRect 24, 6, 1, 13,    1, 3
    +levelRect 27, 5, 1, 13,    1, 3

    +levelIncrementType

    ; conveyor
    +levelStrip 2, 11, 4,       0, 3

    ; ***********************************************************************************
    ; level 3 - The Menagerie
    !byte $ff, $ff

    ; floors
    +levelStrip  4, 12,  6,     0, 1
    +levelStrip 20, 13, 10,     0, 1
    +levelStrip 13, 11,  5,     0, 1
    +levelStrip 24, 10,  6,     0, 1
    +levelStrip 26,  7,  4,     0, 1
    +levelStrip  0,  7,  6,     0, 1
    +levelStrip  0,  5,  4,     0, 1

    +levelIncrementType

    ; crumble floors
    +levelStrip  4,  5, 26,     0, 1

    +levelSetType 3

    ; conveyor
    +levelStrip 5, 9, 6,        0, 2

    ; ***********************************************************************************
    ; level 4 - Abandoned Uranium Workings
    !byte $ff, $ff

    ; floors
    +levelStrip  5, 12,  2,     0, 3
    +levelStrip  6,  8,  2,     0, 3
    +levelStrip  0,  5,  1,     0, 3
    +levelStrip  6,  5,  1,     0, 3
    +levelStrip 11, 11,  3,     0, 3
    +levelStrip 11,  6,  2,     0, 3
    +levelStrip 16,  5,  1,     0, 3
    +levelStrip 17, 13,  2,     0, 3
    +levelStrip 17,  9,  3,     0, 3
    +levelStrip 18,  3,  6,     0, 3
    +levelStrip 20,  6,  3,     0, 3
    +levelStrip 21, 11,  3,     0, 3
    +levelStrip 25,  8,  3,     0, 3
    +levelStrip 27, 12,  3,     0, 3
    +levelStrip 29, 10,  1,     0, 3
    +levelStrip 26,  4,  4,     0, 3

    +levelIncrementType

    ; crumble floors
    +levelStrip 0, 7, 3,        0, 1

    +levelIncrementType

    ; walls
    +levelStrip 14, 0, 16,      1, 2

    +levelIncrementType

    ; conveyor
    +levelStrip 0, 10, 3,       0, 2

    ; ***********************************************************************************
    ; level 5 - Eugene's Lair
    !byte $ff, $ff

    ; floors
    +levelStrip 0, 13, 2,       0, 1
    +levelStrip 2, 11, 11,      0, 1
    +levelStrip 3, 9, 10,       0, 1
    +levelStrip 0, 5, 13,       0, 1
    +levelStrip 17, 11, 7,      0, 1
    +levelStrip 29, 11, 1,      0, 1
    +levelStrip 21, 5, 6,       0, 1
    +levelStrip 28, 6, 2,       0, 1

    +levelIncrementType

    ; crumble floors
    +levelStrip 0, 11, 2,       0, 1
    +levelStrip 17, 5, 4,       0, 1

    +levelIncrementType

    ; walls
    +levelStrip 7, 15, 16,      1, 3
    +levelStrip 13, 14, 10,     1, 3
    +levelStrip 13, 13, 4,      1, 3
    +levelRect 7, 12, 1, 16,    1, 3

    +levelIncrementType

    ; conveyor
    +levelStrip 17, 8, 10,      0, 3

    ; ***********************************************************************************
    ; level 6 - Processing Plant
    !byte $ff, $ff

    ; floors
    +levelStrip 0, 9, 2,        0, 1
    +levelStrip 2, 6, 2,        0, 1
    +levelStrip 7, 5, 3,        0, 1
    +levelStrip 14, 5, 2,       0, 1
    +levelStrip 6, 10, 19,      0, 1
    +levelStrip 20, 5, 5,       0, 1
    +levelStrip 27, 12, 3,      0, 1
    +levelStrip 21, 13, 2,      0, 1
    +levelStrip 27, 6, 3,       0, 1
    +levelStrip 22, 8, 5,       0, 1

    +levelIncrementType

    ; crumble floors
    +levelStrip 29, 0, 1,       0, 1

    +levelIncrementType

    ; walls
    +levelRect 15, 6, 1, 8,     1, 3
    +levelRect 15, 10, 1, 13,   1, 3

    +levelIncrementType

    ; conveyor
    +levelStrip 2, 13, 4,       0, 2

    ; ***********************************************************************************
    ; level 7 - The Vat
    !byte $ff, $ff

    ; floors
    +levelStrip 8, 13, 3,       0, 3
    +levelStrip 0, 10, 11,      0, 3
    +levelStrip 13, 9, 3,       0, 3
    +levelStrip 0, 8, 1,        0, 3
    +levelStrip 0, 6, 3,        0, 3
    +levelStrip 13, 5, 3,       0, 3
    +levelStrip 14, 3, 2,       0, 3
    +levelStrip 0, 15, 13,      0, 3

    +levelIncrementType

    ; crumble floors
    +levelRect 17, 3, 13, 13,   0, 2

    +levelIncrementType

    ; walls
    +levelRect 16, 3, 1, 13,    3, 1
    +levelStrip 13, 12, 4,      3, 1
    +levelRect 13, 13, 1, 16,   3, 1
    +levelStrip 13, 15, 17,     3, 1
    +levelStrip 13, 0, 17,      3, 1

    +levelIncrementType

    ; conveyor
    +levelStrip 6, 5, 5,        0, 2

    ; ***********************************************************************************
    ; level 8 - Miner Willy meets the Kong Beast
    !byte $ff, $ff

    ; floors
    +levelStrip 3, 12, 2,       0, 1
    +levelStrip 3, 12, 2,       0, 1            ; required - to not screw up the next level?
    +levelStrip 0, 10, 1,       0, 1
    +levelStrip 1, 7, 3,        0, 1
    +levelStrip 0, 5, 3,        0, 1
    +levelStrip 8, 5, 6,        0, 1
    +levelStrip 14, 2, 2,       0, 1
    +levelStrip 8, 11, 2,       0, 1
    +levelStrip 11, 10, 3,      0, 1
    +levelStrip 7, 8, 3,        0, 1
    +levelStrip 17, 5, 2,       0, 1
    +levelStrip 20, 6, 4,       0, 1
    +levelStrip 17, 9, 5,       0, 1
    +levelStrip 17, 13, 2,      0, 1
    +levelStrip 21, 12, 5,      0, 1
    +levelStrip 26, 10, 4,      0, 1
    +levelStrip 26, 7, 1,       0, 1
    +levelStrip 29, 6, 1,       0, 1
    +levelStrip 28, 2, 2,       0, 1

    +levelIncrementType

    ; crumble floors
    +levelStrip 16, 14, 1,      0, 1

    +levelIncrementType

    ; walls
    +levelRect 16, 0, 1, 15,    3, 1
    +levelRect 19, 0, 1, 2,     3, 1
    +levelRect 13, 13, 1, 15,   3, 1

    +levelIncrementType

    ; conveyor
    +levelStrip 10, 13, 3,      0, 2

    ; ***********************************************************************************
    ; level 9 - Wacky Amoebatrons
    !byte $ff, $ff

    ; floors
    +levelStrip 2, 12, 26,      0, 1
    +levelStrip 2, 8, 8,        0, 1
    +levelStrip 0, 5, 28,       0, 1
    +levelStrip 0, 10, 2,       0, 1
    +levelStrip 28, 13, 2,      0, 1
    +levelStrip 28, 7, 2,       0, 1
    +levelStrip 21, 9, 7,       0, 1

    +levelIncrementType

    ; crumble floors
    +levelStrip 2, 0, 1,        0, 1

    +levelIncrementType

    ; walls
    +levelRect 2, 0, 1, 1,      1, 3

    +levelIncrementType

    ; conveyor
    +levelStrip 12, 8, 7,       0, 2

    +levelSetType 4

    ; empty
    +levelRect 4, 4, 2, 14,     0, 3
    +levelRect 10, 4, 2, 14,    0, 3
    +levelRect 19, 4, 2, 14,    0, 3
    +levelRect 24, 4, 2, 14,    0, 3

    +levelSetType 3                 ; back to conveyor [TODO: needed to terminate properly??]

    ; ***********************************************************************************
    ; level 10 - The Endorian Forest
    !byte $ff, $ff

    ; floors
    +levelStrip 0, 13, 3,       0, 1
    +levelStrip 0, 10, 4,       0, 1
    +levelStrip 0, 8, 5,        0, 1
    +levelStrip 0, 6, 4,        0, 1
    +levelStrip 0, 2, 6,        0, 1
    +levelStrip 12, 0, 3,       0, 1
    +levelStrip 7, 5, 1,        0, 1
    +levelStrip 8, 9, 7,        0, 1
    +levelStrip 16, 10, 7,      0, 1
    +levelStrip 16, 7, 7,       0, 1
    +levelStrip 16, 4, 4,       0, 1
    +levelStrip 20, 0, 10,      0, 1
    +levelStrip 26, 2, 4,       0, 1
    +levelStrip 22, 5, 8,       0, 1
    +levelStrip 28, 9, 2,       0, 1
    +levelStrip 27, 13, 3,      0, 1

    +levelIncrementType

    ; crumble floors
    +levelStrip 4, 10, 2,       0, 2
    +levelStrip 8, 5, 7,        0, 2
    +levelStrip 23, 7, 3,       0, 2
    +levelStrip 23, 11, 3,      0, 2

    +levelIncrementType

    ; walls
    +levelRect 15, 0, 1, 12,    1, 2

    +levelIncrementType

    ; conveyor
    +levelStrip 0, 15, 30,      0, 3
    +levelStrip 7, 12, 10,      0, 3

    ; ***********************************************************************************
    ; level 11 - Attack of the Mutant Telephones
    !byte $ff, $ff

    ; floors
    +levelStrip 0, 3, 4,        0, 1
    +levelStrip 4, 5, 6,        0, 1
    +levelStrip 0, 8, 2,        0, 1
    +levelStrip 0, 13, 2,       0, 1
    +levelStrip 27, 12, 3,      0, 1
    +levelStrip 22, 13, 3,      0, 1
    +levelStrip 27, 10, 1,      0, 1
    +levelStrip 28, 8, 2,       0, 1
    +levelStrip 28, 6, 2,       0, 1
    +levelStrip 10, 9, 9,       0, 1
    +levelStrip 14, 5, 10,      0, 1
    +levelStrip 16, 5, 6,       0, 2
    +levelStrip 8, 11, 1,       0, 1

    +levelIncrementType

    ; crumble floors
    +levelStrip 5, 11, 3,       0, 1

    +levelIncrementType

    ; walls
    +levelStrip 0, 0, 5,        1, 3

    +levelIncrementType

    ; conveyor
    +levelStrip 4, 8, 2,        0, 3

    ; ***********************************************************************************
    ; level 12 - Return of the Alien Kong Beast
    !byte $ff, $ff

    ; floors
    +levelStrip 10, 13, 3,      0, 1
    +levelStrip 0, 12, 6,       0, 1
    +levelStrip 5, 10, 1,       0, 1
    +levelStrip 5, 7, 2,        0, 1
    +levelStrip 2, 8, 1,        0, 1
    +levelStrip 0, 5, 3,        0, 1
    +levelStrip 9, 9, 4,        0, 1
    +levelStrip 17, 10, 3,      0, 1
    +levelStrip 24, 11, 2,      0, 1
    +levelStrip 24, 8, 6,       0, 1
    +levelStrip 29, 6, 1,       0, 1
    +levelStrip 23, 5, 2,       0, 1

    +levelIncrementType

    ; crumble floors
    +levelStrip 17, 5, 6,       0, 1
    +levelStrip 8, 5, 5,        0, 1
    +levelStrip 14, 2, 2,       0, 1

    +levelIncrementType

    ; walls
    +levelStrip 16, 0, 1,       1, 2
    +levelStrip 20, 0, 1,       1, 2
    +levelRect 16, 5, 1, 15,    1, 2
    +levelRect 13, 5, 1, 10,    1, 2
    +levelRect 13, 13, 1, 15,   1, 2
    +levelStrip 13, 15, 4,      1, 2

    +levelIncrementType

    ; conveyor
    +levelStrip 17, 13, 11,     0, 3

    ; ***********************************************************************************
    ; level 13 - Ore Refinery
    !byte $ff, $ff

    ; floors
    +levelStrip 0, 15, 30,      0, 1
    +levelStrip 6, 3, 24,       0, 1
    +levelStrip 6, 6, 24,       0, 1
    +levelStrip 6, 12, 24,      0, 1
    +levelStrip 6, 9, 24,       0, 1

    +levelIncrementType

    ; crumble floors
    +levelRect 2, 1, 1, 15,     0, 3

    +levelIncrementType

    ; walls
    +levelStrip 0, 0, 30,       1, 3

    +levelIncrementType

    ; conveyor
    +levelStrip 2, 15, 26,      0, 2

    +levelSetType 4

    ; empty
    +levelStrip 8, 6, 2,        0, 3
    +levelStrip 9, 12, 2,       0, 3
    +levelStrip 21, 6, 2,       0, 3
    +levelStrip 20, 12, 2,      0, 3
    +levelStrip 14, 6, 2,       0, 3
    +levelStrip 14, 12, 2,      0, 3
    +levelStrip 16, 9, 2,       0, 3
    +levelStrip 27, 6, 2,       0, 3
    +levelStrip 26, 12, 2,      0, 3
    +levelStrip 11, 9, 2,       0, 3
    +levelStrip 24, 9, 2,       0, 3
    +levelStrip 24, 3, 2,       0, 3

    +levelSetType 4

    ; ***********************************************************************************
    ; level 14 - Skylab Landing Bay
    !byte $ff, $ff

    ; floors
    +levelStrip 0, 11, 0,       0, 1
    +levelStrip 2, 6, 0,        0, 1
    +levelStrip 4, 9, 0,        0, 1
    +levelStrip 6, 13, 0,       0, 1
    +levelStrip 6, 7, 0,        0, 1
    +levelStrip 8, 11, 0,       0, 1
    +levelStrip 12, 9, 0,       0, 1
    +levelStrip 10, 6, 0,       0, 1
    +levelStrip 14, 5, 0,       0, 1
    +levelStrip 18, 6, 0,       0, 1
    +levelStrip 22, 7, 0,       0, 1
    +levelStrip 20, 9, 0,       0, 1
    +levelStrip 26, 6, 0,       0, 1
    +levelStrip 28, 9, 0,       0, 1
    +levelStrip 24, 11, 0,      0, 1

    +levelSetType 2

    ; wall
    +levelStrip 0, 15, 30,      0, 2

    +levelIncrementType

    ; conveyor
    +levelStrip 14, 11, 6,      0, 2

    ; ***********************************************************************************
    ; level 15 - The Bank
    !byte $ff, $ff

    ; floors
    +levelStrip 0, 10, 2,       0, 1
    +levelStrip 2, 8, 2,        0, 1
    +levelStrip 0, 5, 5,        0, 1
    +levelStrip 4, 12, 3,       0, 1
    +levelStrip 11, 13, 2,      0, 1
    +levelStrip 11, 10, 2,      0, 1
    +levelStrip 11, 7, 2,       0, 1
    +levelStrip 17, 11, 2,      0, 1
    +levelStrip 17, 8, 2,       0, 1
    +levelStrip 23, 6, 2,       0, 1
    +levelStrip 24, 9, 2,       0, 1
    +levelStrip 22, 12, 2,      0, 1
    +levelStrip 23, 3, 5,       0, 1

    +levelIncrementType

    ; crumble floors
    +levelStrip 6, 7, 1,        0, 1

    +levelIncrementType

    ; wall
    +levelStrip 5, 0, 25,       1, 3

    +levelIncrementType

    ; conveyor
    +levelStrip 7, 3, 16,       0, 2

    +levelRect 28, 1, 2, 15,    0, 3
    +levelStrip 7, 3, 16,       0, 2

    ; ***********************************************************************************
    ; level 16 - The Sixteenth Cavern
    !byte $ff, $ff

    ; floors
    +levelStrip  0, 12, 9,      0, 1
    +levelStrip 11, 11, 2,      0, 1
    +levelStrip 0, 5, 1,        0, 1
    +levelStrip 5, 5, 1,        0, 1
    +levelStrip 3, 7, 1,        0, 1
    +levelStrip 19, 13, 1,      0, 1
    +levelStrip 25, 13, 1,      0, 1
    +levelStrip 25, 11, 1,      0, 1
    +levelStrip 24, 7, 6,       0, 1
    +levelStrip 21, 5, 3,       0, 1

    +levelIncrementType

    ; crumble floors
    +levelStrip 0, 9, 2,        0, 1

    +levelIncrementType

    ; wall
    +levelStrip 9, 11, 2,       3, 2
    +levelRect 10, 5, 1, 9,     3, 2
    +levelStrip 13, 5, 1,       3, 2
    +levelStrip 13, 6, 2,       3, 2
    +levelStrip 13, 7, 3,       3, 2
    +levelStrip 13, 8, 4,       3, 2

    +levelIncrementType

    ; conveyor
    +levelStrip 2, 9, 24,       0, 3

    ; ***********************************************************************************
    ; level 17 - The Warehouse
    !byte $ff, $ff

    ; floors
    +levelStrip 26, 14, 4,      0, 1
    +levelStrip 28, 5, 2,       0, 1
    +levelStrip 0, 5, 2,        0, 1
    +levelStrip 0, 15, 30,      0, 1

    +levelIncrementType

    ; crumble floors
    +levelStrip 2, 5, 26,       0, 1
    +levelRect 0, 6, 30, 13,    0, 1

    +levelIncrementType

    ; wall
    +levelStrip 28, 0, 2,       1, 3

    +levelIncrementType

    ; conveyor
    +levelStrip 13, 8, 5,       0, 1

    +levelSetType 4

    ; empty
    +levelRect 2, 8, 2, 13,     0, 3
    +levelRect 9, 5, 2, 13,     0, 3
    +levelRect 18, 5, 2, 10,    0, 3
    +levelRect 26, 5, 2, 13,    0, 3

    +levelSetType 4                     ; [TODO: redundant?]

    ; ***********************************************************************************
    ; level 18 - Amoebatrons' Revenge
    !byte $ff, $ff

    ;  floors
    +levelStrip 0, 15, 30,      0, 1
    +levelStrip 0, 13, 2,       0, 1
    +levelStrip 2, 12, 26,      0, 1
    +levelStrip 2, 9, 7,        0, 1
    +levelStrip 0, 7, 2,        0, 1
    +levelStrip 2, 5, 28,       0, 1
    +levelStrip 10, 8, 18,      0, 1
    +levelStrip 28, 10, 2,      0, 1

    +levelSetType 2

    ; wall
    +levelStrip 27, 0, 1,       1, 3

    +levelSetType 4

    ; empty
    +levelRect 4, 5, 2, 13,     0, 3
    +levelRect 9, 5, 2, 13,     0, 3
    +levelRect 19, 5, 2, 13,    0, 3
    +levelRect 24, 5, 2, 13,    0, 3

    +levelSetType 4                     ; [TODO: redundant?]

    ; ***********************************************************************************
    ; level 19 - The Meteor Storm
    !byte $ff, $ff

    ; floors
    +levelStrip 0, 5, 2,        0, 1
    +levelStrip 2, 8, 3,        0, 1
    +levelStrip 8, 13, 14,      0, 1
    +levelStrip 5, 6, 3,        0, 1
    +levelStrip 7, 10, 4,       0, 1
    +levelStrip 23, 11, 2,      0, 1
    +levelStrip 22, 7, 2,       0, 1
    +levelStrip 26, 5, 4,       0, 1
    +levelStrip 27, 9, 3,       0, 1

    +levelIncrementType ; [redundant]

    +levelSetType 2

    ; wall
    +levelRect 10, 3, 10, 11,   0, 3

    +levelIncrementType

    ; conveyor
    +levelStrip 2, 12, 3,       0, 2

    +levelIncrementType

    ; empty
    +levelRect 10, 4, 10, 6,    0, 3
    +levelRect 10, 8, 10, 10,   0, 3

    +levelSetType 3

    ; ***********************************************************************************
    ; level 20 - The Final Barrier
    !byte $ff, $ff

    ; floors
    +levelStrip 7, 5, 7,        0, 1
    +levelStrip 13, 3, 7,       0, 1
    +levelStrip 0, 8, 2,        0, 1
    +levelStrip 8, 7, 7,        0, 1
    +levelStrip 27, 7, 3,       0, 1
    +levelStrip 16, 7, 4,       0, 1
    +levelStrip 19, 13, 1,      0, 1
    +levelStrip 16, 12, 1,      0, 1
    +levelStrip 22, 13, 1,      0, 1
    +levelStrip 24, 9, 1,       0, 1

    +levelIncrementType

    ; crumble floors
    +levelStrip 0, 9, 1,        0, 1
    +levelStrip 20, 3, 3,       0, 1
    +levelStrip 20, 10, 1,      0, 1
    +levelStrip 23, 13, 2,      0, 1

    +levelIncrementType

    ; wall
    +levelStrip 12, 0, 18,      0, 3
    +levelStrip 23, 3, 5,       0, 3
    +levelStrip 3, 7, 5,        0, 3
    +levelStrip 0, 11, 2,       0, 3
    +levelStrip 0, 12, 11,      0, 3
    +levelStrip 13, 14, 3,      0, 3
    +levelStrip 14, 13, 2,      0, 3
    +levelStrip 15, 12, 1,      0, 3
    +levelRect 15, 7, 1, 10,    0, 3
    +levelStrip 10, 11, 1,      0, 3

    +levelIncrementType

    ; conveyor
    +levelStrip 2, 11, 8,       0, 2
    +levelRect 28, 3, 2, 7,     0, 2
    +levelStrip 2, 11, 8,       0, 2

    ; ***********************************************************************************
    ; terminator
    !byte $ff, $ff, $ff

; ***************************************************************************************
meteorXCellPositions
    !byte 8, 31, 12, 13, 26, 33, 6, 28, 9, 27, 11, 29, 14, 32, 25, 7
meteorLandingYCell
    !byte 6,  3,  4,  8, 11,  3, 3,  5, 6,  5,  4,  9,  8,  3, 11, 6

; ***************************************************************************************
    ; vertical movements at each stage of a jump
jumpMovementArray
    !byte $04, $04, $03, $03, $02, $02, $01, $00, $00, $00, $ff, $fe, $fe, $fd, $fd, $fc, $fc

; ***************************************************************************************
yOffsetToTitle = 11 * 4

roomTitleBackground
    ; draw yellow bar (colour 3)
    !byte 18, 0, 3                          ; GCOL 0, 3
    !byte 25, 4                             ;
    !word 32*4, 400 + yOffsetToTitle        ; MOVE bottom left
    !byte 25, 4                             ;
    !word 1279-4*32, 400 + yOffsetToTitle   ; MOVE bottom right
    !byte 25, $55                           ;
    !word 32*4, 432 + yOffsetToTitle        ; TRI top left
    !byte 25, $55                           ;
    !word 1279-4*32, 432 + yOffsetToTitle   ; TRI top right
    !byte 25, 4                             ;
titleTextStartXLow = *
titleTextStartXHigh = * + 1
    !word 0                                 ; X coordinate for title text
    !word 428 + yOffsetToTitle              ; Y coordinate for title text
    !byte 18, 0, 0                          ; GCOL 0, 0
    !byte 5                                 ; VDU 5
roomTitleBackgroundEnd

; ***************************************************************************************
gameOver
    ; clear play area of the screen
    ldy #>(playAreaEndAddress - screenStartAddress)   ;
    ldx #<(playAreaEndAddress - screenStartAddress)   ; XY = length of area to clear
    jsr clearScreenXY               ;

    lda #black                      ;
    sta playAreaPalette             ;
    sta footerPalette               ;
    lda #white                      ;
    sta playAreaPalette + 1         ;
    lda #magenta                    ;
    sta playAreaPalette + 2         ;
    lda #yellow                     ;
    sta playAreaPalette + 3         ;

    ; copy 32 bytes (4 characters worth) into drawable region at softCharacterDefinitions
    ldx #0                          ; loop counter
-
    lda pedestalSprite,x            ;
    sta softCharacterDefinitions,x  ;
    inx                             ;
    cpx #$40                        ;
    bne -                           ;

    ; For the Master, define the graphics officially
    jsr defineMasterCharacters      ;

    ; draw pedestal
    ldx #0                          ; loop counter
-
    lda pedestalMessage,x           ;
    jsr OSWRCH                      ; [replace with cellPlot?]
    inx                             ;
    cpx #pedestalMessageEnd - pedestalMessage ; loop 12 times
    bne -                           ;

    ; draw willy
    lda #$ff                        ;
    sta spriteColourMask            ;
    lda #<willyRight2               ; }
    sta plotSourceSpriteAddressLow  ; }
    lda #>willyRight2               ; } sprite address = $0580 (address of willy)
    sta plotSourceSpriteAddressHigh ; }

    ldx #78                         ;
    ldy #104                        ;
    lda #3                          ;
    jsr plot                        ; plot willy (on the pedestal) (mode 3)

    ; draw foot
    lda #$0f                        ;
    sta spriteColourMask            ;
    lda #8                          ;
    sta footPositionY               ;
footDescendingLoop
    lda #<footSprite                ; }
    sta plotSourceSpriteAddressLow  ; } set address to foot sprite
    lda #>footSprite                ; }
    sta plotSourceSpriteAddressHigh ; }
    ldx #$4e                        ;
    ldy footPositionY               ;
    lda #3                          ;
    jsr plot                        ; draw foot (mode 3)

    ; delay and play rising sound
    ldx #$00                        ;
    ldy #$40                        ; loop counter
-
    dex                             ;
    bne -                           ; delay
    lda footPositionY               ;
    lsr                             ;
    eor #$3f                        ;
    sta channel2Frequency           ;
    dey                             ;
    bne -                           ; if (not zero) then branch (loop back)

    inc footPositionY               ;
    inc footPositionY               ;
    lda footPositionY               ;
    cmp #106                        ;
    bne footDescendingLoop          ;

    lda #255                        ;
    sta channel2Frequency           ; stop sound
    lda #$9f                        ;
    jsr soundDirect                 ; silence channel 3 sound

    jsr delayAndClearPedestalSprite ;
    jmp showTitleScreen             ;


; ***************************************************************************************
!ifdef debugPixelCollision {
debugX
    !byte 0
}
playerLeftmostPixelOffset
    !byte 0, 1, 0, -1, 1, 2, 3, 2
playerRightmostPixelOffset
    !byte 7, 5, 7, 9, 9, 7, 5, 7


; ***************************************************************************************
checkForCollisions
!ifdef debugPixelCollision {
    jsr getPlayerSourceSpriteAddress    ;
    ldx newPlayerPixelX                 ; have been drawn (which could have erased part of a nearby player)
    ldy newPlayerPixelY                 ;
    lda #2                              ;
    jsr plot                            ; draw player (plot mode 2, erase)

    jsr updateHorizontalGuardians       ;

debugPixelX = * + 1
    lda #$2e                            ;
    sta newPlayerPixelX                 ;
    sta playerPixelX                    ;
debugPixelY = * + 1
    lda #$7f                            ;
    sta newPlayerPixelY                 ;
    sta playerPixelY                    ;

    ldx #keyCodeX                       ; }
    jsr isKeyPressed                    ; } is X pressed
    bne +
    inc debugPixelX
+
    ldx #keyCodeZ                       ; }
    jsr isKeyPressed                    ; } is X pressed
    bne +                               ;
    dec debugPixelX                     ;
+
    ldx #keyCodeForwardSlash            ; }
    jsr isKeyPressed                    ; } is / pressed
    bne +                               ;
    inc debugPixelY                     ;
+
    ldx #keyCodeColon                   ; }
    jsr isKeyPressed                    ; } is : pressed
    bne +                               ;
    dec debugPixelY                     ;
+
}

    jsr getPlayerSourceSpriteAddress    ; This redraws the player after the guardians
    ldx newPlayerPixelX                 ; have been drawn (which could have erased part of a nearby player)
    ldy newPlayerPixelY                 ;
    lda #1                              ;
    jsr plot                            ; draw player (plot mode 1)

    jsr checkForDeath                   ;
    jsr checkForSwitchFlipped           ;
    jsr collideWithVerticalGuardians    ;

collideWithHorizontalGuardians

    ; debug
!ifdef debugPixelCollision {
    lda #$1c                            ;
    sta horizontalGuardianPositions     ;
    lda #13                             ;
    sta horizontalGuardianPositions + 1 ;

    lda #0                              ;
    sta $3280                           ;
}

    jsr calculateCollisionPlayerX       ;
    clc                                 ;
    adc playerLeftmostPixelOffset, x    ;
    sta collisionLimit1                 ;
    clc                                 ;
    adc playerRightmostPixelOffset, x   ;
    sta collisionLimit2                 ;

    ; loop to check each guardian
checkCollision
    ldx #0                              ;
checkCollisionLoop
    lda horizontalGuardianPositions,x   ;
    cmp #$ff                            ;
    beq return8                         ; if (out of guardians) then return
    jsr checkCollisionForOneGuardian    ;
    txa                                 ;
    clc                                 ;
    adc #4                              ;
    tax                                 ;
    jmp checkCollisionLoop              ;

; ***************************************************************************************
calculateCollisionPlayerX
    lda playerPixelX                    ;
    and #3                              ;
    ldx willyAnimationEOR               ;
    cpx #0                              ;
    beq +                               ;
    clc                                 ;
    adc #4                              ;
+
    tax                                 ;
!ifdef debugPixelCollision {
    sta debugX                          ;
}
    lda playerPixelX                    ;
    sec                                 ;
    sbc #20                             ;
    asl                                 ;
    sta collisionPlayerX                ;
    rts                                 ;

; ***************************************************************************************
checkCollisionForOneGuardian
    lda horizontalGuardianPositions + 1,x ; get guardian cell Y
    clc                                 ;
    adc #1                              ;
    asl                                 ;
    asl                                 ;
    asl                                 ;
    sta collisionGuardianY              ;

    lda horizontalGuardianPositions,x   ;
    asl                                 ;
    cmp #0                              ;
    beq +                               ;
    sec                                 ;
    sbc #1                              ;
+
    sta collisionGuardianX              ;
    ; debug
;    jsr debugDrawVerticalLine           ;
;    clc                                 ;
;    adc #11                             ; average guardian width
;    jsr debugDrawVerticalLine           ;
;    sec                                 ;
;    sbc #11                             ;

collisionLimit2 = * + 1
    cmp #$ff                            ;
    bcs return8                         ;
    clc                                 ;
    adc #11                             ; average guardian width
collisionLimit1 = * + 1
    cmp #$ff                            ;
    bcc return8                         ;

possibleCollisionInX
    lda collisionGuardianY              ;
    sec                                 ;
    sbc #16                             ;
    cmp playerPixelY                    ;
    bcc possibleCollisionInY            ; if ((guardianCellY - 1) * 8) < playerY then branch
    rts                                 ;

possibleCollisionInY
    lda horizontalGuardianPositions + 1,x ;
    clc                                 ;
    adc #3                              ;
    asl                                 ;
    asl                                 ;
    asl                                 ;
    sec                                 ;
    sbc #1                              ;
    cmp playerPixelY                    ; if (((guardian cell Y + 3) * 8) - 1) > playerY then branch (collision found)
    bcc return8                         ;

    ldy #7                              ;
-
    lda horizontalToleranceTL,y         ; copy in horizontal tolerances
    sta toleranceTL,y                   ;
    dey                                 ;
    bpl -                               ;

    jmp checkPixelCollision             ;
return8
    rts                                 ;


; ***************************************************************************************
collideWithVerticalGuardians
    lda #0                              ;
    sta collisionFudgeFactor            ;
    lda playerPixelX                    ;
    and #3                              ;
    eor willyAnimationEOR               ;
    cmp #0                              ;
    beq +                               ;
    lda #1                              ;
    sta collisionFudgeFactor            ;
+
    lda currentLevel                    ;
    cmp #5                              ;
    bne notLevel5                       ;

    ; level 5 - Eugene's Lair specific code
    lda eugenePositionY                 ;
    and #$7f                            ;
    sec                                 ;
    sbc #8                              ;
    sta currentVerticalGuardians + 1    ; Y coordinate

    lda #$ff                            ; } only one vertical guardian on level 5 - Eugene's Lair
    sta verticalGuardian2               ; }

    lda #$0f                            ; } column 15
    sta currentVerticalGuardians        ; }

notLevel5
    lda currentLevel                    ;
    cmp #8                              ;
    beq kongSpecifics                   ;
    cmp #12                             ;
    beq kongSpecifics                   ;
    jmp regularLevels                   ;

    ; Kong levels specific code
kongSpecifics
    lda #$ff                            ;
    sta currentVerticalGuardians        ;
    lda $33c0                           ; screen byte where Kong lives
    cmp #0                              ;
    beq regularLevels                   ;
    lda #$0f                            ; }
    sta currentVerticalGuardians        ; } column 15

    lda #$ff                            ; } only one vertical guardian on Kong levels
    sta verticalGuardian2               ; }

    lda #0                              ;
    sta currentVerticalGuardians + 1    ; Y coordinate

regularLevels
    lda #$f1                            ;
    sta largestYExtent                  ;
    lda currentLevel                    ;
    cmp #14                             ;
    bne +                               ;

    ; level 14 - Skylab Landing Bay specific code
    lda #$f1                            ;
    sta largestYExtent                  ; TODO: check this

    ; check for collisions with all vertical guardians
+
    ldx #7                              ;
-
    lda verticalToleranceTL,x           ; copy in vertical guardian tolerances
    sta toleranceTL,x                   ;
    dex                                 ;
    bpl -                               ;

    ldx #0                              ; loop counter
verticalGuardianCollisionLoop
    lda currentVerticalGuardians,x      ;
    cmp #$ff                            ;
    beq return9                         ; if (no vertical guardians) then branch (return)
    jsr checkOneVerticalCollision       ;
    txa                                 ;
    clc                                 ;
    adc #4                              ;
    tax                                 ;
    cpx #16                             ;
    bcs return9                         ;
    jmp verticalGuardianCollisionLoop   ;

; ***************************************************************************************
checkOneVerticalCollision
    lda currentVerticalGuardians,x      ;
    and #$3f                            ;
    clc                                 ;
    adc #5                              ;
    asl                                 ;
    asl                                 ;
    sta tempScreenByte                  ;
    lda playerPixelX                    ;
    clc                                 ;
    adc #4                              ;
    sec                                 ;
tempScreenByte = * + 1
    sbc #$ff                            ; playerX + 4 - (guardianX + 5) * 4
    cmp #0                              ;
    beq checkVerticalCollision          ;
    cmp #7                              ;
    bcc checkVerticalCollision          ;
    sec                                 ;
    sbc collisionFudgeFactor            ; subtract 0 or 1
    cmp #7                              ;
    bcc checkVerticalCollision          ;
    clc                                 ;
    adc collisionFudgeFactor            ; add 0 or 1
    cmp #$fd                            ;
    bcs checkVerticalCollision          ;
    clc                                 ;
    adc collisionFudgeFactor            ; add 0 or 1
    cmp #$fd                            ;
    bcs checkVerticalCollision          ;
return9
    rts                                 ;

; ***************************************************************************************
checkVerticalCollision
    lda currentVerticalGuardians + 1,x  ;
    clc                                 ;
    adc #8                              ;
    sec                                 ;
    sbc playerPixelY                    ;
    cmp #17                             ;
    bcc verticalCheckPixelCollision     ; if ( guardianY + 8 - playerY < 19) then branch
largestYExtent = * + 1
    cmp #$f0                            ; if (guardianY + 8 - playerY > largestYExtent) then branch
    bcs verticalCheckPixelCollision     ;
    rts                                 ;

; ***************************************************************************************
verticalCheckPixelCollision
    stx tempScreenByte                  ; temp store
    jsr calculateCollisionPlayerX       ;
    ldx tempScreenByte                  ; temp store
    lda currentVerticalGuardians,x      ;
    and #$3f                            ;
    sec                                 ;
    sbc #1                              ;
    asl                                 ;
    asl                                 ;
    asl                                 ;
    sta collisionGuardianX              ;
    lda currentVerticalGuardians + 1,x  ;
    clc                                 ;
    adc #8                              ;
    sta collisionGuardianY              ;
    ldx #0                              ;
    jsr checkPixelCollisionX            ;
    ldx tempScreenByte                  ; temp store
    rts                                 ;

; ***************************************************************************************
level19EnergyFieldScreenAddress0 = screenStartAddress + 16 * 15 + $0280 * 4
level19EnergyFieldScreenAddress1 = screenStartAddress + 16 * 15 + $0280 * 8
level19EnergyFieldScreenAddress2 = screenStartAddress + 16 * 24 + $0280 * 4
level19EnergyFieldScreenAddress3 = screenStartAddress + 16 * 24 + $0280 * 8

level20EnergyFieldScreenAddress0 = screenStartAddress + 16 * 20 + $0280 * 10
level20EnergyFieldScreenAddress1 = screenStartAddress + 16 * 28 + $0280 * 1

energyFieldScreenAddressLow
    ; level 19
    !byte <level19EnergyFieldScreenAddress0
    !byte <level19EnergyFieldScreenAddress1
    !byte <level19EnergyFieldScreenAddress2
    !byte <level19EnergyFieldScreenAddress3

    ; level 20
    !byte <level20EnergyFieldScreenAddress0
    !byte <level20EnergyFieldScreenAddress1

energyFieldScreenAddressHigh
    ; level 19
    !byte >level19EnergyFieldScreenAddress0
    !byte >level19EnergyFieldScreenAddress1
    !byte >level19EnergyFieldScreenAddress2
    !byte >level19EnergyFieldScreenAddress3

    ; level 20
    !byte >level20EnergyFieldScreenAddress0
    !byte >level20EnergyFieldScreenAddress1


; ***************************************************************************************
updateEnergyFields
    inc energyFieldTimer                ;
    lda energyFieldTimer                ;
    and #$10                            ;
    beq switchEnergyFieldOff            ;
    lda energyFieldTimer                ;
    and #1                              ;
    asl                                 ;
    asl                                 ;
    asl                                 ;
    asl                                 ;
    sta energyFieldSpriteOffset         ; set first sprite or second sprite (0 or 16)

drawEnergyField
    stx energyFieldLoopIndex            ; set to 3 or 5 for level 19 or 20
    lda #$f0                            ;
    sta plotColourMask                  ;
-
    lda energyFieldSpriteOffset         ;
    clc                                 ;
    adc #<energyFieldSprites            ;
    sta cellPlotSourceSpriteAddressLow  ;
    lda #>energyFieldSprites            ;
    adc #0                              ;
    sta cellPlotSourceSpriteAddressHigh ;

    ldx energyFieldLoopIndex            ;
    lda energyFieldScreenAddressLow, x  ;
    sta cellScreenAddressLow            ;
    lda energyFieldScreenAddressHigh, x ;
    sta cellScreenAddressHigh           ;

    jsr cellPlot                        ;

    lda cellScreenAddressLow            ;
    clc                                 ;
    adc #$80                            ;
    sta cellScreenAddressLow            ;
    lda cellScreenAddressHigh           ;
    adc #2                              ;
    sta cellScreenAddressHigh           ;

    lda cellPlotSourceSpriteAddressLow  ;
    clc                                 ;
    adc #16                             ;
    sta cellPlotSourceSpriteAddressLow  ;
    bcc +                               ;
    inc cellPlotSourceSpriteAddressHigh ;
+
    jsr cellPlot                        ;
    dec energyFieldLoopIndex            ;
    lda energyFieldLoopIndex            ;
    bmi +                               ;
    cmp #3                              ;
    beq +                               ;
    jmp -                               ;
    rts                                 ;

switchEnergyFieldOff
    lda #32                             ;
    sta energyFieldSpriteOffset         ; switch to empty sprites
    lda energyFieldTimer                ;
    and #$0f                            ;
    beq drawEnergyField                 ; if it's the first frame off, erase them
    rts                                 ;

; ***************************************************************************************
updateEugeneFalling
    lda eugeneColourMask                ;
    eor #$0f                            ; swap colours
    sta eugeneColourMask                ;

    cmp #$ff
    beq +
    jsr updateVerticalGuardians         ;
+
    lda #$ff                            ;
    sta spriteColourMask                ;
    rts                                 ;

showScoreAndResetVerticalGuardians
    jsr showScoreLivesAndLevel          ;
    lda #$ff                            ;
    sta currentVerticalGuardians        ;
    rts                                 ;

checkForSwitchFlipped
    lda $332e                           ; screen address that becomes non-zero when the switch is flipped
    cmp #0                              ;
    bne switchFlipped                   ;
    rts                                 ;

switchFlipped
    lda currentLevel                    ;
    cmp #8                              ;
    beq level8SwitchFlipped             ;
    cmp #12                             ;
    bne +                               ;

    ; level 12 switch flipped - Return of the Alien Kong Beast
    lda #$47                            ;
    sta horizontalGuardianPositions + 3 ; change guardian extent
+
    rts                                 ;

level8SwitchFlipped
    lda #$47                            ; change guardian extent
    sta horizontalGuardianPositions + 7 ;
return6
    rts                                 ;

; ***************************************************************************************
updateAirEtc
    lda airRemaining                    ;
    cmp #0                              ;
    beq deathJumper5                    ; if (out of air) then branch (die)

    lda playerPixelY                    ;
    cmp willyHighestPointReachedOnCurrentJump ;
    bcs +                               ;
    sta willyHighestPointReachedOnCurrentJump ;
+
    lda playerPixelY                    ;
    and #7                              ;
    cmp #0                              ;
    beq +                               ;
    lda #0                              ;
    sta willyIsOnGround                 ;
+
    lda playerPixelY                    ;
    and #7                              ;
    cmp willyOffsetWithinCellY          ;
    bne setOffsetYWithinCell            ;
    cmp #0                              ;
    bne setOffsetYWithinCell            ;

    lda willyIsOnGround                 ;
    cmp #0                              ;
    bne setOffsetYWithinCell            ;

    ; land (or die if fallen too far)
    lda #$ff                            ;
    sta willyIsOnGround                 ;
    jsr updateAirAndCheckExit           ;
    jsr drawConveyor                    ;
    lda playerPixelY                    ;
    sec                                 ;
    sbc willyHighestPointReachedOnCurrentJump   ;
    cmp #$28                            ;
    bcc +                               ; if (fall is less than 40 pixels) then branch
    jmp death                           ;

+
    lda playerPixelY                            ;
    sta willyHighestPointReachedOnCurrentJump   ;

setOffsetYWithinCell
    lda playerPixelY                    ;
    and #7                              ;
    sta willyOffsetWithinCellY          ;
    rts                                 ;

; ***************************************************************************************
hitLevel20EnergyField
deathJumper5
    jmp death                           ;

; ***************************************************************************************
checkForDeath
    jsr updateAirEtc                    ;
    lda currentLevel                    ;
    cmp #20                             ;
    bne return6                         ;

    lda energyFieldTimer                ;
    and #$10                            ;
    cmp #0                              ;
    beq +                               ;

    ; check for collision
    ldx #5                              ;
    ldy #3                              ;
    jsr checkForEnergyFieldCollisions   ;
+
    ldx #5                              ;
    jmp updateEnergyFields              ;

    ; ***********************************************************************************
    !macro singleType .count, .spriteOffset {
        !if (.count < 2) {
            !error "Cannot encode less than two keys. If one key is needed, define the second key in the same position as the first"
        }
        !byte ((.count-2) * 64) + (.spriteOffset - 1)
    }

    !macro singlePos .x, .y {
        !if (.x = 15) {
            !if (.y = 15) {
                !error "Cannot encode position at 15, 15 as that code is reserved"
            }
            !if (.y = 14) {
                !error "Cannot encode position at 15, 14 as that code is reserved"
            }
            !if (.y = 13) {
                !error "Cannot encode position at 15, 13 as that code is reserved"
            }
            !if (.y = 12) {
                !error "Cannot encode position at 15, 12 as that code is reserved"
            }
            !if (.y = 11) {
                !error "Cannot encode position at 15, 11 as that code is reserved"
            }
            !if (.y = 10) {
                !error "Cannot encode position at 15, 10 as that code is reserved"
            }
        }
        !byte (.x * 16) + .y
    }

    !macro singleOffsetX15 {
        !byte $fe
    }

    !macro singleNextType {
        !byte $fd
    }

    !macro singleColour1 {
        !byte $fa
    }

    !macro singleColour2 {
        !byte $fb
    }

    !macro singleColour3 {
        !byte $fc
    }

    !macro singleSpider .x, .y, .threadLength {
        !byte (.x * 16) + .y
        !byte .threadLength
    }

    ; ***********************************************************************************
levelSingleItemDefinitions

    ; ***********************************************************************************
    ; level 1 - Central Cavern
    !byte $ff

    +singleType 5, 2        ; 5 keys, spike sprite 2
    +singlePos 8, 0         ; key
    +singlePos 15, 1        ; key
    +singleOffsetX15
    +singlePos 7, 4         ; key
    +singlePos 12, 0        ; key
    +singlePos 13, 6        ; key

    +singlePos 11,12        ; thorn

    +singleOffsetX15
    +singlePos 4, 8         ; thorn
    +singlePos 6, 4         ; thorn
    +singlePos 10, 4        ; thorn

    +singleNextType
    +singlePos 10, 0        ; spike
    +singlePos 15, 0        ; spike

    ; ***********************************************************************************
    ; level 2 - The Cold Room
    !byte $ff

    +singleType 5, 11       ; 5 keys, spike sprite 11
    +singlePos 2, 9         ; key
    +singlePos 6, 1         ; key
    +singleOffsetX15
    +singlePos 7, 1         ; key
    +singlePos 9, 7         ; key
    +singlePos 2, 12        ; key

    +singleNextType
    +singleOffsetX15
    +singleColour2
    +singlePos 13, 1        ; spike

    ; ***********************************************************************************
    ; level 3 - The Menagerie
    !byte $ff

    +singleType 5, 3        ; 5 keys, spike sprite 3
    +singlePos 5, 0         ; key
    +singlePos 14, 0        ; key

    +singleOffsetX15
    +singlePos 6, 0         ; key
    +singlePos 13, 6        ; key
    +singlePos 4, 6         ; key

    +singleNextType
    +singleSpider 0, 8, 3   ; spider
    +singleSpider 9, 0, 0   ; spider

    +singleOffsetX15
    +singleSpider 1, 0, 1   ; spider
    +singleSpider 10, 0, 0  ; spider

    ; ***********************************************************************************
    ; level 4 - Abandoned Uranium Workings
    !byte $ff

    +singleType 5, 12       ; 5 keys, spike sprite 12
    +singlePos 0, 0         ; key
    +singlePos 11, 1        ; key
    +singlePos 15, 6        ; key

    +singleOffsetX15
    +singlePos 8, 1         ; key
    +singlePos 13, 6        ; key

    +singleNextType
    +singlePos 6, 0         ; spike
    +singleOffsetX15
    +singlePos 6, 12        ; spike

    ; ***********************************************************************************
    ; level 5 - Eugene's Lair
    !byte $ff

    +singleType 5, 1        ; 5 keys, spike sprite 1
    +singlePos 6, 12        ; key
    +singlePos 8, 12        ; key
    +singlePos 9, 6         ; key
    +singleOffsetX15
    +singlePos 13, 1        ; key
    +singlePos 12, 7        ; key

    +singlePos 4, 14        ; spike
    +singleOffsetX15
    +singlePos 7, 14        ; spike
    +singlePos 8, 14        ; spike
    +singlePos 4, 7         ; spike
    +singlePos 7, 4         ; spike

    +singleNextType
    +singleOffsetX15
    +singlePos 3, 0         ; alt spike

    ; ***********************************************************************************
    ; level 6 - Processing Plant
    !byte $ff

    +singleType 5, 5        ; 5 keys, spike sprite 5
    +singlePos 0, 10        ; key
    +singlePos 12, 11       ; key
    +singlePos 14, 6        ; key
    +singleOffsetX15
    +singlePos 0, 6         ; key
    +singlePos 13, 7        ; key

    +singlePos 2, 12        ; thorn

    +singleNextType
    +singleOffsetX15
    +singlePos 0, 11        ; cross spike
    +singlePos 4, 4         ; cross spike

    ; ***********************************************************************************
    ; level 7 - The Vat
    !byte $ff

    +singleType 5, 6        ; 5 keys, spike sprite 6
    +singleOffsetX15
    +singlePos 2, 10        ; key
    +singlePos 3, 6         ; key
    +singlePos 10, 7        ; key
    +singlePos 13, 3        ; key
    +singlePos 13, 11       ; key

    +singleNextType
    +singleOffsetX15
    +singleColour3
    +singlePos 6, 12        ; spider (no thread)
    +singlePos 6, 8         ; spider (no thread)
    +singlePos 11, 10       ; spider (no thread)
    +singlePos 11, 5        ; spider (no thread)

    ; ***********************************************************************************
    ; level 8 - Miner Willy meets the Kong Beast
    !byte $ff

    +singleType 4, 1        ; 4 keys, spike sprite 1
    +singlePos 1, 8         ; key
    +singlePos 13, 6        ; key
    +singlePos 11, 2        ; key
    +singleOffsetX15
    +singlePos 12, 13       ; key

    +singleOffsetX15
    +singleColour2
    +singlePos 6, 14        ; thorn

    ; ***********************************************************************************
    ; level 9 - Wacky Amoebatrons
    !byte $ff

    +singleType 2, 1        ; 2 keys [we only want one, but need at least two keys defined]
    +singlePos 15, 1        ; key
    +singlePos 15, 1        ; key [this key just overwrites the first]

    +singleOffsetX15        ; [redundant]

    ; ***********************************************************************************
    ; level 10 - The Endorian Forest
    !byte $ff

    +singleType 5, 7        ; 5 keys, spike sprite 7
    +singlePos 13, 1        ; key
    +singlePos 11, 6        ; key
    +singleOffsetX15
    +singlePos 1, 8         ; key
    +singlePos 4, 2         ; key
    +singlePos 13, 1        ; key

    +singleNextType
    +singlePos 2, 3         ; flower spike
    +singlePos 0, 9         ; flower spike
    +singlePos 9, 0         ; flower spike
    +singleOffsetX15
    +singlePos 1, 0         ; flower spike
    +singlePos 3, 0         ; flower spike
    +singlePos 4, 1         ; flower spike
    +singlePos 6, 11        ; flower spike
    +singlePos 13, 10       ; flower spike

    ; ***********************************************************************************
    ; level 11 - Attack of the Mutant Telephones
    !byte $ff
    +singleType 5, 13       ; 5 keys, spike sprite 13
    +singlePos 0, 4         ; key
    +singleOffsetX15
    +singlePos 2, 6         ; key
    +singlePos 7, 0         ; key
    +singlePos 13, 1        ; key
    +singlePos 13, 13       ; key

    +singleNextType
    +singleColour3
    +singleSpider 11, 10, 2 ; spider, thread length 2
    +singleOffsetX15
    +singleSpider 2, 0, 1   ; spider, thread length 1
    +singleSpider 2, 10, 1  ; spider, thread length 1
    +singleSpider 7, 6, 3   ; spider, thread length 3

    ; ***********************************************************************************
    ; level 12 - Return of the Alien Kong Beast
    !byte $ff

    +singleType 5, 1        ; 5 keys, spike sprite 1
    +singlePos 1, 6         ; key
    +singlePos 14, 3        ; key
    +singlePos 15, 7        ; key

    +singleOffsetX15
    +singlePos 9, 5         ; key
    +singlePos 12, 13       ; key

    +singleColour2
    +singleOffsetX15
    +singlePos 6, 12        ; thorn
    +singlePos 11, 12       ; thorn

    ; ***********************************************************************************
    ; level 13 - Ore Refinery
    !byte $ff

    +singleType 5, 1        ; 5 keys, spike sprite 1
    +singlePos 10, 12       ; keys
    +singlePos 9, 6         ; keys
    +singleOffsetX15
    +singlePos 9, 3         ; keys
    +singlePos 9, 9         ; keys
    +singlePos 2, 9         ; keys
    +singleOffsetX15

    ; ***********************************************************************************
    ; level 14 - Skylab Landing Bay
    !byte $ff
    +singleType 4, 1        ; 4 keys, spike sprite 1

    +singlePos 2, 8         ; key
    +singlePos 15, 7        ; key
    +singleOffsetX15        ;
    +singlePos 6, 2         ; key
    +singlePos 10, 7        ; key
    +singleOffsetX15        ;

    ; ***********************************************************************************
    ; level 15 - The Bank
    !byte $ff
    +singleType 3, 13       ; 3 keys, spike sprite 13

    +singlePos 11, 6        ; key
    +singleOffsetX15        ;
    +singlePos 8, 2         ; key
    +singlePos 9, 14        ; key

    +singleNextType         ;
    +singleSpider 7, 4, 1   ; spider, length 1
    +singleOffsetX15        ;
    +singleSpider 11, 4, 6  ; spider, length 6

    ; ***********************************************************************************
    ; level 16 - The Sixteenth Cavern
    !byte $ff
    +singleType 4, 8        ; 4 keys, spike sprite 8

    +singlePos 0, 0         ; key
    +singlePos 12, 7        ; key
    +singleOffsetX15
    +singlePos 0, 10        ; key
    +singlePos 13, 2        ; key

    +singleNextType
    +singleOffsetX15        ;
    +singleColour2
    +singlePos 6, 14        ; floor spike
    +singlePos 7, 14        ; floor spike
    +singlePos 8, 14        ; floor spike

    ; ***********************************************************************************
    ; level 17 - The Warehouse
    !byte $ff
    +singleType 5, 9        ; 5 keys, spike sprite 9

    +singlePos 0, 9         ; key
    +singlePos 14, 7        ; key
    +singleOffsetX15
    +singlePos 2, 10        ; key
    +singlePos 7, 5         ; key
    +singlePos 9, 11        ; key

    +singlePos 5, 4         ; thorn
    +singlePos 8, 4         ; thorn
    +singlePos 12, 4        ; thorn
    +singlePos 15, 4        ; thorn
    +singleOffsetX15
    +singlePos 5, 4         ; thorn
    +singlePos 7, 4         ; thorn

    +singleColour2
    +singleNextType
    +singlePos 2, 6         ; X spike
    +singlePos 8, 11        ; X spike
    +singleOffsetX15
    +singlePos 5, 10        ; X spike
    +singlePos 9, 7         ; X spike

    ; ***********************************************************************************
    ; level 18 - Amoebatrons' Revenge
    !byte $ff
    +singleType 2, 1        ; 2 keys [only one wanted really, but we must have at least two encoded]
    +singlePos 14, 1        ; key
    +singlePos 14, 1        ; key [overwrites the first key]
    +singleOffsetX15        ;

    ; ***********************************************************************************
    ; level 19 - The Meteor Storm
    !byte $ff
    +singleType 5, 2        ; 5 keys, spike sprite 2
    +singlePos 0, 2         ; key
    +singlePos 12, 8        ; key
    +singleOffsetX15
    +singlePos 13, 1        ; key
    +singlePos 13, 12       ; key
    +singlePos 1, 8         ; key
    +singleOffsetX15        ;

    ; ***********************************************************************************
    ; level 20 - The Final Barrier
    !byte $ff
    +singleType 5, 3        ; 5 keys, spike sprite 3
    +singlePos 8, 8         ; key
    +singleOffsetX15
    +singlePos 0, 13        ; key
    +singlePos 2, 8         ; key
    +singlePos 4, 1         ; key
    +singlePos 13, 11       ; key

    +singlePos 6, 6         ; thorn
    +singleOffsetX15
    +singlePos 0, 6         ; thorn
    +singlePos 2, 14        ; thorn
    +singlePos 4, 14        ; thorn

    +singleNextType
    +singleSpider 4, 0, 2   ; spider, length 2
    +singleOffsetX15        ;
    +singleSpider 11, 8, 3  ; spider, length 3
    !byte $ff               ; terminator

    ; ***********************************************************************************
guardianGraphics
    !byte %...#####            ;   #####  #
    !byte %..###..#            ;  ###  ####
    !byte %...##..#            ;   ##  ####
    !byte %....####            ;    ####  #
    !byte %#..#####            ;#  #####
    !byte %.#.#####            ; # ######
    !byte %########            ;##########
    !byte %.#.####.            ; # ####
    !byte %..#.....
    !byte %###.....
    !byte %###.....
    !byte %..#.....
    !byte %........
    !byte %#.......
    !byte %##......
    !byte %........

    !byte %.....###            ;     #####   #
    !byte %....###.            ;    ###  #####
    !byte %.....##.            ;     ##  #####
    !byte %..#...##            ;  #   ####   #
    !byte %...#.###            ;   # #####
    !byte %...#.###            ;   # ######
    !byte %..######            ;  ##########
    !byte %...#.###            ;   # #######
    !byte %##...#..
    !byte %.#####..
    !byte %.#####..
    !byte %##...#..
    !byte %##......
    !byte %###.....
    !byte %####....
    !byte %####....

    !byte %.......#            ;       #####  #
    !byte %......##            ;      ###  ####
    !byte %.......#            ;       ##  ####
    !byte %........            ;        ####  #
    !byte %.......#            ;       #####
    !byte %....#..#            ;    #  ######
    !byte %.....#.#            ;     # #######
    !byte %....####            ;    #######
    !byte %####..#.
    !byte %#..####.
    !byte %#..####.
    !byte %####..#.
    !byte %####....
    !byte %#####...
    !byte %######..
    !byte %###.....

    !byte %........            ;         ##### #
    !byte %........            ;        ###  ###
    !byte %........            ;         ##  ###
    !byte %........            ;          #### #
    !byte %........            ;         #####
    !byte %........            ;         #######
    !byte %......##            ;      ########
    !byte %........            ;         ###
    !byte %.#####.#
    !byte %###..###
    !byte %.##..###
    !byte %..####.#
    !byte %.#####..
    !byte %.#######
    !byte %######..
    !byte %.###....

    !byte %#..#####            ;#  #######
    !byte %...#####            ;   ######
    !byte %....###.            ;    ###
    !byte %...#####            ;   #####
    !byte %#.###.##            ;# ### ###
    !byte %.###...#            ; ###   ####
    !byte %..#.....            ;  #     ##
    !byte %...#....            ;   #    #
    !byte %##......
    !byte %#.......
    !byte %........
    !byte %........
    !byte %#.......
    !byte %###.....
    !byte %##......
    !byte %#.......

    !byte %...#.###            ;   # #######
    !byte %..#..###            ;  #  ######
    !byte %......##            ;      ###
    !byte %......##            ;      ###
    !byte %.....##.            ;     ## ##
    !byte %.....##.            ;     ## ##
    !byte %...###..            ;   ###    ###
    !byte %.....##.            ;     ##  ##
    !byte %####....
    !byte %###.....
    !byte %#.......
    !byte %#.......
    !byte %##......
    !byte %##......
    !byte %..###...
    !byte %.##.....

    !byte %.....#.#            ;     # #######
    !byte %....#..#            ;    #  ######
    !byte %........            ;        ###
    !byte %........            ;        ###
    !byte %........            ;        ###
    !byte %........            ;        ###
    !byte %........            ;        ###
    !byte %.......#            ;       #####
    !byte %######..
    !byte %#####...
    !byte %###.....
    !byte %###.....
    !byte %###.....
    !byte %###.....
    !byte %###.....
    !byte %####....

    !byte %........            ;         #####
    !byte %........            ;         #######
    !byte %........            ;         ####
    !byte %........            ;          ###
    !byte %........            ;         ## ##
    !byte %........            ;         ## ##
    !byte %.......#            ;       ###   ###
    !byte %........            ;         ## ##
    !byte %.#####..
    !byte %.#######
    !byte %.####...
    !byte %..###...
    !byte %.##.##..
    !byte %.##.##..
    !byte %##...###
    !byte %.##.##..

    !byte %....##..            ;    ##
    !byte %...####.            ;   ####
    !byte %...##.##            ;   ## ##
    !byte %...####.            ;   #### ##
    !byte %..###..#            ;  ###  #
    !byte %..##..#.            ;  ##  #
    !byte %..###.#.            ;  ### #
    !byte %..####.#            ;  #### #
    !byte %........
    !byte %........
    !byte %........
    !byte %##......
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %......##            ;      ##
    !byte %.....###            ;     ####
    !byte %.....##.            ;     ## ##
    !byte %.....###            ;     #### ##
    !byte %....###.            ;    ###  #
    !byte %....##..            ;    ##  #
    !byte %....####            ;    #####
    !byte %....##.#            ;    ## ###
    !byte %........
    !byte %#.......
    !byte %##......
    !byte %#.##....
    !byte %.#......
    !byte %#.......
    !byte %#.......
    !byte %##......

    !byte %........            ;        ##
    !byte %.......#            ;       ####
    !byte %.......#            ;       ## ##
    !byte %.......#            ;       #### ##
    !byte %......##            ;      ###  #
    !byte %......##            ;      ##  #
    !byte %......##            ;      ### #
    !byte %......##            ;      #### #
    !byte %##......
    !byte %###.....
    !byte %#.##....
    !byte %###.##..
    !byte %#..#....
    !byte %..#.....
    !byte %#.#.....
    !byte %##.#....

    !byte %........            ;          ##
    !byte %........            ;         ####
    !byte %........            ;         ## ##
    !byte %........            ;         #### ##
    !byte %........            ;        ###  #
    !byte %........            ;        ##  #
    !byte %........            ;        ### #
    !byte %........            ;        #### #
    !byte %..##....
    !byte %.####...
    !byte %.##.##..
    !byte %.####.##
    !byte %###..#..
    !byte %##..#...
    !byte %###.#...
    !byte %####.#..

    !byte %.##.##.#            ; ## ## #
    !byte %.##.#..#            ; ## #  #
    !byte %.##.#..#            ; ## #  #
    !byte %.##....#            ; ##    #
    !byte %.###...#            ; ###   #
    !byte %#.#####.            ;# #####
    !byte %....#...            ;    #
    !byte %...####.            ;   ####
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %...##.##            ;   ## ## #
    !byte %...##.##            ;   ## ## #
    !byte %...#.##.            ;   # ##  #
    !byte %...##...            ;   ##    #
    !byte %...###..            ;   ###   #
    !byte %..#.####            ;  # #####
    !byte %.....#.#            ;     # # #
    !byte %....####            ;    #####
    !byte %.#......
    !byte %.#......
    !byte %.#......
    !byte %.#......
    !byte %.#......
    !byte %#.......
    !byte %.#......
    !byte %#.......

    !byte %.....##.            ;     ## ## #
    !byte %.....##.            ;     ## #  #
    !byte %.....##.            ;     ## #  #
    !byte %.....##.            ;     ##    #
    !byte %.....###            ;     ###   #
    !byte %....#.##            ;    # ##### #
    !byte %......#.            ;      #  # #
    !byte %.....###            ;     ######
    !byte %##.#....
    !byte %#..#....
    !byte %#..#....
    !byte %...#....
    !byte %...#....
    !byte %###.#...
    !byte %.#.#....
    !byte %###.....

    !byte %.......#            ;       ## ## #
    !byte %.......#            ;       ##  # #
    !byte %.......#            ;       ##  # #
    !byte %.......#            ;       ##    #
    !byte %.......#            ;       ##    #
    !byte %........            ;        #####
    !byte %........            ;         # #  #
    !byte %........            ;        ######
    !byte %#.##.#..
    !byte %#..#.#..
    !byte %#..#.#..
    !byte %#....#..
    !byte %#....#..
    !byte %#####...
    !byte %.#.#..#.
    !byte %######..

    !byte %......##            ;      ##
    !byte %.....##.            ;     ## #
    !byte %.....###            ;     #####
    !byte %......##            ;      ##
    !byte %.......#            ;       ##
    !byte %........            ;        ##
    !byte %#.#####.            ;# ##### ##
    !byte %###...##            ;###   ###
    !byte %........
    !byte %#.......
    !byte %##......
    !byte %........
    !byte %#.......
    !byte %##......
    !byte %##......
    !byte %#.......

    !byte %........            ;        ##
    !byte %.......#            ;       ## #
    !byte %.......#            ;       #####
    !byte %........            ;        ##
    !byte %........            ;         ##
    !byte %........            ;          ##
    !byte %..#.####            ;  # ##### ##
    !byte %..###...            ;  ###   ###
    !byte %##......
    !byte %#.#.....
    !byte %####....
    !byte %##......
    !byte %.##.....
    !byte %..##....
    !byte %#.##....
    !byte %###.....

    !byte %........            ;          ##
    !byte %........            ;         ## #
    !byte %........            ;         ######
    !byte %........            ;          ##
    !byte %........            ;           ##
    !byte %........            ;            ##
    !byte %....#.##            ;    # ##### ##
    !byte %....###.            ;    ###   ###
    !byte %..##....
    !byte %.##.#...
    !byte %.######.
    !byte %..##....
    !byte %...##...
    !byte %....##..
    !byte %###.##..
    !byte %..###...

    !byte %........            ;            ##
    !byte %........            ;           ## #
    !byte %........            ;           #####
    !byte %........            ;        # # ##
    !byte %.......#            ;       # # # ##
    !byte %........            ;        # #   ##
    !byte %......##            ;      ## #    ##
    !byte %......##            ;      ###    ##
    !byte %....##..
    !byte %...##.#.
    !byte %...#####
    !byte %#.#.##..
    !byte %.#.#.##.
    !byte %#.#...##
    !byte %.#....##
    !byte %#....##.

    !byte %.#......            ; #      #
    !byte %#.#.#.#.            ;# # # # #
    !byte %.#######            ; ########
    !byte %..######            ;  ######
    !byte %.....#..            ;     #
    !byte %.....#..            ;     #
    !byte %.....#..            ;     #
    !byte %....#.#.            ;    # #
    !byte %#.......
    !byte %#.......
    !byte %#.......
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %...##...            ;   ##   ##
    !byte %..##....            ;  ##    ##
    !byte %...#.#.#            ;   # # ###
    !byte %....#.#.            ;    # # #
    !byte %...#.#.#            ;   # # #
    !byte %......#.            ;      #
    !byte %.....#.#            ;     # #
    !byte %........            ;
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %#.......
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %.....#..            ;     #     #
    !byte %....#.#.            ;    # # # ##
    !byte %.....###            ;     #######
    !byte %......##            ;      #####
    !byte %........            ;        #
    !byte %.......#            ;       # #
    !byte %........            ;
    !byte %........            ;
    !byte %...#....
    !byte %#.##....
    !byte %####....
    !byte %###.....
    !byte %#.......
    !byte %.#......
    !byte %........
    !byte %........

    !byte %.......#            ;       #    ##
    !byte %......##            ;      ########
    !byte %.......#            ;       #######
    !byte %........            ;        #####
    !byte %........            ;          #
    !byte %........            ;          #
    !byte %........            ;         # #
    !byte %........            ;
    !byte %....##..
    !byte %######..
    !byte %######..
    !byte %#####...
    !byte %..#.....
    !byte %..#.....
    !byte %.#.#....
    !byte %........

    !byte %.....###            ;     ###
    !byte %....#.##            ;    # ###
    !byte %...#..##            ;   #  ####
    !byte %...#..##            ;   #  ####
    !byte %...#..##            ;   #  ####
    !byte %....#.##            ;    # ###
    !byte %.....###            ;     ###
    !byte %.......#            ;       #
    !byte %........
    !byte %#.......
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %#.......
    !byte %........
    !byte %........

    !byte %.......#            ;       ###
    !byte %......#.            ;      # ###
    !byte %.....#.#            ;     # ### #
    !byte %.....#.#            ;     # ### #
    !byte %.....#.#            ;     # ### #
    !byte %......#.            ;      # ###
    !byte %.......#            ;       ###
    !byte %........            ;         #
    !byte %##......
    !byte %###.....
    !byte %##.#....
    !byte %##.#....
    !byte %##.#....
    !byte %###.....
    !byte %##......
    !byte %.#......

    !byte %........            ;         ###
    !byte %........            ;        ### #
    !byte %.......#            ;       ####  #
    !byte %.......#            ;       ####  #
    !byte %.......#            ;       ####  #
    !byte %........            ;        ### #
    !byte %........            ;         ###
    !byte %........            ;           #
    !byte %.###....
    !byte %###.#...
    !byte %###..#..
    !byte %###..#..
    !byte %###..#..
    !byte %###.#...
    !byte %.###....
    !byte %...#....

    !byte %........            ;           ###
    !byte %........            ;          ## ##
    !byte %........            ;         ##   ##
    !byte %........            ;         ##   ##
    !byte %........            ;         ##   ##
    !byte %........            ;          ## ##
    !byte %........            ;           ###
    !byte %........            ;             #
    !byte %...###..
    !byte %..##.##.
    !byte %.##...##
    !byte %.##...##
    !byte %.##...##
    !byte %..##.##.
    !byte %...###..
    !byte %.....#..

    !byte %.....###            ;     ###
    !byte %.....#.#            ;     # #
    !byte %.....###            ;     ###
    !byte %.....###            ;     ####
    !byte %.#..####            ; #  #####
    !byte %.#.#####            ; # #######
    !byte %#######.            ;####### ##
    !byte %..####..            ;  ####   #
    !byte %........
    !byte %........
    !byte %........
    !byte %#.......
    !byte %#.......
    !byte %##......
    !byte %##......
    !byte %.#......

    !byte %.......#            ;       ###
    !byte %.......#            ;       # #
    !byte %.......#            ;       ###
    !byte %.......#            ;       ####
    !byte %..#...##            ;  #   #####
    !byte %..#.####            ;  # ########
    !byte %.#######            ; ######## ##
    !byte %...#####            ;   #####   #
    !byte %##......
    !byte %.#......
    !byte %##......
    !byte %###.....
    !byte %###.....
    !byte %####....
    !byte %#.##....
    !byte %...#....

    !byte %........            ;         ###
    !byte %........            ;         # #
    !byte %........            ;         ###
    !byte %........            ;        #####
    !byte %..#....#            ;  #    ######
    !byte %..#..###            ;  #  #########
    !byte %.#######            ; ########## ##
    !byte %....####            ;    ######   #
    !byte %.###....
    !byte %.#.#....
    !byte %.###....
    !byte %#####...
    !byte %#####...
    !byte %######..
    !byte %###.##..
    !byte %##...#..

    !byte %........            ;           ###
    !byte %........            ;           # #
    !byte %........            ;           ###
    !byte %........            ;           ####
    !byte %....#...            ;    #     #####
    !byte %....#...            ;    #   ########
    !byte %...#####            ;   ########## ##
    !byte %......##            ;      ######   #
    !byte %...###..
    !byte %...#.#..
    !byte %...###..
    !byte %...####.
    !byte %..#####.
    !byte %########
    !byte %#####.##
    !byte %####...#

    !byte %##......            ;##
    !byte %##......            ;##
    !byte %##......            ;##
    !byte %##......            ;##
    !byte %##......            ;##
    !byte %##......            ;##
    !byte %##......            ;##
    !byte %##......            ;##
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %..##....            ;  ##
    !byte %..##....            ;  ##
    !byte %..##....            ;  ##
    !byte %..##....            ;  ##
    !byte %..##....            ;  ##      #
    !byte %..##....            ;  ##    ##
    !byte %..##..##            ;  ##  ##
    !byte %..##.#..            ;  ## #
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %..#.....
    !byte %##......
    !byte %........
    !byte %........

    !byte %...##...            ;   ##
    !byte %...##...            ;   ##
    !byte %...##...            ;   ##     #
    !byte %...##...            ;   ##    #
    !byte %...##...            ;   ##    #
    !byte %...##...            ;   ##   #
    !byte %...##...            ;   ##   #
    !byte %...##..#            ;   ##  #
    !byte %........
    !byte %........
    !byte %..#.....
    !byte %.#......
    !byte %.#......
    !byte %#.......
    !byte %#.......
    !byte %........

    !byte %......##            ;      ##
    !byte %......##            ;      ##
    !byte %......##            ;      ##
    !byte %......##            ;      ##
    !byte %......##            ;      ##      #
    !byte %......##            ;      ##    ##
    !byte %......##            ;      ##  ##
    !byte %......##            ;      ## #
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %......#.
    !byte %....##..
    !byte %..##....
    !byte %.#......

    !byte %##.#####            ;## #######
    !byte %########            ;##########
    !byte %...#####            ;   #######
    !byte %....####            ;    #####
    !byte %.###.###            ; ### ####
    !byte %########            ;########
    !byte %##.#####            ;## #####
    !byte %##.#####            ;## #####
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %#.......
    !byte %#.......
    !byte %........
    !byte %........
    !byte %........

    !byte %..##.###            ;  ## #######
    !byte %..######            ;  ##########
    !byte %.....###            ;     #######
    !byte %......##            ;      #####
    !byte %...###.#            ;   ### ####
    !byte %..######            ;  ########
    !byte %..##.###            ;  ## #####
    !byte %..##.###            ;  ## #####
    !byte %####....
    !byte %####....
    !byte %####....
    !byte %###.....
    !byte %###.....
    !byte %##......
    !byte %##......
    !byte %##......

    !byte %...##.##            ;   ## ########
    !byte %...#####            ;   ###########
    !byte %......##            ;      ########
    !byte %.......#            ;       ######
    !byte %....###.            ;    ### #####
    !byte %...#####            ;   #########
    !byte %...##.##            ;   ## ######
    !byte %...##.##            ;   ## ######
    !byte %######..
    !byte %######..
    !byte %######..
    !byte %#####...
    !byte %#####...
    !byte %####....
    !byte %####....
    !byte %####....

    !byte %......##            ;      ## #######
    !byte %......##            ;      ##########
    !byte %........            ;         #######
    !byte %........            ;          #####
    !byte %.......#            ;       ### ####
    !byte %......##            ;      ########
    !byte %......##            ;      ## #####
    !byte %......##            ;      ## #####
    !byte %.#######
    !byte %########
    !byte %.#######
    !byte %..#####.
    !byte %##.####.
    !byte %######..
    !byte %.#####..
    !byte %.#####..

    !byte %...#####            ;   #####
    !byte %.#######            ; #########
    !byte %.###..##            ; ###  #####
    !byte %####..##            ;####  ###
    !byte %#######.            ;#######
    !byte %#####...            ;#####
    !byte %#######.            ;#######
    !byte %########            ;#########
    !byte %........
    !byte %##......
    !byte %###.....
    !byte %#.......
    !byte %........
    !byte %........
    !byte %........
    !byte %#.......

    !byte %.....###            ;     #####
    !byte %...#####            ;   #########
    !byte %...####.            ;   ####  ###
    !byte %..#####.            ;  #####  ####
    !byte %..######            ;  ###########
    !byte %..#####.            ;  #####
    !byte %..######            ;  ###########
    !byte %..######            ;  ###########
    !byte %##......
    !byte %####....
    !byte %.###....
    !byte %.####...
    !byte %#####...
    !byte %........
    !byte %#####...
    !byte %#####...

    !byte %.......#            ;       #####
    !byte %.....###            ;     #########
    !byte %.....###            ;     ###  #####
    !byte %....####            ;    ####  ###
    !byte %....####            ;    #######
    !byte %....####            ;    #####
    !byte %....####            ;    #######
    !byte %....####            ;    #########
    !byte %####....
    !byte %######..
    !byte %..#####.
    !byte %..###...
    !byte %###.....
    !byte %#.......
    !byte %###.....
    !byte %#####...

    !byte %........            ;         #####
    !byte %.......#            ;       ###  ####
    !byte %.......#            ;       ###  ###
    !byte %......##            ;      ########
    !byte %......##            ;      ######
    !byte %......##            ;      #####
    !byte %......##            ;      ######
    !byte %......##            ;      ########
    !byte %.#####..
    !byte %##..####
    !byte %##..###.
    !byte %######..
    !byte %####....
    !byte %###.....
    !byte %####....
    !byte %######..

    !byte %.#######            ; ##########
    !byte %.#######            ; #########
    !byte %...#####            ;   #####
    !byte %....#.#.            ;    # #
    !byte %....#.#.            ;    # #
    !byte %....#.#.            ;    # #
    !byte %....#.#.            ;    # #
    !byte %...#####            ;   #####
    !byte %###.....
    !byte %##......
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %...#####            ;   #########
    !byte %...#####            ;   #########
    !byte %.....###            ;     #####
    !byte %......#.            ;      # #
    !byte %......#.            ;      # #
    !byte %.....###            ;     #####
    !byte %........            ;
    !byte %........            ;
    !byte %####....
    !byte %####....
    !byte %##......
    !byte %#.......
    !byte %#.......
    !byte %##......
    !byte %........
    !byte %........

    !byte %.....###            ;     ##########
    !byte %.....###            ;     #########
    !byte %.......#            ;       #####
    !byte %.......#            ;       #####
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %#######.
    !byte %######..
    !byte %####....
    !byte %####....
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %.......#            ;       ########
    !byte %.......#            ;       #########
    !byte %........            ;         #####
    !byte %........            ;          # #
    !byte %........            ;          # #
    !byte %........            ;         #####
    !byte %........            ;
    !byte %........            ;
    !byte %#######.
    !byte %########
    !byte %.#####..
    !byte %..#.#...
    !byte %..#.#...
    !byte %.#####..
    !byte %........
    !byte %........

    !byte %...##...            ;   ##
    !byte %...###..            ;   ###
    !byte %....#.#.            ;    # # #
    !byte %....####            ;    #####
    !byte %....##..            ;    ##
    !byte %...###..            ;   ###
    !byte %...####.            ;   ####
    !byte %...###.#            ;   ### #
    !byte %........
    !byte %........
    !byte %#.......
    !byte %#.......
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %........            ;
    !byte %........            ;
    !byte %.....##.            ;     ##
    !byte %.....###            ;     ###
    !byte %......#.            ;      # # #
    !byte %......##            ;      #####
    !byte %......##            ;      ###
    !byte %.....###            ;     ###
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %#.#.....
    !byte %###.....
    !byte %#.......
    !byte %........

    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %.......#            ;       ##
    !byte %.......#            ;       ###
    !byte %........            ;        # # #
    !byte %........            ;        #####
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %#.......
    !byte %##......
    !byte %#.#.#...
    !byte %#####...

    !byte %........            ;
    !byte %........            ;
    !byte %........            ;         ##
    !byte %........            ;         ###
    !byte %........            ;          # # #
    !byte %........            ;          #####
    !byte %........            ;          ###
    !byte %........            ;         ###
    !byte %........
    !byte %........
    !byte %.##.....
    !byte %.###....
    !byte %..#.#.#.
    !byte %..#####.
    !byte %..###...
    !byte %.###....

    !byte %..####..            ;  ####
    !byte %..####..            ;  ####
    !byte %..#####.            ;  #####
    !byte %..#####.            ;  #####
    !byte %.##.###.            ; ## ###
    !byte %.#...#..            ; #   #
    !byte %.#....#.            ; #    #
    !byte %#......#            ;#      #
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %.....###            ;     ####
    !byte %.....###            ;     ### #
    !byte %....####            ;    ####
    !byte %....####            ;    #####
    !byte %....####            ;    #####
    !byte %...##.##            ;   ## ###
    !byte %..##..##            ;  ##  ##
    !byte %.#.....#            ; #     ###
    !byte %#.......
    !byte %.#......
    !byte %........
    !byte %#.......
    !byte %#.......
    !byte %#.......
    !byte %........
    !byte %##......

    !byte %........            ;        ###
    !byte %.......#            ;       ###
    !byte %.......#            ;       ####
    !byte %.......#            ;       ### #
    !byte %......##            ;      ####
    !byte %......##            ;      #####
    !byte %.....###            ;     ######
    !byte %..#####.            ;  ##### #####
    !byte %###.....
    !byte %##......
    !byte %###.....
    !byte %##.#....
    !byte %##......
    !byte %###.....
    !byte %###.....
    !byte %#####...

    !byte %........            ;         ####
    !byte %........            ;         ### #
    !byte %........            ;        ####
    !byte %........            ;        #####
    !byte %.......#            ;       ######
    !byte %.......#            ;       ## ##
    !byte %......##            ;      ##    ##
    !byte %.....#..            ;     #
    !byte %.####...
    !byte %.###.#..
    !byte %####....
    !byte %#####...
    !byte %#####...
    !byte %#.##....
    !byte %....##..
    !byte %........

    !byte %....#...            ;    #
    !byte %.....#.#            ;     # #
    !byte %....#...            ;    #   #
    !byte %..#..#.#            ;  #  # #
    !byte %.#..#...            ; #  #   #
    !byte %..#....#            ;  #    #
    !byte %.#..##..            ; #  ##
    !byte %..##..##            ;  ##  ##
    !byte %........
    !byte %........
    !byte %#.......
    !byte %........
    !byte %#.......
    !byte %........
    !byte %........
    !byte %........

    !byte %......#.            ;      #
    !byte %..#....#            ;  #    #  #
    !byte %...#..#.            ;   #  #  #
    !byte %..#....#            ;  #    #  #
    !byte %...#..#.            ;   #  #  #
    !byte %..#.....            ;  #       #
    !byte %......##            ;      ##
    !byte %....##..            ;    ##  ##
    !byte %........
    !byte %..#.....
    !byte %.#......
    !byte %..#.....
    !byte %.#......
    !byte %..#.....
    !byte %........
    !byte %##......

    !byte %........            ;         #
    !byte %......#.            ;      #   #
    !byte %.....#..            ;     #   #  #
    !byte %......#.            ;      #   #  #
    !byte %.....#..            ;     #   #  #
    !byte %......#.            ;      #      #
    !byte %........            ;        ##  #
    !byte %......##            ;      ##  ##
    !byte %.#......
    !byte %..#.....
    !byte %.#..#...
    !byte %..#..#..
    !byte %.#..#...
    !byte %.....#..
    !byte %##..#...
    !byte %..##....

    !byte %........            ;         #   #
    !byte %.......#            ;       #  #   #
    !byte %......#.            ;      #  #   #
    !byte %.......#            ;       #  #   #
    !byte %......#.            ;      #  #   #
    !byte %.......#            ;       #      #
    !byte %......#.            ;      #   ##
    !byte %........            ;        ##  ##
    !byte %.#...#..
    !byte %..#...#.
    !byte %.#...#..
    !byte %..#...#.
    !byte %.#...#..
    !byte %......#.
    !byte %..##....
    !byte %##..##..

    !byte %.#...#..            ; #   #  #
    !byte %.#...#..            ; #   #  #
    !byte %#...#...            ;#   #    #
    !byte %#....#..            ;#    #   #
    !byte %.#..#...            ; #  #   #
    !byte %.#..#...            ; #  #   #
    !byte %..##..##            ;  ##  ##
    !byte %....##..            ;    ##
    !byte %#.......
    !byte %#.......
    !byte %.#......
    !byte %.#......
    !byte %#.......
    !byte %#.......
    !byte %........
    !byte %........

    !byte %...#....            ;   #      #
    !byte %...#....            ;   #     ##
    !byte %..#...#.            ;  #   # #  #
    !byte %..#..#.#            ;  #  # #   #
    !byte %...##...            ;   ##     #
    !byte %...#....            ;   #      #
    !byte %....##..            ;    ##  ##
    !byte %......##            ;      ##
    !byte %..#.....
    !byte %.##.....
    !byte %#..#....
    !byte %...#....
    !byte %..#.....
    !byte %..#.....
    !byte %##......
    !byte %........

    !byte %.....#..            ;     #      #
    !byte %.....#..            ;     #      #
    !byte %....#.##            ;    # ## #   #
    !byte %....#...            ;    #   # ## #
    !byte %.....#..            ;     #      #
    !byte %.....#..            ;     #      #
    !byte %......##            ;      ##  ##
    !byte %........            ;        ##
    !byte %....#...
    !byte %....#...
    !byte %.#...#..
    !byte %#.##.#..
    !byte %....#...
    !byte %....#...
    !byte %..##....
    !byte %##......

    !byte %.......#            ;       # #    #
    !byte %.......#            ;       #  #   #
    !byte %......#.            ;      #    #   #
    !byte %......#.            ;      #   #    #
    !byte %.......#            ;       #   #  #
    !byte %.......#            ;       #    # #
    !byte %........            ;        ##  ##
    !byte %........            ;          ##
    !byte %.#....#.
    !byte %..#...#.
    !byte %...#...#
    !byte %..#....#
    !byte %...#..#.
    !byte %....#.#.
    !byte %##..##..
    !byte %..##....

    !byte %....##..            ;    ##
    !byte %....##..            ;    ##
    !byte %....##..            ;    ##
    !byte %....##..            ;    ##
    !byte %....##..            ;    ##
    !byte %....##..            ;    ##
    !byte %....##..            ;    ##
    !byte %....##..            ;    ##
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %......##            ;      ##
    !byte %......##            ;      ##
    !byte %......##            ;      ##
    !byte %......##            ;      ##
    !byte %......##            ;      ##
    !byte %......##            ;      ##
    !byte %......##            ;      ##
    !byte %......##            ;      ##
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %........            ;        ##
    !byte %........            ;        ##
    !byte %........            ;        ##
    !byte %........            ;        ##
    !byte %........            ;        ##
    !byte %........            ;        ##
    !byte %........            ;        ##
    !byte %........            ;        ##
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %##......

    !byte %........            ;          ##
    !byte %........            ;          ##
    !byte %........            ;          ##
    !byte %........            ;          ##
    !byte %........            ;          ##
    !byte %........            ;          ##
    !byte %........            ;          ##
    !byte %........            ;          ##
    !byte %..##....
    !byte %..##....
    !byte %..##....
    !byte %..##....
    !byte %..##....
    !byte %..##....
    !byte %..##....
    !byte %..##....

    !byte %....##..            ;    ##
    !byte %....##..            ;    ##
    !byte %########            ;##########
    !byte %....##..            ;    ##
    !byte %.##....#            ; ##    ##
    !byte %##.#..#.            ;## #  # ##
    !byte %#.##..##            ;# ##  ## #
    !byte %.##....#            ; ##    ##
    !byte %........
    !byte %........
    !byte %##......
    !byte %........
    !byte %#.......
    !byte %##......
    !byte %.#......
    !byte %#.......

    !byte %......##            ;      ##
    !byte %......##            ;      ##
    !byte %..######            ;  ##########
    !byte %......##            ;      ##
    !byte %...##...            ;   ##    ##
    !byte %..#..#..            ;  #  #  ## #
    !byte %..####..            ;  ####  ## #
    !byte %...##...            ;   ##    ##
    !byte %........
    !byte %........
    !byte %####....
    !byte %........
    !byte %.##.....
    !byte %##.#....
    !byte %##.#....
    !byte %.##.....

    !byte %........            ;        ##
    !byte %........            ;        ##
    !byte %....####            ;    ##########
    !byte %........            ;        ##
    !byte %.....##.            ;     ##    ##
    !byte %....#.##            ;    # ##  ## #
    !byte %....##.#            ;    ## #  # ##
    !byte %.....##.            ;     ##    ##
    !byte %##......
    !byte %##......
    !byte %######..
    !byte %##......
    !byte %...##...
    !byte %..##.#..
    !byte %..#.##..
    !byte %...##...

    !byte %........            ;          ##
    !byte %........            ;          ##
    !byte %......##            ;      ##########
    !byte %........            ;          ##
    !byte %.......#            ;       ##    ##
    !byte %......#.            ;      #  #  ## #
    !byte %......##            ;      ####  ## #
    !byte %.......#            ;       ##    ##
    !byte %..##....
    !byte %..##....
    !byte %########
    !byte %..##....
    !byte %#....##.
    !byte %.#..##.#
    !byte %##..##.#
    !byte %#....##.

    !byte %.###....            ; ###
    !byte %.#.#....            ; # #
    !byte %.#####..            ; #####
    !byte %..##.#..            ;  ## #
    !byte %..#####.            ;  #####
    !byte %..#####.            ;  #####
    !byte %...##...            ;   ##
    !byte %..####..            ;  ####
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %...###..            ;   ###
    !byte %...#.#..            ;   # #
    !byte %...#####            ;   #####
    !byte %....##.#            ;    ## #
    !byte %....####            ;    #####
    !byte %....####            ;    #####
    !byte %.....##.            ;     ##
    !byte %....####            ;    ####
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %#.......
    !byte %#.......
    !byte %........
    !byte %........

    !byte %.....###            ;     ###
    !byte %.....#.#            ;     # #
    !byte %.....###            ;     #####
    !byte %......##            ;      ## #
    !byte %......##            ;      #####
    !byte %......##            ;      #####
    !byte %.......#            ;       ##
    !byte %......##            ;      ####
    !byte %........
    !byte %........
    !byte %##......
    !byte %.#......
    !byte %###.....
    !byte %###.....
    !byte %#.......
    !byte %##......

    !byte %.......#            ;       ###
    !byte %.......#            ;       # #
    !byte %.......#            ;       #####
    !byte %........            ;        ## #
    !byte %........            ;        #####
    !byte %........            ;        #####
    !byte %........            ;         ##
    !byte %........            ;        ####
    !byte %##......
    !byte %.#......
    !byte %####....
    !byte %##.#....
    !byte %#####...
    !byte %#####...
    !byte %.##.....
    !byte %####....

    !byte %.######.            ; ######
    !byte %.######.            ; ######
    !byte %####.###            ;#### ###
    !byte %#####.##            ;##### ##
    !byte %..####..            ;  ####
    !byte %.###.##.            ; ### ##
    !byte %.##.###.            ; ## ###
    !byte %.###.###            ; ### ###
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %...##.##            ;   ## ###
    !byte %...##.##            ;   ## ###
    !byte %...##.##            ;   ## ###
    !byte %...###.#            ;   ### ##
    !byte %....####            ;    ####
    !byte %.....##.            ;     ##
    !byte %.....##.            ;     ##
    !byte %.....###            ;     ###
    !byte %#.......
    !byte %#.......
    !byte %#.......
    !byte %#.......
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %.....###            ;     ######
    !byte %.....###            ;     ######
    !byte %....####            ;    #### ###
    !byte %....####            ;    ##### ##
    !byte %......##            ;      ####
    !byte %.....###            ;     ### ##
    !byte %.....##.            ;     ## ###
    !byte %.....###            ;     ### ###
    !byte %###.....
    !byte %###.....
    !byte %.###....
    !byte %#.##....
    !byte %##......
    !byte %.##.....
    !byte %###.....
    !byte %.###....

    !byte %.......#            ;       ######
    !byte %......##            ;      ########
    !byte %.....###            ;     ##########
    !byte %.....##.            ;     ## #### ##
    !byte %........            ;        #####
    !byte %.......#            ;       ### ## #
    !byte %......##            ;      ##    ###
    !byte %......##            ;      ###    #
    !byte %#####...
    !byte %######..
    !byte %#######.
    !byte %####.##.
    !byte %#####...
    !byte %##.##.#.
    !byte %....###.
    !byte %#....#..

    !byte %....##..            ;    ##
    !byte %...#.##.            ;   # ##
    !byte %..#.##.#            ;  # ## #
    !byte %.#..##..            ; #  ##  #
    !byte %#...##..            ;#   ##   #
    !byte %#...##..            ;#   ##   #
    !byte %.#..##..            ; #  ##  #
    !byte %..#.##.#            ;  # ## #
    !byte %........
    !byte %........
    !byte %........
    !byte %#.......
    !byte %.#......
    !byte %.#......
    !byte %#.......
    !byte %........

    !byte %......##            ;      ##
    !byte %......##            ;      ##
    !byte %.....#.#            ;     # ##
    !byte %.....###            ;     ####
    !byte %....#.##            ;    # ## #
    !byte %....#.##            ;    # ## #
    !byte %.....###            ;     ####
    !byte %.....#.#            ;     # ##
    !byte %........
    !byte %........
    !byte %#.......
    !byte %#.......
    !byte %.#......
    !byte %.#......
    !byte %#.......
    !byte %#.......

    !byte %........            ;        ##
    !byte %........            ;        ##
    !byte %........            ;        ##
    !byte %........            ;        ##
    !byte %........            ;        #
    !byte %........            ;        #
    !byte %........            ;        ##
    !byte %........            ;        ##
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %#.......
    !byte %#.......
    !byte %##......
    !byte %##......

    !byte %........            ;          ##
    !byte %........            ;         ## #
    !byte %........            ;        # ## #
    !byte %........            ;        # ## #
    !byte %.......#            ;       #  ##  #
    !byte %.......#            ;       #  ##  #
    !byte %........            ;        # ## #
    !byte %........            ;        # ## #
    !byte %..##....
    !byte %.##.#...
    !byte %#.##.#..
    !byte %#.##.#..
    !byte %..##..#.
    !byte %..##..#.
    !byte %#.##.#..
    !byte %#.##.#..

    !byte %...#.##.            ;   # ##
    !byte %....##..            ;    ##
    !byte %..##.###            ;  ## ###
    !byte %.#..##..            ; #  ##
    !byte %.#######            ; ##########
    !byte %.#######            ; ##########
    !byte %..#.....            ;  #      #
    !byte %...#.###            ;   # ###
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %###.....
    !byte %###.....
    !byte %.#......
    !byte %........

    !byte %......##            ;      ##
    !byte %......##            ;      ##
    !byte %....###.            ;    ### ##
    !byte %......##            ;      ##  #
    !byte %..######            ;  #########
    !byte %..######            ;  ##########
    !byte %...#....            ;   #      #
    !byte %.....###            ;     ### #
    !byte %........
    !byte %........
    !byte %##......
    !byte %..#.....
    !byte %###.....
    !byte %####....
    !byte %..#.....
    !byte %.#......

    !byte %........            ;        ##
    !byte %........            ;        ##
    !byte %.......#            ;       ### #
    !byte %.....#..            ;     #  ##  #
    !byte %....####            ;    ##########
    !byte %....####            ;    #########
    !byte %........            ;            #
    !byte %......##            ;      ### ##
    !byte %##......
    !byte %##......
    !byte %##.#....
    !byte %##..#...
    !byte %######..
    !byte %#####...
    !byte %....#...
    !byte %#.##....

    !byte %........            ;         ## #
    !byte %........            ;          ##
    !byte %........            ;        # ###
    !byte %.......#            ;       #  ##  #
    !byte %......##            ;      ##########
    !byte %.......#            ;       #########
    !byte %.......#            ;       #
    !byte %........            ;        ## ###
    !byte %.##.#...
    !byte %..##....
    !byte %#.###...
    !byte %..##..#.
    !byte %########
    !byte %########
    !byte %........
    !byte %##.###..

    !byte %.##....#            ; ##    ##
    !byte %#.##..#.            ;# ##  #  #
    !byte %#.##..##            ;# ##  ####
    !byte %.##....#            ; ##    ##
    !byte %....##..            ;    ##
    !byte %########            ;##########
    !byte %.#.#..#.            ; # #  # #
    !byte %...#..#.            ;   #  #
    !byte %#.......
    !byte %.#......
    !byte %##......
    !byte %#.......
    !byte %........
    !byte %##......
    !byte %#.......
    !byte %........

    !byte %...##...            ;   ##    ##
    !byte %..#..#..            ;  #  #  ## #
    !byte %..####..            ;  ####  ## #
    !byte %...##...            ;   ##    ##
    !byte %......##            ;      ##
    !byte %..######            ;  ##########
    !byte %...#.#..            ;   # #  # #
    !byte %.....#..            ;     #  #
    !byte %.##.....
    !byte %##.#....
    !byte %##.#....
    !byte %.##.....
    !byte %........
    !byte %####....
    !byte %#.#.....
    !byte %#.......

    !byte %.....##.            ;     ##    ##
    !byte %....##.#            ;    ## #  ####
    !byte %....##.#            ;    ## #  #  #
    !byte %.....##.            ;     ##    ##
    !byte %........            ;        ##
    !byte %....####            ;    ##########
    !byte %.....#.#            ;     # #  # #
    !byte %.......#            ;       #  #
    !byte %...##...
    !byte %..####..
    !byte %..#..#..
    !byte %...##...
    !byte %##......
    !byte %######..
    !byte %..#.#...
    !byte %..#.....

    !byte %.......#            ;       ##    ##
    !byte %......##            ;      ####  # ##
    !byte %......#.            ;      #  #  # ##
    !byte %.......#            ;       ##    ##
    !byte %........            ;          ##
    !byte %......##            ;      ##########
    !byte %.......#            ;       # #  # #
    !byte %........            ;         #  #
    !byte %#....##.
    !byte %##..#.##
    !byte %.#..#.##
    !byte %#....##.
    !byte %..##....
    !byte %########
    !byte %.#..#.#.
    !byte %.#..#...

    !byte %...#..#.            ;   #  #
    !byte %...####.            ;   ####
    !byte %....##..            ;    ##
    !byte %....##..            ;    ##
    !byte %....##..            ;    ##
    !byte %....##..            ;    ##
    !byte %...####.            ;   ####
    !byte %..######            ;  ######
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %.....#..            ;     #  #
    !byte %.....###            ;     ####
    !byte %......##            ;      ##
    !byte %......##            ;      ##
    !byte %.....###            ;     ####
    !byte %....####            ;    ######
    !byte %........            ;
    !byte %........            ;
    !byte %#.......
    !byte %#.......
    !byte %........
    !byte %........
    !byte %#.......
    !byte %##......
    !byte %........
    !byte %........

    !byte %.......#            ;       #  #
    !byte %.......#            ;       ####
    !byte %.......#            ;       ####
    !byte %......##            ;      ######
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %..#.....
    !byte %###.....
    !byte %###.....
    !byte %####....
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %........            ;         #  #
    !byte %........            ;         ####
    !byte %........            ;          ##
    !byte %........            ;          ##
    !byte %........            ;         ####
    !byte %........            ;        ######
    !byte %........            ;
    !byte %........            ;
    !byte %.#..#...
    !byte %.####...
    !byte %..##....
    !byte %..##....
    !byte %.####...
    !byte %######..
    !byte %........
    !byte %........

    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %..######            ;  ##########
    !byte %..#.....            ;  #      ###
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %####....
    !byte %.###....

    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %....####            ;    ##########
    !byte %....#...            ;    #      ###
    !byte %....####            ;    ##########
    !byte %....#...            ;    #     #  #
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %######..
    !byte %...###..
    !byte %######..
    !byte %..#..#..

    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %......##            ;      ##########
    !byte %......#.            ;      #      ###
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %########
    !byte %.....###

    !byte %........            ;
    !byte %........            ;
    !byte %########            ;##########
    !byte %#......#            ;#      ###
    !byte %########            ;##########
    !byte %#.....#.            ;#     #  #
    !byte %#######.            ;#######  #
    !byte %########            ;##########
    !byte %........
    !byte %........
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %.#......
    !byte %.#......
    !byte %##......

    !byte %..######            ;  ##########
    !byte %..#.....            ;  #     #  #
    !byte %..######            ;  #######  #
    !byte %..######            ;  ##########
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %####....
    !byte %#..#....
    !byte %#..#....
    !byte %####....
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %....####            ;    #######  #
    !byte %....####            ;    ##########
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %###..#..
    !byte %######..
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %......##            ;      ##########
    !byte %......#.            ;      #     #  #
    !byte %......##            ;      #######  #
    !byte %......##            ;      ##########
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %########
    !byte %....#..#
    !byte %#####..#
    !byte %########
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %........            ;
    !byte %....#...            ;    #
    !byte %...#.#..            ;   # #
    !byte %..#.#.#.            ;  # # #
    !byte %.#.#.#.#            ; # # # #
    !byte %.#..#.#.            ; #  # #
    !byte %#....#..            ;#    #
    !byte %#.......            ;#       ##
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %##......

    !byte %..#.#.#.            ;  # # #
    !byte %...#.#.#            ;   # # #
    !byte %..#.#.#.            ;  # # #
    !byte %...#.#.#            ;   # # #
    !byte %..#.....            ;  #
    !byte %..#.....            ;  #
    !byte %..#.....            ;  #
    !byte %..#.....            ;  #        ##
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %...##...

    !byte %........            ;
    !byte %...#....            ;   #
    !byte %..#.#...            ;  # #
    !byte %.#.#.#..            ; # # #
    !byte %#.#.#.#.            ;# # # #
    !byte %.#.#...#            ; # #   #
    !byte %..#....#            ;  #    #
    !byte %.......#            ;       #    ##
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %....##..

    !byte %...#.#.#            ;   # # # #
    !byte %..#.#.#.            ;  # # # #
    !byte %...#.#.#            ;   # # # #
    !byte %..#.#.#.            ;  # # # #
    !byte %........            ;         #
    !byte %........            ;         #
    !byte %........            ;         #
    !byte %........            ;         #    ##
    !byte %.#......
    !byte %#.......
    !byte %.#......
    !byte %#.......
    !byte %.#......
    !byte %.#......
    !byte %.#......
    !byte %.#....##

    !byte %#.......            ;#       ##
    !byte %.#.....#            ; #     #
    !byte %.#######            ; ########
    !byte %..######            ;  ########
    !byte %...#####            ;   ######
    !byte %....####            ;    ####
    !byte %....#.#.            ;    # # #
    !byte %...#..#.            ;   #  #  #
    !byte %##......
    !byte %........
    !byte %#.......
    !byte %##......
    !byte %#.......
    !byte %........
    !byte %#.......
    !byte %.#......

    !byte %..#.....            ;  #        ##
    !byte %...#....            ;   #      #
    !byte %...#####            ;   #########
    !byte %....####            ;    #########
    !byte %.....###            ;     #######
    !byte %......##            ;      #####
    !byte %......#.            ;      # #  #
    !byte %.....#..            ;     #  #   #
    !byte %...##...
    !byte %..#.....
    !byte %####....
    !byte %#####...
    !byte %####....
    !byte %###.....
    !byte %#..#....
    !byte %#...#...

    !byte %......#.            ;      #     ##
    !byte %......#.            ;      #    #
    !byte %......##            ;      #######
    !byte %......##            ;      ########
    !byte %.......#            ;       ######
    !byte %........            ;        ####
    !byte %........            ;        # # #
    !byte %.......#            ;       #  #  #
    !byte %....##..
    !byte %...#....
    !byte %#####...
    !byte %######..
    !byte %#####...
    !byte %####....
    !byte %#.#.#...
    !byte %..#..#..

    !byte %........            ;        #     ##
    !byte %........            ;        #    #
    !byte %........            ;        #######
    !byte %........            ;        ########
    !byte %........            ;         ######
    !byte %........            ;          ####
    !byte %........            ;          # # #
    !byte %........            ;         #  #  #
    !byte %#.....##
    !byte %#....#..
    !byte %#######.
    !byte %########
    !byte %.######.
    !byte %..####..
    !byte %..#.#.#.
    !byte %.#..#..#

    !byte %.######.            ; ######
    !byte %#..##..#            ;#  ##  #
    !byte %########            ;########
    !byte %##.##.##            ;## ## ##
    !byte %###..###            ;###  ###
    !byte %.######.            ; ######
    !byte %..#..#..            ;  #  #
    !byte %..#..#..            ;  #  #
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %........            ;
    !byte %....####            ;    ######
    !byte %...#..##            ;   #  ##  #
    !byte %...#####            ;   ########
    !byte %...##.##            ;   ## ## ##
    !byte %...###..            ;   ###  ###
    !byte %....####            ;    ######
    !byte %....#...            ;    #    #
    !byte %........
    !byte %##......
    !byte %..#.....
    !byte %###.....
    !byte %.##.....
    !byte %###.....
    !byte %##......
    !byte %.#......

    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %.....###            ;     ######
    !byte %....#..#            ;    #  ##  #
    !byte %....####            ;    ########
    !byte %....##.#            ;    ## ## ##
    !byte %....###.            ;    ###  ###
    !byte %........
    !byte %........
    !byte %........
    !byte %###.....
    !byte %#..#....
    !byte %####....
    !byte %#.##....
    !byte %.###....

    !byte %........            ;
    !byte %.......#            ;       ######
    !byte %......#.            ;      #  ##  #
    !byte %......##            ;      ########
    !byte %......##            ;      ## ## ##
    !byte %......##            ;      ###  ###
    !byte %.......#            ;       ######
    !byte %.......#            ;       #    #
    !byte %........
    !byte %#####...
    !byte %.##..#..
    !byte %######..
    !byte %.##.##..
    !byte %#..###..
    !byte %#####...
    !byte %....#...

    !byte %..#..#..            ;  #  #
    !byte %.#....#.            ; #    #
    !byte %.#....#.            ; #    #
    !byte %.#....#.            ; #    #
    !byte %#......#            ;#      #
    !byte %#......#            ;#      #
    !byte %##....##            ;##    ##
    !byte %##....##            ;##    ##
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %...#....            ;   #      #
    !byte %...#....            ;   #      #
    !byte %..#.....            ;  #        #
    !byte %..#.....            ;  #        #
    !byte %.#......            ; #          #
    !byte %.#......            ; #         ##
    !byte %.##.....            ; ##        ##
    !byte %.##.....            ; ##
    !byte %..#.....
    !byte %..#.....
    !byte %...#....
    !byte %...#....
    !byte %....#...
    !byte %...##...
    !byte %...##...
    !byte %........

    !byte %.....###            ;     ######
    !byte %....#...            ;    #      #
    !byte %...#....            ;   #        #
    !byte %..#.....            ;  #          #
    !byte %.#......            ; #            #
    !byte %#.......            ;#              #
    !byte %##......            ;##            ##
    !byte %##......            ;##            ##
    !byte %###.....
    !byte %...#....
    !byte %....#...
    !byte %.....#..
    !byte %......#.
    !byte %.......#
    !byte %......##
    !byte %......##

    !byte %......#.            ;      #      #
    !byte %......#.            ;      #      #
    !byte %.....#..            ;     #        #
    !byte %.....#..            ;     #        #
    !byte %....#...            ;    #          #
    !byte %....##..            ;    ##         #
    !byte %....##..            ;    ##        ##
    !byte %........            ;              ##
    !byte %.....#..
    !byte %.....#..
    !byte %......#.
    !byte %......#.
    !byte %.......#
    !byte %.......#
    !byte %......##
    !byte %......##

    !byte %.....##.            ;     ##
    !byte %....##..            ;    ##
    !byte %...##...            ;   ##
    !byte %..###...            ;  ###
    !byte %.###.#..            ; ### #
    !byte %##..#.#.            ;##  # #  #
    !byte %#....#.#            ;#    # ####
    !byte %......##            ;      #####
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %.#......
    !byte %###.....
    !byte %###.....

    !byte %.......#            ;       ##
    !byte %......##            ;      ##
    !byte %.....##.            ;     ##
    !byte %....###.            ;    ###
    !byte %...###.#            ;   ### #
    !byte %..##..#.            ;  ##  # # #
    !byte %..#....#            ;  #    # ###
    !byte %........            ;        ####
    !byte %#.......
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %#.#.....
    !byte %.###....
    !byte %####....

    !byte %........            ;          ##
    !byte %........            ;         ##
    !byte %........            ;        ##
    !byte %.......#            ;       ###
    !byte %......##            ;      ### #
    !byte %.....##.            ;     ##  # # #
    !byte %.....#..            ;     #    # ###
    !byte %........            ;           ####
    !byte %..##....
    !byte %.##.....
    !byte %##......
    !byte %##......
    !byte %#.#.....
    !byte %.#.#.#..
    !byte %..#.###.
    !byte %...####.

    !byte %........            ;            ##
    !byte %........            ;           ##
    !byte %........            ;          ##
    !byte %........            ;         ##
    !byte %........            ;        ####
    !byte %.......#            ;       ## # # #
    !byte %.......#            ;       #   # ###
    !byte %........            ;            ####
    !byte %....##..
    !byte %...##...
    !byte %..##....
    !byte %.##.....
    !byte %####....
    !byte %#.#.#.#.
    !byte %...#.###
    !byte %....####

    !byte %.....###            ;     ###  #
    !byte %##..####            ;##  #### ##
    !byte %##.###..            ;## ###    #
    !byte %########            ;###########
    !byte %###...#.            ;###   #
    !byte %##..#...            ;##  #   #
    !byte %##.#.#.#            ;## # # # #
    !byte %....#...            ;    #   #
    !byte %..#.....
    !byte %.##.....
    !byte %..#.....
    !byte %###.....
    !byte %........
    !byte %#.......
    !byte %.#......
    !byte %#.......

    !byte %.##....#            ; ##    ##  #
    !byte %.##...##            ; ##   ### ##
    !byte %.##..##.            ; ##  ##    #
    !byte %.#######            ; ###########
    !byte %.####...            ; ####   #
    !byte %.##...#.            ; ##   #   #
    !byte %.##..#.#            ; ##  # # # #
    !byte %......#.            ;      #   #
    !byte %#..#....
    !byte %#.##....
    !byte %...#....
    !byte %####....
    !byte %#.......
    !byte %..#.....
    !byte %.#.#....
    !byte %..#.....

    !byte %..##....            ;  ##      ##  #
    !byte %..##....            ;  ##     ### ##
    !byte %..##....            ;  ##    ##    #
    !byte %..######            ;  #############
    !byte %..#####.            ;  #####    #
    !byte %..##....            ;  ##     #   #
    !byte %..##....            ;  ##    # # # #
    !byte %........            ;         #   #
    !byte %..##..#.
    !byte %.###.##.
    !byte %##....#.
    !byte %#######.
    !byte %...#....
    !byte %.#...#..
    !byte %#.#.#.#.
    !byte %.#...#..

    !byte %........            ;           ##  #
    !byte %.....##.            ;     ##   ### ##
    !byte %.....##.            ;     ##  #     #
    !byte %.....###            ;     ###########
    !byte %.....###            ;     ####   #
    !byte %.....##.            ;     ##   #   #
    !byte %.....##.            ;     ##  # # # #
    !byte %........            ;          #   #
    !byte %...##..#
    !byte %..###.##
    !byte %.#.....#
    !byte %########
    !byte %#...#...
    !byte %..#...#.
    !byte %.#.#.#.#
    !byte %..#...#.

    ; skylab crashing sprites in 4 colour 'MODE 1' format
skylab4Sprite
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %..#...#.
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %#...#...
    !byte %...#...#
    !byte %........
    !byte %........
    !byte %..#...#.
    !byte %........

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %#...#...
    !byte %........
    !byte %........
    !byte %..#...#.
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %.#...#..
    !byte %..#...#.

    !byte %........
    !byte %...#...#
    !byte %#..##..#
    !byte %.##..##.
    !byte %##..##..
    !byte %.##..##.
    !byte %........
    !byte %##..##..
    !byte %.###.###
    !byte %##.###.#
    !byte %.###.###
    !byte %.#...#..
    !byte %###.###.
    !byte %.#...#..
    !byte %#..##..#
    !byte %.#...#..

    !byte %...#...#
    !byte %..#...#.
    !byte %#...#...
    !byte %........
    !byte %........
    !byte %........
    !byte %#...#...
    !byte %.#...#..
    !byte %.#...#..
    !byte %........
    !byte %........
    !byte %.#...#..
    !byte %........
    !byte %..#...#.
    !byte %.#...#..
    !byte %#...#...

skylab5Sprite
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %...#...#
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %..#...#.
    !byte %........
    !byte %........

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %#...#...
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %..#...#.
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %...#...#
    !byte %#..##..#
    !byte %.##..##.
    !byte %........
    !byte %........
    !byte %..#...#.
    !byte %........
    !byte %.###.###
    !byte %##.###.#
    !byte %.###.###
    !byte %.#...#..

    !byte %........
    !byte %........
    !byte %........
    !byte %..#...#.
    !byte %...#...#
    !byte %..#...#.
    !byte %#...#...
    !byte %###.###.
    !byte %........
    !byte %........
    !byte %.#...#..
    !byte %..#...#.
    !byte %.#...#..
    !byte %........
    !byte %........
    !byte %........

verticalGuardianGraphics
    !byte %........            ;
    !byte %......##            ;       ####
    !byte %....####            ;     ########
    !byte %...#####            ;    ##########
    !byte %..##...#            ;   ##   ##   ##
    !byte %....###.            ;     ###  ###
    !byte %.##.####            ;  ## ######## ##
    !byte %#.#.###.            ; # # ###  ### # #
    !byte %........            ; # ##   ##   ## #
    !byte %##......            ; #  ##########  #
    !byte %####....            ; #  ## #### ##  #
    !byte %#####...            ; #   ##    ##   #
    !byte %#...##..            ;  #   ######   #
    !byte %.###....            ;       #  #
    !byte %####.##.            ;     ###  ###
    !byte %.###.#.#            ;

    !byte %#.##...#
    !byte %#..#####
    !byte %#..##.##
    !byte %#...##..
    !byte %.#...###
    !byte %......#.
    !byte %....###.
    !byte %........
    !byte %#...##.#
    !byte %#####..#
    !byte %##.##..#
    !byte %..##...#
    !byte %###...#.
    !byte %.#......
    !byte %.###....
    !byte %........

pedestalSprite
    !byte %########             ; ################
    !byte %.###..#.             ;  ###  #  #  ###
    !byte %#...#.#.             ; #   # #  # #   #
    !byte %#.#.#.#.             ; # # # #  # # # #
    !byte %.#..#.#.             ;  #  # #  # #  #
    !byte %...#..#.             ;    #  #  #  #
    !byte %..#...#.             ;   #   #  #   #
    !byte %..#.#.#.             ;   # # #  # # #
    !byte %########             ;   # # #  # # #
    !byte %.#..###.             ;   # # #  # # #
    !byte %.#.#...#             ;   # # #  # # #
    !byte %.#.#.#.#             ;   # # #  # # #
    !byte %.#.#..#.             ;   # # #  # # #
    !byte %.#..#...             ;   # # #  # # #
    !byte %.#...#..             ;   # # #  # # #
    !byte %.#.#.#..             ;   # # #  # # #

    !byte %..#.#.#.
    !byte %..#.#.#.
    !byte %..#.#.#.
    !byte %..#.#.#.
    !byte %..#.#.#.
    !byte %..#.#.#.
    !byte %..#.#.#.
    !byte %..#.#.#.
    !byte %.#.#.#..
    !byte %.#.#.#..
    !byte %.#.#.#..
    !byte %.#.#.#..
    !byte %.#.#.#..
    !byte %.#.#.#..
    !byte %.#.#.#..
    !byte %.#.#.#..


    !byte %........            ;
    !byte %........            ;
    !byte %....#...            ;    #
    !byte %.......#            ;       #
    !byte %........            ;        #
    !byte %..#.....            ;  #
    !byte %......#.            ;      #      #
    !byte %........            ;          #   #
    !byte %........            ;     ###   # #
    !byte %........            ;   ### #  #
    !byte %........            ;#  # ####
    !byte %........            ; ##  #       #
    !byte %#.......            ;##  ###
    !byte %........            ; ##  #        #
    !byte %.....#..            ;    #  ##    #
    !byte %..#...#.            ;##   #   #  #

    !byte %.....###
    !byte %...###.#
    !byte %#..#.###
    !byte %.##..#..
    !byte %##..###.
    !byte %.##..#..
    !byte %....#..#
    !byte %##...#..
    !byte %...#.#..
    !byte %..#.....
    !byte %#.......
    !byte %.....#..
    !byte %........
    !byte %......#.
    !byte %#....#..
    !byte %.#..#...

    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %......#.            ;      #
    !byte %...#....            ;   #
    !byte %........            ;        #
    !byte %........            ;  #
    !byte %........            ;
    !byte %........            ;      #      #
    !byte %........            ;          #   #
    !byte %........            ;     ###   # #
    !byte %........            ;   ### #  #
    !byte %........            ;#  # ####
    !byte %#.......            ; ##  #  ###

    !byte %..#.....
    !byte %........
    !byte %......#.
    !byte %........
    !byte %.....###
    !byte %...###.#
    !byte %#..#.###
    !byte %.##..#..
    !byte %........
    !byte %........
    !byte %.....#..
    !byte %..#...#.
    !byte %...#.#..
    !byte %..#.....
    !byte %#.......
    !byte %###.....

kongBeastSprite
    !byte %...#..##            ;   #  ####  #
    !byte %...###.#            ;   ### ## ###
    !byte %....####            ;    ########
    !byte %.....##.            ;     ##  ##
    !byte %.....#.#            ;     # ## #
    !byte %......#.            ;      #  #
    !byte %.....###            ;     ######
    !byte %....####            ;    ########
    !byte %##..#...            ;   ##########
    !byte %#.###...            ;  ##  ####  ##
    !byte %####....            ; ##   ####   ##
    !byte %.##.....            ; #   ##  ##   #
    !byte %#.#.....            ;  # ##    ## #
    !byte %.#......            ;     ##  ##
    !byte %###.....            ;      #  #
    !byte %####....            ;    ###  ###

    !byte %...#####
    !byte %..##..##
    !byte %.##...##
    !byte %.#...##.
    !byte %..#.##..
    !byte %.....##.
    !byte %......#.
    !byte %....###.
    !byte %#####...
    !byte %##..##..
    !byte %##...##.
    !byte %.##...#.
    !byte %..##.#..
    !byte %.##.....
    !byte %.#......
    !byte %.###....

    !byte %....#.##            ;    # #### #
    !byte %....##.#            ;    ## ## ##
    !byte %....####            ;    ########
    !byte %.....##.            ;     ##  ##
    !byte %.....#.#            ;     # ## #
    !byte %......#.            ;      #  #
    !byte %......##            ;      ####
    !byte %...#####            ;   ##########
    !byte %##.#....            ; ##############
    !byte %#.##....            ;###  ######  ###
    !byte %####....            ;#     ####     #
    !byte %.##.....            ;##   ######   ##
    !byte %#.#.....            ;     ##  ##
    !byte %.#......            ;    ##    ##
    !byte %##......            ;    #      #
    !byte %#####...            ;  ###      ###

    !byte %.#######
    !byte %###..###
    !byte %#.....##
    !byte %##...###
    !byte %.....##.
    !byte %....##..
    !byte %....#...
    !byte %..###...
    !byte %#######.
    !byte %###..###
    !byte %##.....#
    !byte %###...##
    !byte %.##.....
    !byte %..##....
    !byte %...#....
    !byte %...###..

    !byte %...###..            ;   ###    ###
    !byte %.....##.            ;     ##  ##
    !byte %....##..            ;    ##    ##
    !byte %.....##.            ;     ##  ##
    !byte %.##...##            ; ##   ####   ##
    !byte %..#..###            ;  #  ######  #
    !byte %.##..###            ; ##  ######  ##
    !byte %..##.###            ;  ## ###### ##
    !byte %..###...            ;   ##########
    !byte %.##.....            ;    ########
    !byte %..##....            ;      #  #
    !byte %.##.....            ;     # ## #
    !byte %##...##.            ;     ##  ##
    !byte %###..#..            ;    ########
    !byte %###..##.            ;    ## ## ##
    !byte %###.##..            ;    # #### #

    !byte %...#####
    !byte %....####
    !byte %......#.
    !byte %.....#.#
    !byte %.....##.
    !byte %....####
    !byte %....##.#
    !byte %....#.##
    !byte %#####...
    !byte %####....
    !byte %.#......
    !byte %#.#.....
    !byte %.##.....
    !byte %####....
    !byte %#.##....
    !byte %##.#....

    !byte %.###....            ; ###        ###
    !byte %...##...            ;   ##      ##
    !byte %....##..            ;    ##    ##
    !byte %.....##.            ;     ##  ##
    !byte %.##...##            ; ##   ####   ##
    !byte %..#..###            ;  #  ######  #
    !byte %.##..###            ; ##  ######  ##
    !byte %..##.###            ;  ## ###### ##
    !byte %....###.            ;   ##########
    !byte %...##...            ;    ########
    !byte %..##....            ;      #  #
    !byte %.##.....            ;     # ## #
    !byte %##...##.            ;   # ##  ## #
    !byte %###..#..            ;    ########
    !byte %###..##.            ;    ## ## ##
    !byte %###.##..            ;     ######

    !byte %...#####
    !byte %....####
    !byte %......#.
    !byte %.....#.#
    !byte %...#.##.
    !byte %....####
    !byte %....##.#
    !byte %.....###
    !byte %#####...
    !byte %####....
    !byte %.#......
    !byte %#.#.....
    !byte %.##.#...
    !byte %####....
    !byte %#.##....
    !byte %###.....

    !byte %........            ;
    !byte %........            ;
    !byte %..######            ;  ############
    !byte %.##...##            ; ##   ####   ##
    !byte %###.#.##            ;### # #### # ###
    !byte %###.#...            ;### #      # ###
    !byte %....####            ;    ########
    !byte %.....###            ;     ######
    !byte %........            ;    ##    ##
    !byte %........            ;    # #### #
    !byte %######..            ;   ## #### ##
    !byte %##...##.            ;   ###    ###
    !byte %##.#.###            ;  ############
    !byte %...#.###            ;  ############
    !byte %####....            ;  ############
    !byte %###.....            ;

    !byte %....##..
    !byte %....#.##
    !byte %...##.##
    !byte %...###..
    !byte %..######
    !byte %..######
    !byte %..######
    !byte %........
    !byte %..##....
    !byte %##.#....
    !byte %##.##...
    !byte %..###...
    !byte %######..
    !byte %######..
    !byte %######..
    !byte %........

    !byte %..####..            ;  ####
    !byte %.#######            ; #########
    !byte %.#######            ; ############
    !byte %.##...##            ; ##   ####   ##
    !byte %....#...            ;    #    # # ###
    !byte %....#...            ;    #      # ###
    !byte %....####            ;    ######## ###
    !byte %.....###            ;     ######
    !byte %........            ;    ##    ##
    !byte %##......            ;    # #### #
    !byte %#####...            ;   ## #### ##
    !byte %##...##.            ;   ###    ###
    !byte %.#.#.###            ;  ############
    !byte %...#.###            ;  ############
    !byte %####.###            ;  ############
    !byte %###.....            ;

    !byte %....##..
    !byte %....#.##
    !byte %...##.##
    !byte %...###..
    !byte %..######
    !byte %..######
    !byte %..######
    !byte %........
    !byte %..##....
    !byte %##.#....
    !byte %##.##...
    !byte %..###...
    !byte %######..
    !byte %######..
    !byte %######..
    !byte %........

    !byte %........            ;
    !byte %........            ;
    !byte %..######            ;  ############
    !byte %.##...##            ; ##   ####   ##
    !byte %###.#...            ;### #      # ###
    !byte %###.#...            ;### #      # ###
    !byte %....####            ;    ########
    !byte %.....###            ;     ######
    !byte %........            ;    ##    ##
    !byte %........            ;    # #### #
    !byte %######..            ;   ## #### ##
    !byte %##...##.            ;   ###    ###
    !byte %...#.###            ;  ############
    !byte %...#.###            ;  ############
    !byte %####....            ;  ############
    !byte %###.....            ;

    !byte %....##..
    !byte %....#.##
    !byte %...##.##
    !byte %...###..
    !byte %..######
    !byte %..######
    !byte %..######
    !byte %........
    !byte %..##....
    !byte %##.#....
    !byte %##.##...
    !byte %..###...
    !byte %######..
    !byte %######..
    !byte %######..
    !byte %........

    !byte %........            ;          ####
    !byte %......##            ;      #########
    !byte %...#####            ;   ############
    !byte %.##...##            ; ##   ####   ##
    !byte %###.#...            ;### #      #
    !byte %###.#...            ;### #      #
    !byte %###.####            ;### ########
    !byte %.....###            ;     ######
    !byte %..####..            ;    ##    ##
    !byte %#######.            ;    # #### #
    !byte %#######.            ;   ## #### ##
    !byte %##...##.            ;   ###    ###
    !byte %...#....            ;  ############
    !byte %...#....            ;  ############
    !byte %####....            ;  ############
    !byte %###.....            ;

    !byte %....##..
    !byte %....#.##
    !byte %...##.##
    !byte %...###..
    !byte %..######
    !byte %..######
    !byte %..######
    !byte %........
    !byte %..##....
    !byte %##.#....
    !byte %##.##...
    !byte %..###...
    !byte %######..
    !byte %######..
    !byte %######..
    !byte %........

    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %......##            ;      ####
    !byte %....##..            ;    ##    ##
    !byte %...#....            ;   #        #
    !byte %..#.....            ;  #          #
    !byte %.#......            ; #            #
    !byte %........            ;#              #
    !byte %........            ; #            #
    !byte %........            ;  #          #
    !byte %##......            ;## #        # ##
    !byte %..##....            ;  # ##    ## #
    !byte %....#...            ; #  # #### #  #
    !byte %.....#..            ;   #  #  #  #
    !byte %......#.            ;      #  #

    !byte %#.......
    !byte %.#......
    !byte %..#.....
    !byte %##.#....
    !byte %..#.##..
    !byte %.#..#.##
    !byte %...#..#.
    !byte %......#.
    !byte %.......#
    !byte %......#.
    !byte %.....#..
    !byte %....#.##
    !byte %..##.#..
    !byte %##.#..#.
    !byte %.#..#...
    !byte %.#......

    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %......##            ;      ####
    !byte %....##..            ;    ##    ##
    !byte %...#....            ;   #        #
    !byte %..#.....            ;  #          #
    !byte %.#......            ; #            #
    !byte %........            ;#####      #####
    !byte %........            ; # # ###### # #
    !byte %........            ;  # # #### # #
    !byte %##......            ;   #  #  #  #
    !byte %..##....            ;    ##    ##
    !byte %....#...            ;      ####
    !byte %.....#..            ;
    !byte %......#.            ;

    !byte %#####...
    !byte %.#.#.###
    !byte %..#.#.##
    !byte %...#..#.
    !byte %....##..
    !byte %......##
    !byte %........
    !byte %........
    !byte %...#####
    !byte %###.#.#.
    !byte %##.#.#..
    !byte %.#..#...
    !byte %..##....
    !byte %##......
    !byte %........
    !byte %........

    !byte %.....#..            ;     #    #
    !byte %.....#..            ;     #    #
    !byte %...#..#.            ;   #  #  #  #
    !byte %.#..#.##            ; #  # #### #  #
    !byte %..#.##..            ;  # ##    ## #
    !byte %#..#..##            ;#  #  ####  #  #
    !byte %#.#..###            ;# #  ######  # #
    !byte %.#...##.            ; #   ##  ##   #
    !byte %..#.....            ;#    ##  ##    #
    !byte %..#.....            ; #   ######   #
    !byte %.#..#...            ;  #   ####   #
    !byte %##.#..#.            ;   #        #
    !byte %..##.#..            ;    ##    ##
    !byte %##..#..#            ;      ####
    !byte %###..#.#            ;
    !byte %.##...#.            ;

    !byte %#....##.
    !byte %.#...###
    !byte %..#...##
    !byte %...#....
    !byte %....##..
    !byte %......##
    !byte %........
    !byte %........
    !byte %.##....#
    !byte %###...#.
    !byte %##...#..
    !byte %....#...
    !byte %..##....
    !byte %##......
    !byte %........
    !byte %........

    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %......##            ;      ####
    !byte %....##..            ;    ##    ##
    !byte %...#..#.            ;   #  #  #  #
    !byte %..#.#.#.            ;  # # #  # # #
    !byte %.#.#####            ; # ########## #
    !byte %........            ;#### ##  #######
    !byte %........            ; #   ######   #
    !byte %........            ;  #   ####   #
    !byte %##......            ;   #        #
    !byte %..##....            ;    ##    ##
    !byte %.#..#...            ;      ####
    !byte %.#.#.#..            ;
    !byte %#####.#.            ;

    !byte %####.##.
    !byte %.#...###
    !byte %..#...##
    !byte %...#....
    !byte %....##..
    !byte %......##
    !byte %........
    !byte %........
    !byte %.#######
    !byte %###...#.
    !byte %##...#..
    !byte %....#...
    !byte %..##....
    !byte %##......
    !byte %........
    !byte %........

    !byte %......##            ;      ####
    !byte %########            ;################
    !byte %#.#.#.##            ;# # # #### # # #
    !byte %########            ;################
    !byte %...#..##            ;   #  ####  #
    !byte %..#.#..#            ;  # #  ##  # #
    !byte %...#.#.#            ;   # # ## # #
    !byte %....#.##            ;    # #### #
    !byte %##......            ;     # ## #
    !byte %########            ;      ####
    !byte %##.#.#.#            ;      ####
    !byte %########            ;     # ## #
    !byte %##..#...            ;    # #  # #
    !byte %#..#.#..            ;   # #    # #
    !byte %#.#.#...            ;  # #      # #
    !byte %##.#....            ;   #        #

    !byte %.....#.#
    !byte %......##
    !byte %......##
    !byte %.....#.#
    !byte %....#.#.
    !byte %...#.#..
    !byte %..#.#...
    !byte %...#....
    !byte %#.#.....
    !byte %##......
    !byte %##......
    !byte %#.#.....
    !byte %.#.#....
    !byte %..#.#...
    !byte %...#.#..
    !byte %....#...

    !byte %........            ;
    !byte %........            ;
    !byte %......##            ;      ####
    !byte %########            ;################
    !byte %#.#.#.##            ;# # # #### # # #
    !byte %########            ;################
    !byte %...#..##            ;   #  ####  #
    !byte %..#.#..#            ;  # #  ##  # #
    !byte %........            ;   # # ## # #
    !byte %........            ;    # #### #
    !byte %##......            ;     # ## #
    !byte %########            ;      ####
    !byte %##.#.#.#            ;  #   ####
    !byte %########            ; #   # ## # #
    !byte %##..#...            ;    # #  # # #
    !byte %#..#.#..            ;   # #    # #

    !byte %...#.#.#
    !byte %....#.##
    !byte %.....#.#
    !byte %......##
    !byte %..#...##
    !byte %.#...#.#
    !byte %....#.#.
    !byte %...#.#..
    !byte %#.#.#...
    !byte %##.#....
    !byte %#.#.....
    !byte %##......
    !byte %##......
    !byte %#.#.#...
    !byte %.#.#.#..
    !byte %..#.#...

    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;             ###
    !byte %......##            ;      ######## #
    !byte %########            ;########## # ###
    !byte %#.#.#.##            ;# # # #######
    !byte %########            ;##########
    !byte %........            ;      ####
    !byte %........            ;       ##
    !byte %........            ;   # # ## #  #
    !byte %.....###            ; #  # #### #  #
    !byte %######.#            ;     # ## #  #
    !byte %##.#.###            ;  #   ####    #
    !byte %#####...            ;    # #### #
    !byte %##......            ;  #  # ## # #

    !byte %......##
    !byte %.......#
    !byte %...#.#.#
    !byte %.#..#.##
    !byte %.....#.#
    !byte %..#...##
    !byte %....#.##
    !byte %..#..#.#
    !byte %##......
    !byte %#.......
    !byte %#.#..#..
    !byte %##.#..#.
    !byte %#.#..#..
    !byte %##....#.
    !byte %##.#....
    !byte %#.#.#...

    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %......##            ;      ####   ###
    !byte %...#####            ;   ########### #
    !byte %........            ;##  # #### # ###
    !byte %........            ;# #  ########
    !byte %........            ;###   ####
    !byte %........            ;       ##     #
    !byte %........            ;  #  # ## #  # #
    !byte %........            ; #  # #### #
    !byte %##...###            ;     # ## #   #
    !byte %######.#            ; # #  ####   #

    !byte %##..#.##
    !byte %#.#..###
    !byte %###...##
    !byte %.......#
    !byte %..#..#.#
    !byte %.#..#.##
    !byte %.....#.#
    !byte %.#.#..##
    !byte %##.#.###
    !byte %#####...
    !byte %##......
    !byte %#.....#.
    !byte %#.#..#.#
    !byte %##.#....
    !byte %#.#...#.
    !byte %##...#..

    !byte %.##....#            ; ##    ##    ##
    !byte %#..#####            ;#  ##########  #
    !byte %#..#####            ;#  ##########  #
    !byte %.##....#            ; ##    ##    ##
    !byte %.....###            ;     ######
    !byte %########            ;################
    !byte %#.......            ;#              #
    !byte %#.#.#.#.            ;# # # # # # #  #
    !byte %#....##.            ;#  ########### #
    !byte %#####..#            ;# ## # # # ##  #
    !byte %#####..#            ;#  #        ## #
    !byte %#....##.            ;# ## # # # ##  #
    !byte %###.....            ;#  ########### #
    !byte %########            ;# # # # # # #  #
    !byte %.......#            ;#              #
    !byte %#.#.#..#            ;################

    !byte %#..#####
    !byte %#.##.#.#
    !byte %#..#....
    !byte %#.##.#.#
    !byte %#..#####
    !byte %#.#.#.#.
    !byte %#.......
    !byte %########
    !byte %######.#
    !byte %.#.##..#
    !byte %....##.#
    !byte %.#.##..#
    !byte %######.#
    !byte %#.#.#..#
    !byte %.......#
    !byte %########

    !byte %...###.#            ;   ### ## ###
    !byte %..#...#.            ;  #   # ###  #
    !byte %..#...#.            ;  #   # ###  #
    !byte %...###.#            ;   ### ## ###
    !byte %......##            ;      ####
    !byte %########            ;################
    !byte %##.#.#.#            ;## # # # # # # #
    !byte %#.######            ;# ##############
    !byte %#.###...            ;### # # # # ## #
    !byte %###..#..            ;# ##         ###
    !byte %###..#..            ;###  # # #  ## #
    !byte %#.###...            ;# ##         ###
    !byte %##......            ;### # # # # ## #
    !byte %########            ;# ##############
    !byte %.#.#.#.#            ;## # # # # # # #
    !byte %########            ;################

    !byte %###.#.#.
    !byte %#.##....
    !byte %###..#.#
    !byte %#.##....
    !byte %###.#.#.
    !byte %#.######
    !byte %##.#.#.#
    !byte %########
    !byte %#.#.##.#
    !byte %.....###
    !byte %.#..##.#
    !byte %.....###
    !byte %#.#.##.#
    !byte %########
    !byte %.#.#.#.#
    !byte %########

    !byte %.....###            ;     ######
    !byte %....#...            ;    #      #
    !byte %....#...            ;    #      #
    !byte %.....###            ;     ######
    !byte %......##            ;      ####
    !byte %########            ;################
    !byte %########            ;################
    !byte %##.#.#.#            ;## # # # # # ###
    !byte %###.....            ;###           ##
    !byte %...#....            ;##  # # # #  ###
    !byte %...#....            ;###  #######  ##
    !byte %###.....            ;##  # #   #  ###
    !byte %##......            ;###           ##
    !byte %########            ;## # # # # # ###
    !byte %########            ;################
    !byte %.#.#.###            ;################

    !byte %###.....
    !byte %##..#.#.
    !byte %###..###
    !byte %##..#.#.
    !byte %###.....
    !byte %##.#.#.#
    !byte %########
    !byte %########
    !byte %......##
    !byte %#.#..###
    !byte %####..##
    !byte %..#..###
    !byte %......##
    !byte %.#.#.###
    !byte %########
    !byte %########

    !byte %...###.#            ;   ### ## ###
    !byte %..#.####            ;  # #### #   #
    !byte %..#.####            ;  # #### #   #
    !byte %...###.#            ;   ### ## ###
    !byte %......##            ;      ####
    !byte %########            ;################
    !byte %#.#.#.#.            ;# # # # # # # ##
    !byte %##......            ;##             #
    !byte %#.###...            ;#  # # # # #  ##
    !byte %.#...#..            ;##  #########  #
    !byte %.#...#..            ;#  ##      #  ##
    !byte %#.###...            ;##  #########  #
    !byte %##......            ;#  # # # # #  ##
    !byte %########            ;##             #
    !byte %#.#.#.##            ;# # # # # # # ##
    !byte %.......#            ;################

    !byte %#..#.#.#
    !byte %##..####
    !byte %#..##...
    !byte %##..####
    !byte %#..#.#.#
    !byte %##......
    !byte %#.#.#.#.
    !byte %########
    !byte %.#.#..##
    !byte %#####..#
    !byte %...#..##
    !byte %#####..#
    !byte %.#.#..##
    !byte %.......#
    !byte %#.#.#.##
    !byte %########

    !byte %........            ;            ###
    !byte %........            ;          ##  ##
    !byte %........            ;        ##   # #
    !byte %......##            ;      ##   ##  #
    !byte %....##..            ;    ##   ##  # #
    !byte %..##...#            ;  ##   ##  ### #
    !byte %##...##.            ;##   ##  ##### #
    !byte %#..##..#            ;#  ##  ##  ### #
    !byte %....###.            ;##   ##    ### #
    !byte %..##..##            ;####   ##  ### #
    !byte %##...#.#            ; #####   ##### #
    !byte %...##..#            ;   #####   ### #
    !byte %.##..#.#            ;     ##### ### #
    !byte %#..###.#            ;       ####### #
    !byte %.#####.#            ;         #######
    !byte %#..###.#            ;           ####

    !byte %##...##.
    !byte %####...#
    !byte %.#####..
    !byte %...#####
    !byte %.....###
    !byte %.......#
    !byte %........
    !byte %........
    !byte %...###.#
    !byte %#..###.#
    !byte %.#####.#
    !byte %...###.#
    !byte %##.###.#
    !byte %######.#
    !byte %.#######
    !byte %...####.

    !byte %......##            ;      ####
    !byte %.....###            ;     ### #
    !byte %.....##.            ;     ##   #
    !byte %....###.            ;    ### # #
    !byte %....##..            ;    ##  #  #
    !byte %...###.#            ;   ### # # #
    !byte %...##..#            ;   ##  # #  #
    !byte %..###.#.            ;  ### #   # #
    !byte %##......            ;  ##  #   #  #
    !byte %.#......            ; ### #     # #
    !byte %..#.....            ; ##  #     #  #
    !byte %#.#.....            ;########### # #
    !byte %#..#....            ;########### #  #
    !byte %.#.#....            ;############ # #
    !byte %.#..#...            ; #            ##
    !byte %..#.#...            ; ##############

    !byte %..##..#.
    !byte %.###.#..
    !byte %.##..#..
    !byte %########
    !byte %########
    !byte %########
    !byte %.#......
    !byte %.#######
    !byte %..#..#..
    !byte %...#.#..
    !byte %...#..#.
    !byte %###.#.#.
    !byte %###.#..#
    !byte %####.#.#
    !byte %......##
    !byte %#######.

    !byte %..###...            ;  ###
    !byte %#######.            ;#######
    !byte %#.######            ;# #######
    !byte %#.###.##            ;# ### #####
    !byte %#.###...            ;# ###   #####
    !byte %#.#####.            ;# #####   #####
    !byte %#.###..#            ;# ###  ##   ####
    !byte %#.###...            ;# ###    ##   ##
    !byte %........            ;# ###  ##  ##  #
    !byte %........            ;# #####  ##   ##
    !byte %#.......            ;# ###  ##   ##
    !byte %###.....            ;# #  ##   ##
    !byte %#####...            ;#  ##   ##
    !byte %..#####.            ;# #   ##
    !byte %#...####            ;##  ##
    !byte %.##...##            ; ###

    !byte %#.###..#
    !byte %#.#####.
    !byte %#.###..#
    !byte %#.#..##.
    !byte %#..##...
    !byte %#.#...##
    !byte %##..##..
    !byte %.###....
    !byte %#..##..#
    !byte %.##...##
    !byte %#...##..
    !byte %..##....
    !byte %##......
    !byte %........
    !byte %........
    !byte %........

    !byte %.#######            ; ##############
    !byte %#.......            ;#             #
    !byte %#.#.####            ;# # ############
    !byte %#..#.###            ;#  # ###########
    !byte %.#.#.###            ; # # ###########
    !byte %.#..#.#.            ; #  # #   #  ##
    !byte %..#.#.#.            ;  # # #   # ###
    !byte %..#..#.#            ;  #  # # #  ##
    !byte %#######.            ;   # # # # ###
    !byte %......#.            ;   #  # #  ##
    !byte %########            ;    # # # ###
    !byte %########            ;    #  #  ##
    !byte %########            ;     # # ###
    !byte %..#..##.            ;     #   ##
    !byte %..#.###.            ;      # ###
    !byte %.#..##..            ;      ####

    !byte %...#.#.#
    !byte %...#..#.
    !byte %....#.#.
    !byte %....#..#
    !byte %.....#.#
    !byte %.....#..
    !byte %......#.
    !byte %......##
    !byte %.#.###..
    !byte %#..##...
    !byte %#.###...
    !byte %..##....
    !byte %.###....
    !byte %.##.....
    !byte %###.....
    !byte %##......

    !byte %....#.#.             ;    # #   #
    !byte %...#.##.             ;   # ##  ## #
    !byte %.......#             ;       # # #
    !byte %..###..#             ;  ###  # ##   #
    !byte %.##..#.#             ; ##  # ###  ###
    !byte %......##             ;      #### #
    !byte %########             ;########### ###
    !byte %#....###             ;#    #######   #
    !byte %..#.....             ; ### ####### #
    !byte %.##.#...             ;##   ###########
    !byte %.#.#....             ;#   # ######   #
    !byte %.##...#.             ;  ##  # # # ##
    !byte %##..###.             ; ##  #  # #  ##
    !byte %##.#....             ; #  #  ## #   #
    !byte %###.###.             ;   #  # #  #
    !byte %####...#             ;  ## ## #  ##

    !byte %.###.###
    !byte %##...###
    !byte %#...#.##
    !byte %..##..#.
    !byte %.##..#..
    !byte %.#..#..#
    !byte %...#..#.
    !byte %..##.##.
    !byte %####.#..
    !byte %########
    !byte %####...#
    !byte %#.#.##..
    !byte %#.#..##.
    !byte %#.#...#.
    !byte %#..#....
    !byte %#..##...

    !byte %........            ;
    !byte %.....#.#            ;     # #  #
    !byte %......##            ;      ## #
    !byte %..##...#            ;  ##   # ### #
    !byte %...###.#            ;   ### ###  ##
    !byte %......##            ;      #### #
    !byte %..######            ;  ######### ##
    !byte %......##            ;      ###### #
    !byte %........            ;  #########
    !byte %..#.....            ; ##  #########
    !byte %.#......            ;    # ######  #
    !byte %.###.#..            ;  ##  # # # ##
    !byte %##..##..            ;  #  #  # #  #
    !byte %##.#....            ;    # ###  #
    !byte %###.##..            ;   ## # ## ##
    !byte %####.#..            ;        ##

    !byte %..######
    !byte %.##..###
    !byte %....#.##
    !byte %..##..#.
    !byte %..#..#..
    !byte %....#.##
    !byte %...##.#.
    !byte %........
    !byte %###.....
    !byte %######..
    !byte %####..#.
    !byte %#.#.##..
    !byte %#.#..#..
    !byte %#..#....
    !byte %##.##...
    !byte %##......

    !byte %........            ;
    !byte %........            ;
    !byte %......#.            ;      #   #
    !byte %....#..#            ;    #  # ##
    !byte %.....#.#            ;     # ###  #
    !byte %......##            ;      #### #
    !byte %...#####            ;   ########
    !byte %.....###            ;     ########
    !byte %........            ;   ########
    !byte %........            ;   # ########
    !byte %..#.....            ;    ########
    !byte %.##.....            ;   #  # # # #
    !byte %##..#...            ;     # ## #
    !byte %##.#....            ;    # # # ##
    !byte %###.....            ;        ##
    !byte %#####...            ;

    !byte %...#####
    !byte %...#.###
    !byte %....####
    !byte %...#..#.
    !byte %.....#.#
    !byte %....#.#.
    !byte %........
    !byte %........
    !byte %###.....
    !byte %#####...
    !byte %####....
    !byte %#.#.#...
    !byte %#.#.....
    !byte %#.##....
    !byte %##......
    !byte %........

    !byte %........            ;
    !byte %.....#.#            ;     # #  #
    !byte %......##            ;      ## #
    !byte %..##...#            ;  ##   # ### #
    !byte %...###.#            ;   ### ###  ##
    !byte %......##            ;      #### #
    !byte %..######            ;  ######### ##
    !byte %......##            ;      ###### #
    !byte %........            ;  #########
    !byte %..#.....            ; ##  #########
    !byte %.#......            ;    # ######  #
    !byte %.###.#..            ;  ##  # # # ##
    !byte %##..##..            ;  #  #  # #  #
    !byte %##.#....            ;    # ###  #
    !byte %###.##..            ;   ## # ## ##
    !byte %####.#..            ;        ##

    !byte %..######
    !byte %.##..###
    !byte %....#.##
    !byte %..##..#.
    !byte %..#..#..
    !byte %....#.##
    !byte %...##.#.
    !byte %........
    !byte %###.....
    !byte %######..
    !byte %####..#.
    !byte %#.#.##..
    !byte %#.#..#..
    !byte %#..#....
    !byte %##.##...
    !byte %##......

    !byte %........            ;
    !byte %....##..            ;    ##    ##
    !byte %......#.            ;      #  #
    !byte %.......#            ;       ##
    !byte %.....###            ;     ######
    !byte %.##.####            ; ## ######## ##
    !byte %...##..#            ;   ##  ##  ##
    !byte %....#.#.            ;    # #  # #
    !byte %........            ;#####  ##  #####
    !byte %..##....            ;   ####  ####
    !byte %.#......            ;   ###    ###
    !byte %#.......            ; #####    # ###
    !byte %###.....            ;#  ## #### ##  #
    !byte %####.##.            ;    ##  # ##
    !byte %#..##...            ;     ######
    !byte %.#.#....            ;       ##

    !byte %#####..#
    !byte %...####.
    !byte %...###..
    !byte %.#####..
    !byte %#..##.##
    !byte %....##..
    !byte %.....###
    !byte %.......#
    !byte %#..#####
    !byte %.####...
    !byte %..###...
    !byte %..#.###.
    !byte %##.##..#
    !byte %#.##....
    !byte %###.....
    !byte %#.......

    !byte %........            ;
    !byte %........            ;
    !byte %....###.            ;    ###  ###
    !byte %.#.....#            ; #     ##     #
    !byte %..#..###            ;  #  ######  #
    !byte %...#####            ;   ##########
    !byte %#...#..#            ;#   #  ##  #   #
    !byte %.####.#.            ; #### #  # ####
    !byte %........            ;   ##  ##  ##
    !byte %........            ;   ####  ####
    !byte %.###....            ;######    ######
    !byte %#.....#.            ;   # #    # #
    !byte %###..#..            ;   ####### ##
    !byte %#####...            ;    ##   ###
    !byte %#..#...#            ;     ######
    !byte %.#.####.            ;       ##

    !byte %...##..#
    !byte %...####.
    !byte %######..
    !byte %...#.#..
    !byte %...#####
    !byte %....##..
    !byte %.....###
    !byte %.......#
    !byte %#..##...
    !byte %.####...
    !byte %..######
    !byte %..#.#...
    !byte %##.##...
    !byte %.###....
    !byte %###.....
    !byte %#.......

    !byte %........            ;
    !byte %....##..            ;    ##    ##
    !byte %......#.            ;      #  #
    !byte %.......#            ;       ##
    !byte %.....###            ;     ######
    !byte %.#..####            ; #  ########  #
    !byte %..######            ;  ############
    !byte %....###.            ;    ###  ###
    !byte %........            ;## ##  ##  ## ##
    !byte %..##....            ;  #####  #####
    !byte %.#......            ;   ###    ###
    !byte %#.......            ; ### #    # ###
    !byte %###.....            ;#  ## ####### ##
    !byte %####..#.            ;    ###   ##
    !byte %######..            ;     ######
    !byte %.###....            ;       ##

    !byte %##.##..#
    !byte %..#####.
    !byte %...###..
    !byte %.###.#..
    !byte %#..##.##
    !byte %....###.
    !byte %.....###
    !byte %.......#
    !byte %#..##.##
    !byte %.#####..
    !byte %..###...
    !byte %..#.###.
    !byte %#####.##
    !byte %..##....
    !byte %###.....
    !byte %#.......

    !byte %.....#..            ;     #    #
    !byte %.....#..            ;     #    #
    !byte %......#.            ;      #  #
    !byte %.......#            ;       ##
    !byte %.....###            ;     ######
    !byte %....####            ;    ########
    !byte %.#######            ; ##############
    !byte %....#.#.            ;    # #  # #   #
    !byte %..#.....            ;    #  ##  ##
    !byte %..#.....            ; ######  ######
    !byte %.#......            ;#  ###    ###  #
    !byte %#.......            ;   # #    # #
    !byte %###.....            ;  ### #### ###
    !byte %####....            ; #  ## #  ##  #
    !byte %#######.            ; #   ######   #
    !byte %.#.#...#            ;       ##

    !byte %....#..#
    !byte %.######.
    !byte %#..###..
    !byte %...#.#..
    !byte %..###.##
    !byte %.#..##.#
    !byte %.#...###
    !byte %.......#
    !byte %#..##...
    !byte %.######.
    !byte %..###..#
    !byte %..#.#...
    !byte %##.###..
    !byte %..##..#.
    !byte %###...#.
    !byte %#.......

; ***************************************************************************************
normal = 0
slow = $20
right = 1
left = 0

!macro guardianPos .y, .initialX, .x1, .x2, .direction, .speed {
    !byte (.initialX - 1) * 4
    !if (.direction = right) {
        !byte $80 + .y + .speed
        !byte (.x1 - 1) * 4
        !byte (.x2 * 4) - 1
    } else {
        !byte .y + .speed
        !byte (.x1 - 1) * 4 + 3
        !byte (.x2 - 1) * 4
    }
}

; ***************************************************************************************
; Three bytes per horizontal guardian, specifying initial position and direction:
;   X1, Y + top bit + speed, X2
;   top bit indicates initial direction (set = right)
;   speed = $0 for normal, $20 for slow
horizontalGuardianPositionData
    ; ***********************************************************************************
    ; level 1 - Central Cavern
    !byte $ff
;    !byte $1c, $87, $3b
;                Y,   X, X1, X2,   dir, speed
    +guardianPos 7,   8,  8, 15, right, normal

    ; ***********************************************************************************
    ; level 2 - The Cold Room
    !byte $ff
;    !byte $47, $03, $00,  $73, $0d, $2c
;                Y,   X, X1, X2,   dir, speed
    +guardianPos 3,  18, 18,  1,  left, normal
    +guardianPos 13, 29, 29, 12,  left, normal

    ; ***********************************************************************************
    ; level 3 - The Menagerie
    !byte $ff
;    !byte $3f, $03, $00,  $4b, $0d, $00,  $44, $83, $73
;                Y,   X, X1, X2,   dir, speed
    +guardianPos 13, 19, 19,  1,  left, normal
    +guardianPos 3,  16, 16,  1,  left, normal
    +guardianPos 3,  18, 18, 29, right, normal

    ; ***********************************************************************************
    ; level 4 - Abandoned Uranium Workings
    !byte $ff
;    !byte $01, $8d, $26,  $15, $8d, $3a
;                Y,   X, X1, X2,   dir, speed
    +guardianPos 13,  1,  1, 10, right, normal
    +guardianPos 13,  7,  6, 15, right, normal

    ; ***********************************************************************************
    ; level 5 - Eugene's Lair
    !byte $ff
;    !byte $0c, $87, $2f,  $2f, $03, $01
;                 Y,  X, X1, X2,   dir, speed
    +guardianPos  3, 12, 12,  1,  left, normal
    +guardianPos  7,  4,  4, 12, right, normal

    ; ***********************************************************************************
    ; level 6 - Processing Plant
    !byte $ff
;    !byte $14, $88, $32,  $34, $88, $52,  $19, $8d, $4e,  $5d, $8d, $72
;                 Y,  X, X1, X2,   dir, speed
    +guardianPos  8,  6,  6, 13, right, normal
    +guardianPos 13,  8,  8, 20, right, normal
    +guardianPos  8, 14, 14, 21, right, normal
    +guardianPos 13, 24, 24, 29, right, normal

    ; ***********************************************************************************
    ; level 7 - The Vat
    !byte $ff
;    !byte $38, $81, $72,  $27, $08, $05,  $41, $8d, $72
;                 Y,  X, X1, X2,   dir, speed
    +guardianPos 13, 17, 17, 29, right, normal
    +guardianPos  8, 10, 10,  2,  left, normal
    +guardianPos  1, 15, 15, 29, right, normal

    ; ***********************************************************************************
    ; level 8 - Miner Willy meets the Kong Beast
    !byte $ff
;    !byte $22, $0d, $01,  $29, $ab, $3a,  $45, $87, $52
;                 Y,  X, X1, X2,   dir, speed
    +guardianPos 13,  9,  9,  1,  left, normal
    +guardianPos 11, 11, 11, 15, right, slow
    +guardianPos  7, 18, 18, 21, right, normal

    ; ***********************************************************************************
    ; level 9 - Wacky Amoebatrons
    !byte $ff
;    !byte $31, $83, $46,  $31, $aa, $46
;                 Y,  X, X1, X2,   dir, speed
    +guardianPos  3, 13, 13, 18, right, normal
    +guardianPos 10, 16, 13, 18, right, slow

    ; ***********************************************************************************
    ; level 10 - The Endorian Forest
    !byte $ff
;    !byte $41, $85, $52,  $20, $87, $36,  $0d, $8d, $66,  $36, $2a, $1c
;                 Y,  X, X1, X2,   dir, speed
    +guardianPos  7,  9,  9, 14, right, normal
    +guardianPos 10, 12,  8, 14, right, slow
    +guardianPos 13,  8,  4, 26, right, normal
    +guardianPos  5, 18, 17, 21, right, normal

    ; ***********************************************************************************
    ; level 11 - Attack of the Mutant Telephones
    !byte $ff
;    !byte $14, $8d, $4a,  $38, $83, $5b,  $35, $a7, $49
;                 Y,  X, X1, X2,   dir, speed
    +guardianPos  3, 15, 15, 23, right, normal
    +guardianPos  7, 14, 14, 18, right, slow
    +guardianPos 13, 15, 19,  5,  left, normal

    ; ***********************************************************************************
    ; level 12 - Return of the Alien Kong Beast
    !byte $ff
;    !byte $26, $ab, $3a,  $22, $0d, $02,  $5e, $86, $6e
;                 Y,  X, X1, X2,   dir, speed
    +guardianPos 11, 11, 11, 15, right, slow
    +guardianPos 13,  9,  9,  1,  left, normal
    +guardianPos  6, 25, 25, 28, right, normal

    ; ***********************************************************************************
    ; level 13 - Ore Refinery
    !byte $ff
;    !byte $1a, $81, $6e,  $6e, $24, $1a,  $62, $07, $26,  $5a, $2a, $1a
;                 Y,  X, X1, X2,   dir, speed
    +guardianPos  1,  7,  7, 29, right, normal
    +guardianPos  4, 16, 29,  7, right, slow
    +guardianPos  7, 20, 26, 10,  left, normal
    +guardianPos 10, 18, 29,  7, right, slow

    ; ***********************************************************************************
    ; level 14 - Skylab Landing Bay
    !byte $ff

    ; ***********************************************************************************
    ; level 15 - The Bank
    !byte $ff
;    !byte $40, $ad, $4b
;                 Y,  X, X1, X2,   dir, speed
    +guardianPos 13, 17, 17, 19, right, slow

    ; ***********************************************************************************
    ; level 16 - The Sixteenth Cavern
    !byte $ff
;    !byte $65, $a5, $72,  $4a, $0d, $02,  $45, $87, $5e,  $02, $8a, $1e
;                 Y,  X, X1, X2,   dir, speed
    +guardianPos 10,  1,  1,  7, right, normal
    +guardianPos 13,  9, 18,  1, right, normal
    +guardianPos  7, 18, 18, 23, right, normal
    +guardianPos  5, 26, 25, 29, right, slow

    ; ***********************************************************************************
    ; level 17 - The Warehouse
    !byte $ff
;    !byte $10, $ad, $1f,  $2c, $8d, $62
;                 Y,  X, X1, X2,   dir, speed
    +guardianPos 13,  5,  5,  8, right, slow
    +guardianPos 13, 12, 12, 25, right, normal

    ; ***********************************************************************************
    ; level 18 - Amoebatrons' Revenge
    !byte $ff
;    !byte $2e, $a3, $46,  $46, $06, $2e,  $2e, $aa, $46,  $42, $0d, $2e
;                 Y,  X, X1, X2,   dir, speed
    +guardianPos  3, 12, 12, 18, right, slow
    +guardianPos 10, 16, 17, 12, right, slow
    +guardianPos  6, 16, 12, 17, right, normal
    +guardianPos 13, 16, 18, 12,  left, normal

    ; ***********************************************************************************
    ; level 19 - The Meteor Storm
    !byte $ff
;    !byte $4a, $0b, $1e,  $72, $0d, $5a,  $1a, $0d, $02
;                 Y,  X, X1, X2,   dir, speed
    +guardianPos 11, 19, 19,  8,  left, normal
    +guardianPos 13, 29, 29, 23,  left, normal
    +guardianPos 13,  7,  7,  1,  left, normal

    ; ***********************************************************************************
    ; level 20 - The Final Barrier
    !byte $ff
;    !byte $1a, $83, $2e,  $4a, $21, $30,  $29, $29, $05
;                 Y,  X, X1, X2,   dir, speed
    +guardianPos  3,  7,  7, 12, right, normal
    +guardianPos  1, 19, 19, 13,  left, slow
    +guardianPos  9, 10, 10,  2,  left, slow
    !byte $ff   ; terminator

; ***************************************************************************************
levelTitles
    !text 9, "Central Cavern"
    !text 9, "The Cold Room"
    !text 9, "The Menagerie"
    !text 3, "Abandoned Uranium Workings"
    !text 9, "Eugene's Lair"
    !text 8, "Processing Plant"
    !text 12, "The Vat"
    !text 0, "Miner Willy meets the Kong Beast"
    !text 7, "Wacky Amoebatrons"
    !text 6, "The Endorian Forest"
    !text 0, "Attack of the Mutant Telephones"
    !text 1, "Return of the Alien Kong Beast"
    !text 10, "Ore Refinery"
    !text 7, "Skylab Landing Bay"
    !text 12, "The Bank"
    !text 6, "The Sixteenth Cavern"
    !text 9, "The Warehouse"
    !text 6, "Amoebatrons' Revenge"
    !text 7, "The Meteor Storm"             ; ... should really be the "Solar Power Generator" level
    !text 7, "The Final Barrier"
    !byte $0d                               ; terminator

; ***************************************************************************************
; The fixed text under the play area: "Score         Lives     Level"
; but with the top bit being the conveyor direction for each level (for the first 20 bytes)
fixedText
    !text $00 + 'S', $80 + 'c', $00 + 'o', $80 + 'r', $00 + 'e'
    !text $00 + ' ', $00 + $09, $80 + $09, $80 + $09, $00 + $09
    !text $00 + $09, $80 + $09, $80 + ' ', $00 + ' ', $00 + 'L'
    !text $00 + 'i', $80 + 'v', $00 + 'e', $80 + 's', $00 + ' '
    !text $09, $09, $20, $20, "Level"
fixedTextEnd



; ***************************************************************************************
pedestalMessage
    !byte $11, $01                  ; COLOUR 1
    !byte $1f, $13, $0f             ; TAB(19,15)
    !byte $80, $81                  ; draw pedestal
    !byte $0a, $08, $08             ; down and back
    !byte $82, $83                  ; draw pedestal
pedestalMessageEnd

; ***************************************************************************************
keysToRead
    ;      f0,  f1,  f2,  f3,  f4,  f5,  f6,  f7,  f8,  f9
    !byte $df, $8e, $8d, $8c, $eb, $8b, $8a, $e9, $89, $88
keysToReadEnd

; ***************************************************************************************
dangerAreas
    !byte  7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7

; ***************************************************************************************
cacheOffsetX
    !byte 0, 1, 0, 1, 0, 1
cacheOffsetY
    !byte 0, 0, 1, 1, 2, 2

; ***************************************************************************************
creditsMessage
    !byte 18, 0, 129                ; GCOL 0,129
    !byte 24                        ; define graphics window
    !word 20 * 32 - 8               ; left
    !word 19 * 32                   ; bottom
    !word 37 * 32 + 8               ; right
    !word (32-6)*32                 ; top
    !byte 16                        ; clear graphics area

    !byte 18, 0, 128                ; GCOL 0,128
    !byte 26                        ; reset text window

    !byte 17, 2                     ; COLOUR 1
    !byte 31, 6, 18                 ; TAB
    !text "2021 Edition by TobyLobster" ;
    !byte 17, 3                     ;
    !byte 31, 20, 2                 ; TAB
    !text "SOFTWARE PROJECTS"       ;
    !byte 5                         ;
    !byte 18, 0, 3                  ; GCOL 0,3
    !byte 25, 4                     ;
    !word 780, 896                  ;
    !text "Presents"                ;
    !byte 25, 4                     ;
    !word 656, 512 + 32 + 24        ;
    !text "Original program"        ;
    !byte 25, 4                     ;
    !word 656, 460 + 32 + 28        ;
    !text "by Matthew Smith"        ;
    !byte 25, 4                     ;
    !word 876, 700 + 32             ;
    !text "by"                      ;
    !byte 25, 4                     ;
    !word 720, 700-32*1             ;
    !text "D.J.COATHUPE"            ;
    !byte 18, 0, 3                  ; GCOL
    !byte 25, 4                     ;
    !word 368, 390                  ;
    !text "High Score "             ;

    !byte 4                         ; VDU 4
    !byte 23, 1, 0, 0,0,0,0,0,0,0,0 ; cursor off

    !byte 17, 129                   ; COLOUR 129
    !byte 31, 20, 7                 ; TAB
creditsMessageEnd

gameOverMessage
    !text "Game", 9, 9, 9, 9, "Over"
gameOverMessageEnd

; ***************************************************************************************
oswordSoundBlock
    !byte $01, $00, $00, $00, $00, $00, $00, $00    ;
oswordSoundBlock2
    !byte $02, $00, $02, $00, $c8, $00, $01, $00    ;
oswordSoundBlock3
    !byte $02, $00, $00, $00, $00, $00, $01, $00    ;

; ***************************************************************************************
verticalGuardianTolerancesTL
;         eugene, kong, telephone, eye, skylab, safe, triangle, amoebatron, wacky am.
    !byte 6     , 3   , 4        , 8  , 1     , 1   , 6       , 4         , 5
verticalGuardianTolerancesTR
    !byte 6     , 3   , 4        , 4  , 1     , 1   , 1       , 4         , 5
verticalGuardianTolerancesBL
    !byte 5     , 4   , 3        , 3  , 3     , 0   , 3       , 2         , 3
verticalGuardianTolerancesBR
    !byte 5     , 4   , 3        , 3  , 3     , 0   , 3       , 2         , 3

; ***************************************************************************************
toFullColour
    !byte $00, $11, $22, $33, $44, $55, $66, $77, $88, $99, $aa, $bb, $cc, $dd, $ee, $ff


!if * > $7fa0 {
    !error "space is wrong, ", *
}
free3 = $7fa0 - *
    ; ***********************************************************************************
    * = $7fa0
backgroundCache
    * = * + 16 * 6

!if * != $8000 {
    !error "space is wrong ", *
}
}

allFree = free1 + free2 + free3
