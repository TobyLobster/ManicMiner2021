; miner2021.a
;

; constants
charSPACE                       = $20       ;

; OS memory locations
vduTextColourByteOR             = $D2       ; } bytes to implement current foreground
vduTextColourByteEOR            = $D3       ; } and background text colours
vduWriteCursorScreenAddressLow  = $D8       ; address of the top of the cell
interruptAccumulator            = $FC       ; RESERVED for INTERRUPTS
irqv1                           = $204      ;
irqv2                           = $206      ;

;vduBackgroundTextColour         = $0358     ; Current colour stored as the byte value to colour the whole byte the given colour
softCharacterDefinitions        = $0c00     ;

logicalScreenStart              = $3000     ;

videoULAPaletteRegister             = $fe21     ; Video ULA palette register

; System timer 1
systemVIATimer1CounterLow           = $fe44     ;
systemVIATimer1CounterHigh          = $fe45     ;
systemVIATimer1LatchLow             = $fe46     ;
systemVIATimer1LatchHigh            = $fe47     ;

systemVIAAuxiliaryControlRegister   = $fe4b     ;
systemVIAInterruptFlagRegister      = $fe4d     ;
systemVIAInterruptEnableRegister    = $fe4e     ;

; User timer 1
userVIATimer1CounterLow             = $fe64     ;
userVIATimer1CounterHigh            = $fe65     ;
userVIATimer1LatchLow               = $fe66     ;
userVIATimer1LatchHigh              = $fe67     ;

userVIAAuxiliaryControlRegister     = $fe6b     ;
userVIAInterruptFlagRegister        = $fe6d     ;
userVIAInterruptEnableRegister      = $fe6e     ;

OSWRCH                          = $ffee     ;
OSWORD                          = $fff1     ;
OSBYTE                          = $fff4     ;
OSCLI                           = $fff7     ;

; ***************************************************************************************
; game specifics

; zero page memory locations
meteorTailAnimationOffset       = $3f       ;
energyFieldSpriteOffset         = $3f       ;
collisionFudgeFactor            = $5a       ;

altScreenAddressLow             = $00       ;
altScreenAddressHigh            = $01       ;
cachedCellX                     = $02       ;
cachedCellY                     = $03       ;
cursorX                         = $04       ;
cursorY                         = $05       ;
readCharScreenAddressLow        = $06       ;
readCharScreenAddressHigh       = $07       ;
clock                           = $08       ;
oldClock                        = $09       ;
cellScreenAddressLow            = $0a       ;
cellScreenAddressHigh           = $0b       ;
airScreenAddressLow             = $0c       ;
airScreenAddressHigh            = $0d       ;

airRemainingOffsetWithinCell    = $0e       ;
airRemainingDelayCounter        = $0f       ;
score                           = $10       ; three bytes for the BCD score
score2                          = $11       ;
score3                          = $12       ;

lives                           = $13       ;
level20EnergyFieldsTimer        = $14       ;
willyHighestPointReachedOnCurrentJump = $15 ;
willyIsOnGround                 = $16       ;
willyOffsetWithinCellY          = $17       ;
airRemaining                    = $18       ;
playerPixelX                    = $19       ;
playerPixelY                    = $1a       ;
newPlayerPixelX                 = $1b       ;
newPlayerPixelY                 = $1c       ;
hasDrawnConveyors               = $1d       ;
tempHigh                        = $1e       ;
saveX                           = $1f       ;
characterFromScreen             = $20       ;
characterFromScreen2            = $21       ;
characterFromScreen3            = $22       ;
characterFromScreen4            = $23       ;
characterFromScreen5            = $24       ;
characterFromScreen6            = $25       ;
characterFromScreen7            = $26       ;
characterFromScreen8            = $27       ;
exitPositionX                   = $28       ;
exitPositionY                   = $29       ;
verticalAnimationCounter        = $2a       ; animation for vertical guardinas
currentGuardianX                = $2b       ;
currentGuardianY                = $2c       ;
currentGuardianExtent1          = $2d       ;
currentGuardianExtent2          = $2e       ;
currentGuardianIndex            = $2f       ;
tempGuardianSpriteOffset        = $30       ;
guardianSpriteOffsets           = $31       ;
guardianSpriteOffsets2          = $32       ;
guardianSpriteOffsets3          = $33       ;
tempGuardianSpriteAddrLow       = $34       ;
tempGuardianSpriteAddrHigh      = $35       ;
currentGuardianSpeed            = $36       ;
screenCharacterAPrime           = $37       ;
willyDeltaX                     = $38       ;
willyAnimationEOR               = $39       ; 0 if pointing right; 3 if pointing left
willyGraphicsPage               = $3a       ;
willyChangedDirection           = $3b       ;

; reading a character from the screen
tempLoopCounter                 = $3c       ;
tempByte                        = $3d       ;
tempMask                        = $3e       ;
plotColourMask                  = $3f       ;
tempScreenAddressLow            = $40       ;
tempScreenAddressHigh           = $41       ;

keyCounter                      = $42       ;
flashingExitCounter             = $43       ;

willyFalling                    = $44       ;
willyJustLandedOnConveyor       = $45       ;
screenCharacterA                = $46       ;
screenCharacterB                = $47       ;
isJumping                       = $48       ;
playerHeightOnTakeOff           = $49       ;
jumpPhase                       = $4a       ;
jumpDirection                   = $4b       ;
spriteRowCounter                = $4c       ;
playerXOffsetWithinCell         = $4d       ;
playerYNegativeOffsetWithinCell = $4e       ;
willyIsOnConveyor               = $4f       ;
willyDirectionAgainstFlowOfConveyor = $50   ; $01 or $ff when moving against the flow of the conveyor
spriteColourMask                = $51       ;
currentGuardianColour           = $52       ;
currentGuardianXPosition        = $53       ;
drawGuardianLoopCounter         = $54       ;
conveyorX                       = $55       ;
conveyorY                       = $56       ;
conveyorLength                  = $57       ;
conveyorSpriteOffset            = $58       ;
tempA                           = $59       ;
tempX                           = $5a       ;
tempY                           = $5b       ;
byteToReverse                   = $5c       ;
keysLeft                        = $5d       ;
vsyncCounter                    = $5e       ;
musicCounter                    = $5f       ;
channel2Frequency               = $60       ;
previousNoteByte                = $61       ;
rememberCharacterToDraw         = $62       ;


levelDataOffset                 = $70       ;

plotMode                        = $70       ;
plotX                           = $71       ;
plotY                           = $72       ;
plotXOffset                     = $73       ;
plotYOffset                     = $74       ;
plotScreenAddressLow            = $75       ;
plotScreenAddressHigh           = $76       ;
plotSourceSpriteAddressLow      = $77       ;
plotSourceSpriteAddressHigh     = $78       ;

levelFeatureIndex               = $79       ;
currentLevel                    = $80       ;
levelColours                    = $81       ;
levelColours2                   = $82       ;
screenLow                       = $85       ;
screenHigh                      = $86       ;
cellPlotSourceSpriteAddressLow  = $87       ;
cellPlotSourceSpriteAddressHigh = $88       ;
rasterArea                      = $89       ;
zpGuardianPositionX             = $8a       ;
zpGuardianPositionY             = $8b       ;
zpGuardianLimit1                = $8c       ;
zpGuardianLimit2                = $8d       ;
zpGuardianAnimIndex             = $8e       ;

verticalGuardianMODE1Address    = $0400     ;
verticalGuardianMODE1Address1   = $0440     ;
verticalGuardianMODE1Address2   = $0480     ;
verticalGuardianMODE1Address3   = $04c0     ;

screenStartAddress              = $3280     ; start of visible screen
blankAreaOfScreen               = $34d0     ; empty screen area to the right of the play area
screenEndAddress                = $6480     ; end of visible screen
backgroundCache                 = $6ba0     ; six character cells copied from the screen before the player is drawn

* = $0500

; ***************************************************************************************
; 8 poses of Miner Willy, 4 walking right and four walking left
; stored in Mode 1 format
minerWilly
!pseudopc $0500 {
willyRight0
    ; right0
    !byte $00, $33, $77, $33, $33, $33, $11, $33, $66, $ee, $cc, $44, $ee, $cc, $88, $cc
eraseGuardianEmptyBytes
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $77, $77, $ff, $ff, $33, $77, $66, $77, $ee, $ee, $77, $bb, $cc, $66, $ee, $77
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00

    ; right1
    !byte $00, $00, $11, $00, $00, $00, $00, $00, $11, $ff, $ff, $dd, $ff, $ff, $66, $ff
    !byte $88, $88, $00, $00, $88, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $11, $11, $11, $11, $00, $00, $00, $00, $bb, $bb, $bb, $dd, $ff, $66, $66, $77
    !byte $88, $88, $88, $88, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00

    ; right2
willyRight2
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $77, $33, $33, $33, $11, $33
    !byte $66, $ee, $cc, $44, $ee, $cc, $88, $cc, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $77, $77, $ff, $ff, $33, $77, $66, $77
    !byte $ee, $ee, $77, $bb, $cc, $66, $ee, $77, $00, $00, $00, $00, $00, $00, $00, $00

    ; right3
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $00, $00, $00
    !byte $11, $ff, $ff, $dd, $ff, $ff, $66, $ff, $88, $88, $00, $00, $88, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $11, $33, $77, $66, $00, $11, $33, $33
    !byte $ff, $ff, $ff, $ff, $ff, $dd, $00, $88, $88, $cc, $ee, $66, $88, $aa, $ee, $44

    ; $0600
willyLeft0
    ; left0
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $66, $77, $33, $22, $77, $33, $11, $33, $00, $cc, $ee, $cc, $cc, $cc, $88, $cc
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $77, $77, $ee, $dd, $33, $66, $77, $ee, $ee, $ee, $ff, $ff, $cc, $ee, $66, $ee

    ; left1
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $11, $11, $00, $00, $11, $00, $00, $00
    !byte $88, $ff, $ff, $bb, $ff, $ff, $66, $ff, $00, $00, $88, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $11, $11, $11, $11, $00, $00, $00, $00
    !byte $dd, $dd, $dd, $bb, $ff, $66, $66, $ee, $88, $88, $88, $88, $00, $00, $00, $00

    ; left2
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $66, $77, $33, $22, $77, $33, $11, $33
    !byte $00, $cc, $ee, $cc, $cc, $cc, $88, $cc, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $77, $77, $ee, $dd, $33, $66, $77, $ee
    !byte $ee, $ee, $ff, $ff, $cc, $ee, $66, $ee, $00, $00, $00, $00, $00, $00, $00, $00

    ; left3
    !byte $11, $11, $00, $00, $11, $00, $00, $00, $88, $ff, $ff, $bb, $ff, $ff, $66, $ff
    !byte $00, $00, $88, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $11, $33, $77, $66, $11, $55, $77, $22, $ff, $ff, $ff, $ff, $ff, $bb, $00, $11
    !byte $88, $cc, $ee, $66, $00, $88, $cc, $cc, $00, $00, $00, $00, $00, $00, $00, $00
}
minerWillyEnd


; ***************************************************************************************
manicMinerGraphic
    ; Small caps flowery "MANIC MINER (C)" graphic
    !byte %........    ;              ####   ###
    !byte %........    ;               ###  ###      ###     ###   #### ####    #####
    !byte %........    ;              ## # ####     ## ##     ###   ##   ##    ##   ##
    !byte %......##    ;       ##    ##  ### ##    ##   ##    ####  ##   ##   ##
    !byte %.....#..    ;      #  #  ##   ##  ##    ##   ##    ## ## ##   ##   ##
    !byte %.....#..    ;      #    ##        ##   #########   ##  ####   ##   ##
    !byte %.....#..    ;      #   ##         ##   ##     ##   ##   ###   ##    ##   ##
    !byte %......##    ;       ####         #### ####   #### ####   ##  ####    #####

    !byte %.....###    ;        #######    ####                                           ####
    !byte %......##    ;       #    ####  ####  #### ###   #### ######## ########        #    #
    !byte %.....##.    ;       #  # ## #### ##   ##   ###   ##   ##   ##  ##    ##      #  ##  #
    !byte %....##..    ;        ##  ##  ##  ##   ##   ####  ##   ## #     ##    ##      # #    #
    !byte %#..##...    ;            ##      ##   ##   ## ## ##   ####     #######       # #    #
    !byte %..##....    ;            ##      ##   ##   ##  ####   ## #     ##   ##       #  ##  #
    !byte %.##.....    ;            ##      ##   ##   ##   ###   ##   ##  ##    ##  #    #    #
    !byte %##......    ;           ####    #### #### ####   ##  ######## ####    ###      ####

    !byte %#...###.
    !byte %#..###..
    !byte %#.####..
    !byte %###.##..
    !byte %##..##..
    !byte %....##..
    !byte %....##..
    !byte %...####.

    !byte %........
    !byte %....###.
    !byte %...##.##
    !byte %..##...#
    !byte %..##...#
    !byte %.#######
    !byte %.##.....
    !byte %####...#

    !byte %........
    !byte %....###.
    !byte %.....###
    !byte %#....###
    !byte %#....##.
    !byte %##...##.
    !byte %##...##.
    !byte %###.####

    !byte %........
    !byte %..####.#
    !byte %...##...
    !byte %#..##...
    !byte %##.##...
    !byte %.####...
    !byte %..###...
    !byte %...##..#

    !byte %........
    !byte %###....#
    !byte %##....##
    !byte %##...##.
    !byte %##...##.
    !byte %##...##.
    !byte %##....##
    !byte %###....#

    !byte %........
    !byte %####....
    !byte %...##...
    !byte %........
    !byte %........
    !byte %........
    !byte %...##...
    !byte %####....

    !byte %........
    !byte %.......#
    !byte %.......#
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %#######.
    !byte %....####
    !byte %..#.##.#
    !byte %##..##..
    !byte %....##..
    !byte %....##..
    !byte %....##..
    !byte %...####.

    !byte %...####.
    !byte %..####..
    !byte %###.##..
    !byte %##..##..
    !byte %....##..
    !byte %....##..
    !byte %....##..
    !byte %...####.

    !byte %........
    !byte %####.###
    !byte %.##...##
    !byte %.##...##
    !byte %.##...##
    !byte %.##...##
    !byte %.##...##
    !byte %####.###

    !byte %........
    !byte %...####.
    !byte %#...##..
    !byte %##..##..
    !byte %.##.##..
    !byte %..####..
    !byte %...###..
    !byte %#...##..

    !byte %........
    !byte %########
    !byte %.##...##
    !byte %.##.#...
    !byte %.####...
    !byte %.##.#...
    !byte %.##...##
    !byte %########

    !byte %........
    !byte %.#######
    !byte %..##....
    !byte %..##....
    !byte %..######
    !byte %..##...#
    !byte %..##....
    !byte %.####...

    !byte %........
    !byte %#.......
    !byte %##......
    !byte %##......
    !byte %#.......
    !byte %#.......
    !byte %##..#...
    !byte %.###....

    !byte %..####..
    !byte %.#....#.
    !byte %#..##..#
    !byte %#.#....#
    !byte %#.#....#
    !byte %#..##..#
    !byte %.#....#.
    !byte %..####..

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

; ***************************************************************************************
guardianPositions
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
guardianPositionsCopy
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00

!if * > $0800 {
    !error "space is wrong, ", *
}
free1 = $0800-*
* = $0800
; ***************************************************************************************
; $0800
    ; OS sound workspace
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $c0, $c0, $c0, $c0, $04, $04, $04, $04
    !byte $00, $64, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $00, $00, $00
    !byte $00, $05, $00, $00, $00, $30, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $8a, $00, $00, $ff, $fd, $c1, $00, $00, $f0, $00, $0e

    ; OS sound buffers
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $01, $01, $00, $64, $01, $08, $64, $01, $10, $64, $01, $18, $64, $01, $00, $f8
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00

    ; OS printer buffer
footSprite
    !byte $33, $22, $33, $22, $33, $00, $00, $11, $55, $aa, $55, $aa, $ff, $99, $99, $ff
    !byte $44, $cc, $44, $cc, $cc, $00, $00, $88, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $11, $11, $22, $22, $55, $44, $44, $ff, $00, $11, $22, $00, $99, $44, $44, $ff
    !byte $88, $88, $44, $bb, $22, $44, $00, $ff, $00, $00, $00, $88, $44, $22, $22, $ff


    ; OS Envelope definitions
    !byte $01, $78, $00, $00, $1e, $00, $00, $7e, $ff, $00, $ff, $7e, $5a, $00, $00, $00
    !byte $01, $00, $00, $00, $01, $01, $01, $7f, $ff, $ff, $fe, $7e, $01, $00, $00, $00
    !byte $05, $10, $00, $00, $07, $00, $00, $20, $f6, $fe, $fe, $7e, $64, $00, $00, $00
    !byte $01, $02, $00, $00, $64, $00, $00, $7e, $00, $00, $fe, $7e, $7e, $00, $00, $00

exitSprites2x2
    ; skull and crossbones
    !byte %.....###            ;     ######
    !byte %....####            ;    ########
    !byte %....####            ;    ########
    !byte %....#..#            ;    #  ##  #
    !byte %....#..#            ;    #  ##  #
    !byte %.....###            ;     ######
    !byte %.....#.#            ;     # ## #
    !byte %......#.            ;      #  #
    !byte %###.....            ; ##    ##    ##
    !byte %####....            ;#####      #####
    !byte %####....            ;#######  #######
    !byte %#..#....            ;     # #####
    !byte %#..#....            ;     ##### #
    !byte %###.....            ;#######  #######
    !byte %#.#.....            ;#####      #####
    !byte %.#......            ; ##          ##

    !byte %.##....#
    !byte %#####...
    !byte %#######.
    !byte %.....#.#
    !byte %.....###
    !byte %#######.
    !byte %#####...
    !byte %.##.....

    !byte %#....##.
    !byte %...#####
    !byte %.#######
    !byte %####....
    !byte %##.#....
    !byte %.#######
    !byte %...#####
    !byte %.....##.

    ; star box
    !byte %########            ;################
    !byte %#.......            ;#              #
    !byte %#.######            ;# ############ #
    !byte %#.######            ;# ############ #
    !byte %#.##.###            ;# ## ######### #
    !byte %#..#.#.#            ;#  # # ####### #
    !byte %#.#...##            ;# #   ######## #
    !byte %#.......            ;#       ##   # #
    !byte %########            ;# #   ### ###  #
    !byte %.......#            ;#  # # ####### #
    !byte %######.#            ;# ## ######### #
    !byte %######.#            ;# ############ #
    !byte %######.#            ;# ############ #
    !byte %######.#            ;# ############ #
    !byte %######.#            ;#              #
    !byte %##...#.#            ;################

    !byte %#.#...##
    !byte %#..#.#.#
    !byte %#.##.###
    !byte %#.######
    !byte %#.######
    !byte %#.######
    !byte %#.......
    !byte %########
    !byte %#.###..#
    !byte %######.#
    !byte %######.#
    !byte %######.#
    !byte %######.#
    !byte %######.#
    !byte %.......#
    !byte %########

    !byte %########            ;################
    !byte %.#...#..            ; #   #   #   #
    !byte %#..##..#            ;#  ##  ##  ##  #
    !byte %..#...#.            ;  #   #   #   #
    !byte %..#...#.            ;  #   #   #   #
    !byte %#..##..#            ;#  ##  ##  ##  #
    !byte %.#...#..            ; #   #   #   #
    !byte %.#...#..            ; #   #   #   #
    !byte %########            ;#  ##  ##  ##  #
    !byte %.#...#..            ;  #   #   #   #
    !byte %#..##..#            ;  #   #   #   #
    !byte %..#...#.            ;#  ##  ##  ##  #
    !byte %..#...#.            ; #   #   #   #
    !byte %#..##..#            ; #   #   #   #
    !byte %.#...#..            ;#  ##  ##  ##  #
    !byte %.#...#..            ;################

    !byte %#..##..#
    !byte %..#...#.
    !byte %..#...#.
    !byte %#..##..#
    !byte %.#...#..
    !byte %.#...#..
    !byte %#..##..#
    !byte %########
    !byte %#..##..#
    !byte %..#...#.
    !byte %..#...#.
    !byte %#..##..#
    !byte %.#...#..
    !byte %.#...#..
    !byte %#..##..#
    !byte %########

    !byte %########            ;################
    !byte %#####...            ;#####   #   ####
    !byte %#...#...            ;#   #   #  #   #
    !byte %#.#.#.#.            ;# # # # #  #   #
    !byte %#.#.#.#.            ;# # # # #  # # #
    !byte %#...#...            ;#   #   #    # #
    !byte %##.#....            ;## #    #  #   #
    !byte %##.#.#.#            ;## # # ## ###  #
    !byte %########            ;## # # # # # # #
    !byte %#...####            ;## #   # #   # #
    !byte %#..#...#            ;#   #  #  ###  #
    !byte %#..#...#            ;#   #  #      ##
    !byte %#..#.#.#            ;# # #   # # # ##
    !byte %#....#.#            ;# # # # # # # ##
    !byte %#..#...#            ;#   # # #   #  #
    !byte %#.###..#            ;################

    !byte %##.#.#.#
    !byte %##.#...#
    !byte %#...#..#
    !byte %#...#..#
    !byte %#.#.#...
    !byte %#.#.#.#.
    !byte %#...#.#.
    !byte %########
    !byte %.#.#.#.#
    !byte %.#...#.#
    !byte %..###..#
    !byte %......##
    !byte %#.#.#.##
    !byte %#.#.#.##
    !byte %#...#..#
    !byte %########

exitSprites1x1
    !byte %########
    !byte %#..##..#
    !byte %#.###.##
    !byte %########
    !byte %########
    !byte %#..##..#
    !byte %#.###.##
    !byte %########

    !byte %#...#...
    !byte %.#...#..
    !byte %..#...#.
    !byte %...#...#
    !byte %#...#...
    !byte %.#...#..
    !byte %..#...#.
    !byte %...#...#

    !byte %########
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %########

exitSprites1x2
    !byte %########
    !byte %#..#..#.
    !byte %#..#..#.
    !byte %#..#..#.
    !byte %#..#..#.
    !byte %#..#..#.
    !byte %#..#..#.
    !byte %#..#..#.

    !byte %#..#..#.
    !byte %#..#..#.
    !byte %#..#..#.
    !byte %#..#..#.
    !byte %#..#..#.
    !byte %#..#..#.
    !byte %#..#..#.
    !byte %########

    !byte %########
    !byte %#......#
    !byte %#.######
    !byte %#.######
    !byte %#.##....
    !byte %#.##....
    !byte %#.##....
    !byte %####....

    !byte %####....
    !byte %#.##....
    !byte %#.##....
    !byte %#.##....
    !byte %#.######
    !byte %#.######
    !byte %#......#
    !byte %########

    !byte %########
    !byte %#.......
    !byte %##......
    !byte %#.#.....
    !byte %#..#....
    !byte %##..#...
    !byte %#.#..#..
    !byte %#..#..#.

    !byte %##..#..#
    !byte %#.#..#..
    !byte %#..#..#.
    !byte %##..#..#
    !byte %#.#..#..
    !byte %##..#..#
    !byte %#..#..#.
    !byte %########

    !byte %########
    !byte %#.......
    !byte %#......#
    !byte %#.....#.
    !byte %#....#..
    !byte %#...#...
    !byte %#..#....
    !byte %#.#....#

    !byte %#.#....#
    !byte %#..#....
    !byte %#...#...
    !byte %#....#..
    !byte %#.....#.
    !byte %#......#
    !byte %#.......
    !byte %########

    !byte %########
    !byte %#.......
    !byte %#...####
    !byte %#...####
    !byte %#...####
    !byte %#...####
    !byte %#...####
    !byte %#...##..

    !byte %#...##..
    !byte %#...####
    !byte %#...####
    !byte %#...####
    !byte %#...####
    !byte %#...####
    !byte %#.......
    !byte %########

    !byte %########
    !byte %########
    !byte %######..
    !byte %#####...
    !byte %####....
    !byte %###.....
    !byte %##.....#
    !byte %##....#.

    !byte %##....#.
    !byte %##.....#
    !byte %###.....
    !byte %####....
    !byte %#####...
    !byte %######..
    !byte %########
    !byte %########

    !byte %########
    !byte %#.......
    !byte %#.......
    !byte %########
    !byte %########
    !byte %#.......
    !byte %#.......
    !byte %########

    ; $0a00
    !byte %########
    !byte %#.......
    !byte %#.......
    !byte %########
    !byte %########
    !byte %#.......
    !byte %#.......
    !byte %########

    !byte %########
    !byte %#.......
    !byte %#.######
    !byte %#.#.....
    !byte %#.#.####
    !byte %#.#.#...
    !byte %#.#.#.##
    !byte %#.#.#.#.

    !byte %#.#.#.#.
    !byte %#.#.#.#.
    !byte %#.#.#.#.
    !byte %#.#.#.#.
    !byte %#.#.#.#.
    !byte %#.#.#.#.
    !byte %#.#.#.#.
    !byte %########

    !byte %########
    !byte %#.......
    !byte %#.##....
    !byte %#.#.....
    !byte %#.#.#.#.
    !byte %#.#.#.#.
    !byte %#.#.#.#.
    !byte %#.#.#.#.

    !byte %#.#.#.#.
    !byte %#.#.#.#.
    !byte %#.#.#.#.
    !byte %#.#.#.#.
    !byte %#.#.....
    !byte %#.##....
    !byte %#.......
    !byte %########

    !byte %########
    !byte %#.......
    !byte %#.######
    !byte %#.#.....
    !byte %#.#.####
    !byte %#.#.#...
    !byte %#.#.#.##
    !byte %#.#.#.#.

    !byte %#.#.#.#.
    !byte %#.#.#.##
    !byte %#.#.#...
    !byte %#.#.####
    !byte %#.#.....
    !byte %#.######
    !byte %#.......
    !byte %########

    !byte %....####
    !byte %...#####
    !byte %..######
    !byte %..####..
    !byte %..###...
    !byte %..###...
    !byte %..###...
    !byte %..###...

    !byte %..###...
    !byte %...###..
    !byte %....###.
    !byte %....###.
    !byte %##..###.
    !byte %#######.
    !byte %######..
    !byte %........

    !byte %..###...
    !byte %...###..
    !byte %....###.
    !byte %....###.
    !byte %##..###.
    !byte %#######.
    !byte %######..
    !byte %........

    !byte %...###..
    !byte %..###...
    !byte %.###....
    !byte %.###....
    !byte %.###..##
    !byte %.#######
    !byte %..######
    !byte %........

spikePlant
    !byte %.#...#..
    !byte %..#.#...
    !byte %#..#.#..
    !byte %.#.#...#
    !byte %..##.#.#
    !byte %##.#.##.
    !byte %.#.##...
    !byte %...#....

allOtherSpikes
    !byte %.######.
    !byte %..####..
    !byte %...###..
    !byte %...##...
    !byte %...##...
    !byte %....#...
    !byte %....#...
    !byte %....#...

    !byte %########
    !byte %#######.
    !byte %.######.
    !byte %.#..##..
    !byte %.#..##..
    !byte %....##..
    !byte %....#...
    !byte %....#...

    !byte %...#....
    !byte %...#....
    !byte %##.#.##.
    !byte %..###...
    !byte %##.#.##.
    !byte %..###...
    !byte %.#.#.#..
    !byte %#..#..#.

    !byte %.##...##
    !byte %...#.#..
    !byte %...###..
    !byte %.##.#.##
    !byte %...###..
    !byte %..#...#.
    !byte %.##...##
    !byte %...#.#..

    !byte %..####..
    !byte %...##...
    !byte %#.####.#
    !byte %###..###
    !byte %###..###
    !byte %#.####.#
    !byte %...##...
    !byte %..####..

    !byte %#.#..#.#
    !byte %.#....#.
    !byte %..####..
    !byte %##.##.##
    !byte %..####..
    !byte %.######.
    !byte %#.#..#.#
    !byte %..#..#..

    !byte %.#..#...
    !byte %#.##..#.
    !byte %.#.###.#
    !byte %...#..#.
    !byte %.###....
    !byte %#.#.###.
    !byte %#.#.#..#
    !byte %.#...###

    !byte %.#...#..
    !byte %.#...#..
    !byte %.#...#..
    !byte %.#...#..
    !byte %.##..##.
    !byte %###.###.
    !byte %###.###.
    !byte %########

    !byte %#.####.#
    !byte %..#.#...
    !byte %.......#
    !byte %#..##.#.
    !byte %.#.##..#
    !byte %#.....#.
    !byte %...#...#
    !byte %..#.#...

    ; thread
    !byte %...#....
    !byte %...#....
    !byte %...#....
    !byte %...#....
    !byte %...#....
    !byte %...#....
    !byte %...#....
    !byte %...#....

    ; key
    !byte %..##....
    !byte %.#..#...
    !byte %#...#...
    !byte %#..#....
    !byte %.##.#...
    !byte %.....#..
    !byte %....#.#.
    !byte %.....#..

    ; ice lolly
    !byte %.#.#....
    !byte %#.#.#...
    !byte %.#.#.#..
    !byte %#.#.#...
    !byte %.#.##...
    !byte %..#..#..
    !byte %......#.
    !byte %.......#

    ; cube
    !byte %...#####
    !byte %..#...##
    !byte %.#...###
    !byte %########
    !byte %#...####
    !byte %#...###.
    !byte %#...##..
    !byte %#####...

    ; banana
    !byte %#.......
    !byte %##......
    !byte %###.##..
    !byte %.###..#.
    !byte %..#.#...
    !byte %.#.#.#..
    !byte %#...#.#.
    !byte %#....###

    ; apple
    !byte %....#...
    !byte %....#...
    !byte %..#####.
    !byte %.#.#####
    !byte %.#.#####
    !byte %.#...###
    !byte %.#.....#
    !byte %..#####.

    !byte %...##...
    !byte %.##..##.
    !byte %.#....#.
    !byte %##.##..#
    !byte %##..#..#
    !byte %.##...#.
    !byte %.######.
    !byte %...##...

    !byte %..####..
    !byte %.#.##.#.
    !byte %#..#.#.#
    !byte %##.#.#.#
    !byte %##.#.#.#
    !byte %##.#.#.#
    !byte %.#.##.#.
    !byte %..####..

    !byte %#.#.#.#.
    !byte %#.#.#.#.
    !byte %#######.
    !byte %#######.
    !byte %#######.
    !byte %#######.
    !byte %#.#.#.#.
    !byte %#.#.#.#.

    !byte %.#####..
    !byte %..###...
    !byte %.##..#..
    !byte %##.####.
    !byte %#...###.
    !byte %##.####.
    !byte %#.....#.
    !byte %.#####..

    !byte %....####
    !byte %....#..#
    !byte %..######
    !byte %..#..#..
    !byte %######..
    !byte %#..#....
    !byte %####....
    !byte %........

    !byte %########
    !byte %########
    !byte %##.##.##
    !byte %.##.###.
    !byte %##...#.#
    !byte %.#......
    !byte %........
    !byte %........

    !byte %########
    !byte %########
    !byte %.##..##.
    !byte %#..##..#
    !byte %.##..##.
    !byte %#..##..#
    !byte %########
    !byte %........

    !byte %########
    !byte %########
    !byte %#..##..#
    !byte %#..##..#
    !byte %########
    !byte %#..##..#
    !byte %.##..##.
    !byte %........

    !byte %.#####..
    !byte %########
    !byte %###.####
    !byte %...####.
    !byte %...###..
    !byte %....#...
    !byte %....#...
    !byte %....#...

    !byte %########
    !byte %########
    !byte %##..#.#.
    !byte %.##..#.#
    !byte %#..#..#.
    !byte %..#.#...
    !byte %#.....#.
    !byte %........

    !byte %########
    !byte %########
    !byte %...#...#
    !byte %..#...#.
    !byte %.#...#..
    !byte %#...#...
    !byte %########
    !byte %########

    !byte %########
    !byte %########
    !byte %.##...#.
    !byte %.##..#..
    !byte %.####...
    !byte %.###....
    !byte %.##.....
    !byte %.##.....

    !byte %########
    !byte %########
    !byte %.#...##.
    !byte %..#..##.
    !byte %...####.
    !byte %....###.
    !byte %.....##.
    !byte %.....##.

    !byte %..#...#.
    !byte %########
    !byte %#...#...
    !byte %########
    !byte %..#...#.
    !byte %########
    !byte %#...#...
    !byte %########

    !byte %#......#
    !byte %##....##
    !byte %#.#..#.#
    !byte %#..##..#
    !byte %#..##..#
    !byte %#.#..#.#
    !byte %##....##
    !byte %#......#

    !byte %#######.
    !byte %.#####.#
    !byte %..###.##
    !byte %...#.###
    !byte %...#####
    !byte %..#..###
    !byte %.#....##
    !byte %#......#

    !byte %#.##.#.#
    !byte %#.##.#.#
    !byte %#.##.#.#
    !byte %#.#.##.#
    !byte %#.#.#.##
    !byte %#.##.#.#
    !byte %##.#.#.#
    !byte %##.#.#.#

    !byte %########
    !byte %#......#
    !byte %#......#
    !byte %########
    !byte %########
    !byte %#......#
    !byte %#......#
    !byte %########

    !byte %########
    !byte %#..##..#
    !byte %#.###.##
    !byte %########
    !byte %########
    !byte %#..##..#
    !byte %#.###.##
    !byte %########

    !byte %########
    !byte %#.#..#.#
    !byte %#.#..#.#
    !byte %#.#..#.#
    !byte %#.#..#.#
    !byte %#.#..#.#
    !byte %#.#..#.#
    !byte %########

    !byte %#.#.#.#.
    !byte %.#.#.#.#
    !byte %#.#.#.#.
    !byte %.#.#.#.#
    !byte %#.#.#.#.
    !byte %.#.#.#.#
    !byte %#.#.#.#.
    !byte %.#.#.#.#

    !byte %########
    !byte %##.##.##
    !byte %#.#..#..
    !byte %..#..#..
    !byte %.#.#..#.
    !byte %..#.....
    !byte %....#...
    !byte %........

    !byte %########
    !byte %########
    !byte %..##..##
    !byte %##..##..
    !byte %..#....#
    !byte %....##..
    !byte %###..#.#
    !byte %........

    !byte %.#####..
    !byte %########
    !byte %#....###
    !byte %....##..
    !byte %....#...
    !byte %....#...
    !byte %....#...
    !byte %........

    !byte %########
    !byte %#.#.#.#.
    !byte %.#.#.#.#
    !byte %#.#.#.#.
    !byte %.#.#.#.#
    !byte %#.#.#.#.
    !byte %.#.#.#.#
    !byte %#.#.#.#.

    !byte %#######.                 ; conveyor 1
    !byte %.##..##.
    !byte %#######.
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %#####.##
    !byte %.##..##.
    !byte %#.######
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %###.####
    !byte %.##..##.
    !byte %###.####
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %#.######
    !byte %.##..##.
    !byte %#####.##
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %##....##                 ; conveyor 2
    !byte %.##..##.
    !byte %...##...
    !byte %.##..##.
    !byte %........
    !byte %#..##..#
    !byte %########
    !byte %........

    !byte %....####
    !byte %.##..##.
    !byte %....####
    !byte %.##..##.
    !byte %........
    !byte %#..##..#
    !byte %########
    !byte %........

    !byte %..####..
    !byte %.##..##.
    !byte %#......#
    !byte %.##..##.
    !byte %........
    !byte %#..##..#
    !byte %########
    !byte %........

    !byte %####....
    !byte %.##..##.
    !byte %####....
    !byte %.##..##.
    !byte %........
    !byte %#..##..#
    !byte %########
    !byte %........

    !byte %##....##                 ; conveyor 3
    !byte %.##..##.
    !byte %...##...
    !byte %.##..##.
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %....####
    !byte %.##..##.
    !byte %....####
    !byte %.##..##.
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %..####..
    !byte %.##..##.
    !byte %#......#
    !byte %.##..##.
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %####....
    !byte %.##..##.
    !byte %####....
    !byte %.##..##.
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %########                 ; char 128 ($80, $A0, $C0, $E0)
    !byte %########
    !byte %##.##.##
    !byte %..#.###.
    !byte %##...#.#
    !byte %..#.....
    !byte %........
    !byte %........

    !byte %########                 ; char 129 ($81, $A1, $C1, $E1)
    !byte %########
    !byte %.##..##.
    !byte %#..##..#
    !byte %.##..##.
    !byte %#..##..#
    !byte %########
    !byte %........

    !byte %########                 ; char 130 ($82, $A2, $C2, $E2)
    !byte %#...#...
    !byte %..#...#.
    !byte %#...#...
    !byte %..#...#.
    !byte %#...#...
    !byte %..#...#.
    !byte %#...#...

    !byte %........                 ; char 131 ($83, $A3, $C3, $E3)
    !byte %########
    !byte %#...#...
    !byte %..#...#.
    !byte %#...#...
    !byte %..#...#.
    !byte %#...#...
    !byte %..#...#.

    !byte %........                 ; char 132 ($84, $A4, $C4, $E4)
    !byte %........
    !byte %########
    !byte %#...#...
    !byte %..#...#.
    !byte %#...#...
    !byte %..#...#.
    !byte %#...#...

    !byte %........                 ; char 133 ($85, $A5, $C5, $E5)
    !byte %........
    !byte %........
    !byte %########
    !byte %#...#...
    !byte %..#...#.
    !byte %#...#...
    !byte %..#...#.

    !byte %........                 ; char 134 ($86, $A6, $C6, $E6)
    !byte %........
    !byte %........
    !byte %........
    !byte %########
    !byte %#...#...
    !byte %..#...#.
    !byte %#...#...

    !byte %........                 ; char 135 ($87, $A7, $C7, $E7)
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %########
    !byte %#...#...
    !byte %..#...#.

    !byte %........                 ; char 136 ($88, $A8, $C8, $E8)
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %########
    !byte %#...#...

    !byte %........                 ; char 137 ($89, $A9, $C9, $E9)
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %########

    !byte %........                 ; char 138 ($8A, $AA, $CA, $EA)
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %##....##                 ; char 139 ($8B, $AB, $CB, $EB)
    !byte %.##..##.
    !byte %...##...
    !byte %.##..##.
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %....####                 ; char 140 ($8C, $AC, $CC, $EC)
    !byte %.##..##.
    !byte %....####
    !byte %.##..##.
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %..####..                 ; char 141 ($8D, $AD, $CD, $ED)
    !byte %.##..##.
    !byte %#......#
    !byte %.##..##.
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %####....                 ; char 142 ($8E, $AE, $CE, $EE)
    !byte %.##..##.
    !byte %####....
    !byte %.##..##.
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %..#...#.                 ; char 143 ($8F, $AF, $CF, $EF)
    !byte %########
    !byte %#...#...
    !byte %########
    !byte %..#...#.
    !byte %########
    !byte %#...#...
    !byte %########
keySprite
    !byte %..##....                 ; char 144 ($90, $B0, $D0, $F0)
    !byte %.#..#...
    !byte %#...#...
    !byte %#..#....
    !byte %.##.#...
    !byte %.....#..
    !byte %....#.#.
    !byte %.....#..

exitSprite
    ; exit0
    !byte %########                 ; char 145 ($91, $B1, $D1, $F1)
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %########

    ; exit1
    !byte %########                 ; char 146 ($92, $B2, $D2, $F2)
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %########

    ; exit2
    !byte %########                 ; char 147 ($93, $B3, $D3, $F3)
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %########

    ; exit3
    !byte %########                 ; char 148 ($94, $B4, $D4, $F4)
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %########

    !byte %########                 ; char 149 ($95, $B5, $D5, $F5)
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#
    !byte %#......#

    !byte %########                 ; char 150 ($96, $B6, $D6, $F6)
    !byte %########
    !byte %...##...
    !byte %...##...
    !byte %...##...
    !byte %...##...
    !byte %...##...
    !byte %...##...

    !byte %........                 ; char 151 ($97, $B7, $D7, $F7)
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %########                 ; char 152 ($98, $B8, $D8, $F8)
    !byte %#......#
    !byte %#......#
    !byte %.#....#.
    !byte %..####..
    !byte %...#....
    !byte %.##.....
    !byte %.##.....

    !byte %########                 ; char 153 ($99, $B9, $D9, $F9)
    !byte %#......#
    !byte %#......#
    !byte %.#....#.
    !byte %..####..
    !byte %....#...
    !byte %.....##.
    !byte %.....##.

    !byte %........                 ; char 154 ($9A, $BA, $DA, $FA)
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %........                 ; char 155 ($9B, $BB, $DB, $FB)
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %........                 ; char 156 ($9C, $BC, $DC, $FC)
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %........                 ; char 157 ($9D, $BD, $DD, $FD)
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %....#...                 ; char 158 ($9E, $BE, $DE, $FE)
    !byte %....#...
    !byte %....#...
    !byte %....#...
    !byte %....#...
    !byte %....#...
    !byte %....#...
    !byte %....#...

    !byte %........                 ; char 159 ($9F, $BF, $DF, $FF)
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
spriteEnd

; ***************************************************************************************
main
    jmp initialize                  ;


; ***************************************************************************************
getLowByteAddress
    !byte <getSpriteMode1Byte, <getSpriteMode2Byte, <getSpriteMode3Byte, <getSpriteMode4Byte, <getSpriteMode5Byte, <getSpriteMode6Byte
getHighByteAddress
    !byte >getSpriteMode1Byte, >getSpriteMode2Byte, >getSpriteMode3Byte, >getSpriteMode4Byte, >getSpriteMode5Byte, >getSpriteMode6Byte

screenRowAddressLow
    !byte <(logicalScreenStart + 0 * $280)
    !byte <(logicalScreenStart + 1 * $280)
    !byte <(logicalScreenStart + 2 * $280)
    !byte <(logicalScreenStart + 3 * $280)
    !byte <(logicalScreenStart + 4 * $280)
    !byte <(logicalScreenStart + 5 * $280)
    !byte <(logicalScreenStart + 6 * $280)
    !byte <(logicalScreenStart + 7 * $280)
    !byte <(logicalScreenStart + 8 * $280)
    !byte <(logicalScreenStart + 9 * $280)
    !byte <(logicalScreenStart + 10 * $280)
    !byte <(logicalScreenStart + 11 * $280)
    !byte <(logicalScreenStart + 12 * $280)
    !byte <(logicalScreenStart + 13 * $280)
    !byte <(logicalScreenStart + 14 * $280)
    !byte <(logicalScreenStart + 15 * $280)
    !byte <(logicalScreenStart + 16 * $280)
    !byte <(logicalScreenStart + 17 * $280)
    !byte <(logicalScreenStart + 18 * $280)
    !byte <(logicalScreenStart + 19 * $280)
    !byte <(logicalScreenStart + 20 * $280)
    !byte <(logicalScreenStart + 21 * $280)
    !byte <(logicalScreenStart + 22 * $280)
    !byte <(logicalScreenStart + 23 * $280)
    !byte <(logicalScreenStart + 24 * $280)
    !byte <(logicalScreenStart + 25 * $280)
    !byte <(logicalScreenStart + 26 * $280)
    !byte <(logicalScreenStart + 27 * $280)
    !byte <(logicalScreenStart + 28 * $280)
    !byte <(logicalScreenStart + 29 * $280)
    !byte <(logicalScreenStart + 30 * $280)
screenRowAddressHigh
    !byte >(logicalScreenStart + 0 * $280)
    !byte >(logicalScreenStart + 1 * $280)
    !byte >(logicalScreenStart + 2 * $280)
    !byte >(logicalScreenStart + 3 * $280)
    !byte >(logicalScreenStart + 4 * $280)
    !byte >(logicalScreenStart + 5 * $280)
    !byte >(logicalScreenStart + 6 * $280)
    !byte >(logicalScreenStart + 7 * $280)
    !byte >(logicalScreenStart + 8 * $280)
    !byte >(logicalScreenStart + 9 * $280)
    !byte >(logicalScreenStart + 10 * $280)
    !byte >(logicalScreenStart + 11 * $280)
    !byte >(logicalScreenStart + 12 * $280)
    !byte >(logicalScreenStart + 13 * $280)
    !byte >(logicalScreenStart + 14 * $280)
    !byte >(logicalScreenStart + 15 * $280)
    !byte >(logicalScreenStart + 16 * $280)
    !byte >(logicalScreenStart + 17 * $280)
    !byte >(logicalScreenStart + 18 * $280)
    !byte >(logicalScreenStart + 19 * $280)
    !byte >(logicalScreenStart + 20 * $280)
    !byte >(logicalScreenStart + 21 * $280)
    !byte >(logicalScreenStart + 22 * $280)
    !byte >(logicalScreenStart + 23 * $280)
    !byte >(logicalScreenStart + 24 * $280)
    !byte >(logicalScreenStart + 25 * $280)
    !byte >(logicalScreenStart + 26 * $280)
    !byte >(logicalScreenStart + 27 * $280)
    !byte >(logicalScreenStart + 28 * $280)
    !byte >(logicalScreenStart + 29 * $280)
    !byte >(logicalScreenStart + 30 * $280)

; ***************************************************************************************
;
; On Entry:
;   X and Y are coordinates on screen
;
; On Exit:
;   plotScreenAddressLow/High set to screen address
;   plotXOffset / plotYOffset set to offsets within cell
;
; ***************************************************************************************
plotGetScreenAddress
    txa                                 ;
    and #3                              ;
    sta plotXOffset                     ; plotXOffset = offset within byte of X coordinate

    tya                                 ;
    and #7                              ;
    sta plotYOffset                     ; plotYOffset = offset within 8 byte cell of Y coordinate

    txa                                 ;
    and #$fc                            ;
    lsr                                 ;
    sta plotX                           ; plotX = (X pixel / 4) / 2
    tya                                 ;
    lsr                                 ;
    lsr                                 ;
    lsr                                 ;
    sta plotY                           ; plotY = (Y pixel / 8)

    ; get the row address
    ldx plotY                           ;
    lda screenRowAddressLow,x           ;
    sta plotScreenAddressLow            ;
    lda screenRowAddressHigh,x          ;
    sta plotScreenAddressHigh           ;

    ; add 8 * cell X
    lda #0                              ;
    sta tempHigh                        ;
    lda plotX                           ;
    asl                                 ; no need for a rol here, as plotX is too small
    asl                                 ;
    rol tempHigh                        ;
    asl                                 ;
    rol tempHigh                        ;
    clc
    adc plotScreenAddressLow            ;
    sta plotScreenAddressLow            ;
    lda plotScreenAddressHigh           ;
    adc tempHigh                        ;
    sta plotScreenAddressHigh           ;

    ; add the Y offset within a cell
    lda plotScreenAddressLow            ; }
    clc                                 ; }
    adc plotYOffset                     ; }
    sta plotScreenAddressLow            ; } add ($74) to screen address
    bcc +
    inc plotScreenAddressHigh           ; }
+
    rts                                 ;

; ***************************************************************************************
;
; plot
;
;   e.g. used to plot the player, and the leg/foot, vertical guardians
;
; On Entry:
;       plotSourceSpriteAddressLow/High = source sprite address
;
;       A = mode:
;           Mode            Operation                                   Description
;           1               source (AND mask) OR screen                 additive with mask
;           2               0                                           erase
;           3               source AND mask                             colour mask applied to source
;           4               if (screen not 255) then (source AND mask)  preserve solid colour 3
;           5               if (screen not 255) then 0                  zero except solid colour 3
;           6               (source AND $F0) EOR screen                 tint source to colour 2, eor with screen
;
;       X = x pixel coordinate
;       Y = y pixel coordinate
;
; ***************************************************************************************
plot
    sta plotMode                        ;
    stx plotX                           ;
    sty plotY                           ;

    jsr plotGetScreenAddress            ;

    ; based on the current mode, store the address of routine to get the next byte to write
    ldx plotMode                        ;
    lda getLowByteAddress - 1,x         ;
    sta getSourceByte + 1               ;
    lda getHighByteAddress - 1,x        ;
    sta getSourceByte + 2               ;

    lda #16                             ;
    sta spriteRowCounter                ;

spriteDrawRow
    ldy #24                             ;
getSourceByte
    jmp $ffff                           ; call routine to get source byte
afterGetSourceByte
    sta (plotScreenAddressLow),y        ; store on screen
    lda yOffsetsTable, y                ; } sneaky table lookup to do y=y-8
    tay                                 ; }
    bpl getSourceByte                   ; copy four bytes

    dec spriteRowCounter                ;
    beq return3                         ;
    lda spriteRowCounter                ;
    and #7                              ;
    bne +                               ;

    lda plotSourceSpriteAddressLow      ; }
    clc                                 ; }
    adc #$18                            ; }
    sta plotSourceSpriteAddressLow      ; } add 24 to source sprite address
    bcc +                               ; }
    inc plotSourceSpriteAddressHigh     ; }

+
    inc plotYOffset                     ; increment offset within character row

    ; increment screen address
    inc plotScreenAddressLow            ;
    bne +                               ;
    inc plotScreenAddressHigh           ;
+

    ; increment sprite address
    inc plotSourceSpriteAddressLow      ;
    bne +                               ;
    inc plotSourceSpriteAddressHigh     ;
+

    ; check for end of character row
    lda plotYOffset                     ;
    cmp #8                              ;
    bne spriteDrawRow                   ;

    ; move to next character row on screen
    lda #0                              ;
    sta plotYOffset                     ;

    lda plotScreenAddressLow            ; }
    clc                                 ; }
    adc #$78                            ; }
    sta plotScreenAddressLow            ; }
    lda plotScreenAddressHigh           ; } $0278 to (plotScreenAddress)
    adc #2                              ; }
    sta plotScreenAddressHigh           ; }

    jmp spriteDrawRow                   ;

; ***************************************************************************************
return3
    rts                                 ;

; ***************************************************************************************
getSpriteMode1Byte
    lda (plotSourceSpriteAddressLow),y  ; read source sprite
    and spriteColourMask                ; AND with mask
    ora (plotScreenAddressLow),y        ; OR with screen
    jmp afterGetSourceByte              ;

; ***************************************************************************************
getSpriteMode2Byte
    lda #0                              ;
    jmp afterGetSourceByte              ;

; ***************************************************************************************
getSpriteMode3Byte
    lda (plotSourceSpriteAddressLow),y  ; read source sprite
    and spriteColourMask                ; AND with mask
    jmp afterGetSourceByte              ;

; ***************************************************************************************
getSpriteMode4Byte
    lda (plotScreenAddressLow),y        ; read screen
    cmp #$ff                            ;
    bne getSpriteMode3Byte              ; if (not four pixels of colour 3) then use mode 3
    jmp afterGetSourceByte              ;

; ***************************************************************************************
getSpriteMode5Byte
    lda (plotScreenAddressLow),y        ; read screen
    cmp #$ff                            ;
    bne getSpriteMode2Byte              ; if (not four pixels of colour 3) then use mode 2
    jmp afterGetSourceByte              ;

; ***************************************************************************************
getSpriteMode6Byte
    lda (plotSourceSpriteAddressLow),y  ; read source sprite
    and #$f0                            ; AND with bit pattern for colour 2
    eor (plotScreenAddressLow),y        ; EOR with screen
    jmp afterGetSourceByte              ;

; ***************************************************************************************
showCrumble
    ldy #7                              ; loop counter
-
    lda (plotScreenAddressLow),y        ;
    iny                                 ;
    sta (plotScreenAddressLow),y        ;
    tya                                 ;
    clc                                 ;
    adc #7                              ;
    tay                                 ;
    lda (plotScreenAddressLow),y        ;
    iny                                 ;
    sta (plotScreenAddressLow),y        ;
    tya                                 ;
    sec                                 ;
    sbc #10                             ;
    tay                                 ;
    bne -                               ;

    lda #0                              ;
    ldy #1                              ;
    sta (plotScreenAddressLow),y        ;
    ldy #9                              ;
    sta (plotScreenAddressLow),y        ;
    rts                                 ;

; ***************************************************************************************
updatePlayer
    lda #$ff                            ;
    sta spriteColourMask                ; colour 3
    lda #0                              ;
    sta willyDeltaX                     ;
    sta willyJustLandedOnConveyor       ;
    lda isJumping                       ;
    beq handleNotJumping                ;
    jmp handleJumping                   ;

; ***************************************************************************************
handleNotJumping
    ldx #0                                  ; loop counter
-
    lda willySpriteAddressLow,x             ; }
    sta $77,x                               ; }
    inx                                     ; } copy 5 bytes from ($1842-$1846) to ($77-$7B)
    cpx #5                                  ; }
    bne -                                   ; }

    ldx playerPixelX                        ; }
    ldy playerPixelY                        ; } TAB(playerX/4, playerY/8+2)
    jsr setTextPosFromPixelPos              ; }

    jsr readTwoCharactersFromScreen         ; read the two characters immediately lower on screen than the player
    lda playerPixelY                        ;
    and #7                                  ;
    bne handleInAirMovement                 ; if (not on the ground) then branch

    ; Update crumble bars next
    lda plotScreenAddressLow                ; }
    clc                                     ; }
    adc #$78                                ; }
    sta plotScreenAddressLow                ; } (plotScreenAddress) += $278
    lda plotScreenAddressHigh               ; } address of next row down on screen
    adc #2                                  ; }
    sta plotScreenAddressHigh               ; }

    lda screenCharacterA                    ;
    jsr isCrumbleBar                        ;
    cmp #1                                  ;
    beq updateLeftCrumbleBar                ;
afterUpdateCrumberBar
    lda plotScreenAddressLow                ;
    clc                                     ;
    adc #16                                 ; add 16 to the address on screen

    sta plotScreenAddressLow            ;
    lda plotScreenAddressHigh           ;
    adc #0                              ;
    sta plotScreenAddressHigh           ;
    lda screenCharacterB                ;
    jsr isCrumbleBar                    ;
    cmp #1                              ;
    bne checkForConveyors               ;

    ; crumble the right hand crumble bar (in the background cache)
    ldx #7                              ; loop counter
-
    ; +$50 is to get to the characters underneath the players feet
    lda backgroundCache + $50 - 1,x     ;
    sta backgroundCache + $50 + 0,x     ; copy one pixel row to the next
    lda backgroundCache + $50 + 7,x     ;
    sta backgroundCache + $50 + 8,x     ;
    dex                                 ;
    bne -                               ;

    lda #0                              ;
    sta backgroundCache + $50 + 0       ; zero the top row of crumble bar
    sta backgroundCache + $50 + 8       ;
    jsr showCrumble                     ;
    jmp checkForConveyors               ;

; ***************************************************************************************
updateLeftCrumbleBar
    ldx #7                              ;
-
    ; $40 is to get to the characters underneath the players feet
    lda backgroundCache + $40 - 1,x     ;
    sta backgroundCache + $40 + 0,x     ; copy one pixel row to the next
    lda backgroundCache + $40 + 7,x     ;
    sta backgroundCache + $40 + 8,x     ;
    dex                                 ;
    bne -                               ;

    lda #0                              ;
    sta backgroundCache + $40 + 0       ; zero the top row of crumble bar
    sta backgroundCache + $40 + 8       ;
    jsr showCrumble                     ;
    jmp afterUpdateCrumberBar           ;

; ***************************************************************************************
checkForConveyors
    lda plotScreenAddressLow            ;
    sec                                 ;
    sbc #$88                            ;
    sta plotScreenAddressLow            ; (plotScreenAddress) -= $288
    lda plotScreenAddressHigh           ; move to previous character row
    sbc #$02                            ;
    sta plotScreenAddressHigh           ;
handleInAirMovement
    lda screenCharacterA                ;
    jsr isConveyor                      ;
    bne onConveyor                      ;
    lda screenCharacterB                ;
    jsr isConveyor                      ;
    bne onConveyor                      ;
    lda #0                              ;
    sta willyIsOnConveyor               ;
onConveyor                              ;
    lda willyIsOnConveyor               ;
    cmp #1                              ;
    bne checkPlayerY                    ;
    lda willyDirectionAgainstFlowOfConveyor ;
    cmp #0                              ;
    bne checkPlayerY                    ;
    jmp checkForUpdatePlayerOnConveyor  ;

; ***************************************************************************************
checkPlayerY
    lda playerPixelY                    ;
    and #7                              ;
    cmp #0                              ;
    beq checkIfSupported                ;
updatePlayerFalling
    lda newPlayerPixelY                 ;
    clc                                 ;
    adc #4                              ;
    sta newPlayerPixelY                 ;
    jmp checkIfBlockedLeftOrRight       ;

; ***************************************************************************************
checkIfSupported
    lda screenCharacterA                ;
    jsr isSupporting                    ;
    cmp #1                              ;
    beq onGround                        ;
    lda screenCharacterB                ;
    jsr isSupporting                    ;
    cmp #1                              ;
    beq onGround                        ;
    lda #1                              ;
    sta willyFalling                    ;
    jmp updatePlayerFalling             ;

; ***************************************************************************************
onGround
    lda #0                                  ;
    sta willyChangedDirection               ;

    ldy #$ff                                ;
    ldx #$9e                                ;
    lda #$81                                ; check for Z key
    jsr OSBYTE                              ;
    cpy #$ff                                ;
    bne checkForXKey                        ;

    ; handle Z pressed
    lda willyAnimationEOR                   ;
    cmp #3                                  ;
    bne switchToLookingLeft                 ; if (looking right) then branch
    lda #$ff                                ;
    sta willyDeltaX                         ;

    dec newPlayerPixelX                     ; move left
    jmp checkForUpdatePlayerOnConveyor      ; adjust for conveyor

; ***************************************************************************************
switchToLookingLeft
    lda #3                                  ; }
    sta willyAnimationEOR                   ; }
    lda #>willyLeft0                        ; } look left
    sta willyGraphicsPage                   ; }
    lda #1                                  ;
    sta willyChangedDirection               ;
    jsr checkIfBlockedLeftOrRight           ;
    lda #0                                  ;
    sta willyDeltaX                         ;
    jmp checkForUpdatePlayerOnConveyor      ;

; ***************************************************************************************
checkForXKey
    ldy #$ff                                ; }
    ldx #$bd                                ; }
    lda #$81                                ; } check for X key
    jsr OSBYTE                              ; }
    cpy #$ff                                ; }
    bne checkForUpdatePlayerOnConveyor      ; }

    ; handle X pressed
    lda willyAnimationEOR                   ;
    cmp #0                                  ;
    bne switchToLookingRight                ; if (looking left) then branch
    lda #1                                  ;
    sta willyDeltaX                         ;

    inc newPlayerPixelX                     ; add one to player x

    jmp checkForUpdatePlayerOnConveyor

; ***************************************************************************************
switchToLookingRight
    lda #0                                  ; }
    sta willyAnimationEOR                   ; }
    lda #>willyRight0                       ; } look right
    sta willyGraphicsPage                   ; }
    lda #1                                  ;
    sta willyChangedDirection               ;
    jsr checkIfBlockedLeftOrRight           ;
    lda #0                                  ;
    sta willyDeltaX                         ;

checkForUpdatePlayerOnConveyor
    ldx playerPixelX                        ; }
    ldy playerPixelY                        ; }
    jsr setTextPosFromPixelPos              ; }

    jsr readTwoCharactersFromScreen         ; read the two characters immediately lower on screen than the player
    lda willyIsOnConveyor                   ;
    cmp #0                                  ;
    bne handleGoingOnConveyor               ;
    lda screenCharacterA                    ;
    jsr isConveyor                          ;
    bne +                                   ;
    lda screenCharacterB                    ;
    jsr isConveyor                          ;
    beq handleGoingOnConveyor               ;
+
    lda willyDeltaX                         ;
    sta willyDirectionAgainstFlowOfConveyor ;
    lda #1                                  ;
    sta willyIsOnConveyor                   ;
handleGoingOnConveyor
    lda willyIsOnConveyor                   ;
    cmp #1                                  ;
    bne conveyorHandling                    ;

    ; handle on conveyor
    lda willyFalling                        ;
    cmp #1                                  ;
    bne +                                   ;
    lda willyDeltaX                         ;
    eor #$fe                                ;
    cmp conveyorDirection                   ;
    bne +                                   ;
    lda #$fe                                ;
    sta willyDirectionAgainstFlowOfConveyor ;
+
    lda willyFalling                        ;
    cmp #1                                  ;
    bne conveyorNotFalling                  ;
    lda #$fe                                ;
    sta willyDirectionAgainstFlowOfConveyor ;
updateNewPlayerX
    lda newPlayerPixelX                     ;
    sec                                     ;
    sbc willyDeltaX                         ;
    sta newPlayerPixelX                     ;
    jmp checkForJump                        ;

; ***************************************************************************************
conveyorNotFalling
    lda willyDirectionAgainstFlowOfConveyor ;
    cmp #$fe                                ;
    bne conveyorHandling                    ;
    lda willyDeltaX                         ;
    eor #$fe                                ;
    cmp conveyorDirection                   ;
    bne conveyorHandling                    ;
    jmp updateNewPlayerX                    ;

; ***************************************************************************************
conveyorHandling
    lda willyDeltaX                         ;
    cmp #0                                  ;
    beq movingWithConveyor                  ;
    lda willyDeltaX                         ;
    cmp conveyorDirection                   ;
    bne +                                   ;
movingWithConveyor
    lda #0                                  ;
    sta willyDirectionAgainstFlowOfConveyor ;
+
    lda willyDirectionAgainstFlowOfConveyor ;
    cmp #0                                  ;
    bne +                                   ;
    lda willyIsOnConveyor                   ;
    cmp #1                                  ;
    bne +                                   ;
    jsr updateWillyOnConveyor               ;
+
    lda willyDeltaX                         ;
    sta jumpDirection                       ;
    cmp #0                                  ;
    beq checkForJump                        ;
    jsr checkIfBlockedLeftOrRight           ;
checkForJump
    ldy #$ff                                ;
    ldx #$b6                                ;
    lda #$81                                ;
    jsr OSBYTE                              ; check for RETURN key pressed
    cpy #$ff                                ;
    bne cancelJump                          ; if (return not pressed) then branch (no jump)

    ; handle jump
    lda willyJustLandedOnConveyor           ;
    cmp #0                                  ;
    bne cancelJump                          ;
    lda willyFalling                        ;
    cmp #0                                  ;
    bne cancelJump                          ;
    jmp checkForWallOnJump                  ;

; ***************************************************************************************
cancelJump
    lda #0                          ;
    sta willyDeltaX                 ;
    sta playerYNegativeOffsetWithinCell     ;
    sta willyFalling                ;
    sta jumpDirection               ;
    lda hasDrawnConveyors           ;
    beq +                           ;
    lda #0                          ;
    sta hasDrawnConveyors           ;
    rts                             ;

; ***************************************************************************************
+
;    jsr updateAirAndCheckExit       ;
    jsr drawConveyor                ;
    jmp updatePlayerWithAnimation   ;

; ***************************************************************************************
checkForWallOnJump
    ldx newPlayerPixelX             ;
    ldy newPlayerPixelY             ;
    jsr setTextPosFromPixelPos      ;
    dec cursorY                     ;
    dec cursorY                     ;
    dec cursorY                     ;

    jsr readTwoCharactersFromScreen ; read the two characters immediately higher on screen than the player
    lda screenCharacterA            ;
    cmp #$8f                        ;
    beq foundWallSoCancelJump       ; if (wall) then branch
    lda screenCharacterB            ;
    cmp #$8f                        ;
    beq foundWallSoCancelJump       ; if (wall) then branch

    ; start jump
    lda #1                          ;
    sta isJumping                   ;
    lda playerPixelY                ;
    sta playerHeightOnTakeOff       ;
    lda #0                          ;
    sta jumpPhase                   ;
    jmp handleJumping               ;

; ***************************************************************************************
foundWallSoCancelJump
    jmp cancelJump                  ;

; ***************************************************************************************
checkIfBlockedLeftOrRight
    lda #0                              ;
    sta screenCharacterAPrime           ;
    sta playerYNegativeOffsetWithinCell ;
    lda newPlayerPixelY                 ;
    and #7                              ;
    cmp #0                              ;
    beq onCellFloor                     ;

    ; handle having a vertical gap from the cell floor
    sta playerXOffsetWithinCell         ; just used as temporary storage
    lda #$ff                            ;
    clc                                 ;
    sbc playerXOffsetWithinCell         ;
    sta playerYNegativeOffsetWithinCell ;
onCellFloor
    lda newPlayerPixelX                 ;
    and #3                              ;
    sta playerXOffsetWithinCell         ;
    lda playerXOffsetWithinCell         ;
    cmp #3                              ;
    bne +                               ;
    lda willyDeltaX                     ;
    cmp #$ff                            ;
    bne +                               ;
    jsr checkWhatsLeftOfThePlayer       ;
+
    lda willyDeltaX                     ;
    cmp #$fd                            ;
    bne +                               ;

    ; handle being blocked to the left
    ; add one back onto the new X position
    lda newPlayerPixelX                 ;
    clc                                 ;
    adc #1                              ;
    sta newPlayerPixelX                 ;
    lda #0                              ;
    sta willyDeltaX                     ;
    jmp updateNewPlayerY                ;

; ***************************************************************************************
+
    lda playerXOffsetWithinCell         ;
    cmp #0                              ;
    bne +                               ;
    lda willyDeltaX                     ;
    cmp #1                              ;
    bne +                               ;
    jsr checkWhatsRightOfThePlayer      ;
+
    lda willyDeltaX                     ;
    cmp #$fe                            ;
    bne +                               ;

    ; handle being blocked to the right
    ; subtract one for the new X position
    lda newPlayerPixelX                 ;
    sec                                 ;
    sbc #1                              ;
    sta newPlayerPixelX                 ;
    lda #0                              ;
    sta willyDeltaX                     ;
    jmp updateNewPlayerY                ;

; ***************************************************************************************
+
    jmp updateConveyorAndPlayer         ;

; ***************************************************************************************
updateNewPlayerY
    lda playerPixelY                ;
    cmp playerHeightOnTakeOff       ;
    bne updateConveyorAndPlayer     ; if (player height not the same as when last on ground) then branch (move player)

    lda jumpPhase                   ;
    cmp #0                          ;
    bne updateConveyorAndPlayer     ; if (jumping) then branch (move player)

    lda newPlayerPixelY             ;
    sta playerPixelY                ;
    rts                             ;

; ***************************************************************************************
getPlayerSourceSpriteAddress
    lda #0                              ; }
    sta plotSourceSpriteAddressLow      ; }
    lda newPlayerPixelX                 ; }
    and #3                              ; }
    eor willyAnimationEOR               ; }
    lsr                                 ; }
    ror plotSourceSpriteAddressLow      ; } sprite address = willy looking right or left
    lsr                                 ; }
    ror plotSourceSpriteAddressLow      ; }
    clc                                 ; }
    adc willyGraphicsPage               ; }
    sta plotSourceSpriteAddressHigh     ; }
    rts                                 ;

; ***************************************************************************************
;
; On Entry: A = Y coordinate to check
; On Exit: X = index into danger area arrays
;          Carry set if in a danger area
;
; ***************************************************************************************
getDangerArea
    clc                                     ;
    sbc #8                                  ;
    ldx #255                                ;
-
    inx                                     ;
    sec                                     ; division by repeated subtraction
    sbc #24                                 ;
    bcs -                                   ;
    rts                                     ;

; ***************************************************************************************
;
; On Entry:
;   A = Y pixel coordinate of sprite to draw
; On Exit:
;   Z set if in danger zone
;
; ***************************************************************************************
isInDangerArea
    jsr getDangerArea                   ;
    ldy #7                              ;
-
    lda dangerAreas,X                   ;
    cmp rasterArea                      ;
    beq +                               ;
    inx                                 ;
    dey                                 ;
    bpl -                               ;
+
    rts                                 ;

; ***************************************************************************************
updateConveyorAndPlayer

    ; if in danger area, wait
-
    lda playerPixelY                    ;
    jsr isInDangerArea                  ;
    beq -

;    lda #2                              ;
;    jsr debugChangePalette              ;

    ldx playerPixelX                    ; }
    ldy playerPixelY                    ; }
    lda #0                              ; }
    jsr readOrWriteCachedBackground     ; } draw old background from cache

    jsr drawConveyor                    ; animate conveyor

    ldx newPlayerPixelX                 ; }
    ldy newPlayerPixelY                 ; }
    lda #1                              ; }
    jsr readOrWriteCachedBackground     ; } cache new background
    lda #1                              ;
    sta hasDrawnConveyors               ;
    ; fall through...

; ***************************************************************************************
updatePlayerWithAnimation
    jsr getPlayerSourceSpriteAddress    ;

    ldx newPlayerPixelX                 ;
    ldy newPlayerPixelY                 ;
    lda #1                              ;
opcodeForJsrPlot
    jsr plot                            ; draw player (mode 1)

;    lda #7
;    jsr debugChangePalette

    jsr updateAirAndCheckExit           ;
    jsr checkForLandingOnSpike          ;

    lda #34                             ;
    sta cursorX                         ;
    lda #23                             ;
    sta cursorY                         ;

    jsr checkSpikeKeySwitch             ;
    inc cursorX                         ;
    jsr checkSpikeKeySwitch             ;

    lda newPlayerPixelY                 ;
    and #7                              ;
    cmp #0                              ;
    beq +                               ; if (level with cell vertically) then branch
    inc cursorX                         ; [TODO: is this right?, why check vertical alignment then check an extra X position?]
    jsr checkSpikeKeySwitch             ;
+
    ; copy local variables back (4 bytes)
    ldx #0                              ;
-
    lda $77,x                           ;
    sta willySpriteAddressLow,x         ;
    inx                                 ;
    cpx #4                              ;
    bne -                               ;

    lda newPlayerPixelX                 ;
    sta playerPixelX                    ;
    lda newPlayerPixelY                 ; store new player position
    sta playerPixelY                    ;
    rts                                 ;

; ***************************************************************************************
readTwoCharactersFromScreen
    jsr readCharacter       ; read character at cursor position
    stx screenCharacterA    ; store result

    inc cursorX             ; move right one cell

    jsr readCharacter       ; read character at cursor position
    stx screenCharacterB    ; store result
    rts

; ***************************************************************************************
readTwoCharactersVertically
    jsr readCharacter       ; read character at text cursor position
    stx screenCharacterA    ; store result

    inc cursorY             ; move down one cell

    jsr readCharacter       ; read character at text cursor position
    stx screenCharacterB    ; store result
    rts                     ;

; ***************************************************************************************
checkSpikeKeySwitch
    jsr readTwoCharactersFromScreen                 ;
    dec cursorX                                     ;
    lda screenCharacterA                            ; first character
    jsr checkForSpikeKeySwitchCollisions            ;
    inc cursorX
    lda screenCharacterB                            ; second character
    jmp checkForSpikeKeySwitchCollisions            ;

; ***************************************************************************************
checkForSpikeKeySwitchCollisions
    cmp #$9b                    ;
    beq deathJumper             ; if (spike) then branch
    cmp #$9c                    ;
    beq deathJumper             ; if (spike) then branch
    cmp #$90                    ;
    beq keyCollisionFound       ; if (key) then branch
    cmp #$98                    ;
    beq switchCollisionFound    ; if (unswitched switch) then branch
    rts

; ***************************************************************************************
;
; checking an 'offscreen' background cache for spikes
;
; ***************************************************************************************
checkForLandingOnSpike
    lda #34                             ;
    sta cursorX                         ;
    lda #23                             ;
    sta cursorY                         ; TAB(34,23)

-
    jsr readCharacter           ;
    cpx #0                      ;
    beq drawSpace               ;
    cpx #$9b                    ;
    beq deathJumper             ; if (spike) then branch (die)
    cpx #$9c                    ;
    beq deathJumper             ; if (spike) then branch (die)

backIntoSpaceLoop
    inc cursorX
    lda cursorX                 ; read text cursor X position
    cmp #40                     ;
    bne -                       ; loop until we reach the end of the row (end of the cache)
    rts                         ;

drawSpace
    jsr eraseCell               ;
    jmp backIntoSpaceLoop       ;

; ***************************************************************************************
deathJumper
    jmp death                       ;

; ***************************************************************************************
eraseCell
    jsr setCursorScreenAddress          ;
    lda #<eraseGuardianEmptyBytes       ;
    sta cellPlotSourceSpriteAddressLow  ;
    lda #>eraseGuardianEmptyBytes       ;
    sta cellPlotSourceSpriteAddressHigh ;
    jmp cellPlot                        ;

; ***************************************************************************************
keyCollisionFound
    lda cursorX                 ;
    sec                         ;
    sbc #34                     ;
    tax                         ; get cell offset within cache

    lda cachedCellX             ;
    clc                         ;
    adc cacheOffsetX,x          ;
    sta textCursorX             ;

    lda cachedCellY             ;
    clc                         ;
    adc cacheOffsetY,x          ;
    sta textCursorY             ;

    ; erase key
    jsr eraseCell               ;

    dec keysLeft                ;

    ; Mark key as got
    ldx #0                      ;
-
    lda keyXPositions,x         ;
    cmp textCursorX             ;
    bne +                       ;
    lda keyYPositions,x         ;
    cmp textCursorY             ;
    bne +                       ;
    lda #255                    ;
    sta keyGot,x                ;
+
    inx                         ;
    cpx keyPositionCounter      ;
    bcc -                       ;

    lda #99                     ;
    jmp addToScore              ;
;    jmp tabToOldCursorPositionAndReturn ;

switchCollisionFound
    ldx cursorX                     ; }
    stx textCursorX                 ; } record current position
    ldy cursorY                     ; }
    sty textCursorY                 ; }
    jsr setTextPos                  ;

    ldx #0                          ; loop counter
-
    lda switchMessage,x                     ;
    jsr OSWRCH                              ;
    inx                                     ;
    cpx #switchMessageEnd - switchMessage   ;
    bne -                                   ;

    lda playerPixelX                        ;
    cmp #80                                 ;
    bcc tabToOldCursorPositionAndReturn     ;

    lda #1                                  ;
    sta kongBeastSwitchTriggered            ; mark switch as triggered

    ldx #0                                  ; loop counter
-
    lda switchMessage2,x                    ;
    jsr OSWRCH                              ;
    inx                                     ;
    cpx #switchMessage2End - switchMessage2 ;
    bne -                                   ;

    ; [inefficient]
    ldy #2                                                          ; loop twice
twiceLoop
    ldx #0                                                          ; loop counter
-
    lda switchClearCentreMessage,x                                  ;
    jsr OSWRCH                                                      ;
    inx                                                             ;
    cpx #switchClearCentreMessageEnd - switchClearCentreMessage     ;
    bne -                                                           ;
    dey                                                             ;
    bne twiceLoop                                                   ;

    ; don't draw regular kong any more
    lda #$60                        ; store opcode $60 'RTS'
    sta drawRegularKong             ;

tabToOldCursorPositionAndReturn
    ldx textCursorX                 ;
    ldy textCursorY                 ;
    jmp setTextPos                  ; TAB(textCursorX,textCursorY)

; ***************************************************************************************
isSupporting
    cmp #$95                        ;
    bcs +                           ;
    cmp #$5f                        ;
    beq +                           ;
    cmp #$80                        ;
    bcc notSupporting               ;
    cmp #$90                        ;
    bcs notSupporting               ;
+
    lda playerPixelY                ;
    sta playerHeightOnTakeOff       ;
    lda #1                          ; yes, is supporting
    rts                             ;

; ***************************************************************************************
notSupporting
    lda #0                          ; no, is not supporting
    rts                             ;

; ***************************************************************************************
isCrumbleBar
    cmp #$5f                        ;
    beq +                           ;
    cmp #$82                        ;
    bcc notCrumbleBar               ;
    cmp #$8a                        ;
    bcs notCrumbleBar               ;
+
    lda #1                          ;
    rts                             ;

; ***************************************************************************************
notCrumbleBar
    lda #0                          ;
    rts                             ;

; ***************************************************************************************
isConveyor
    cmp #$8b                        ; } (first conveyor character)
    bcc notConveyor                 ; }
    cmp #$8f                        ; } (last conveyor character + 1)
    bcs notConveyor                 ; } if (conveyor belt) then A=1 else A=0
    lda #1                          ; }
    rts                             ; }

; ***************************************************************************************
notConveyor
    lda #0                          ;
    rts                             ;

; ***************************************************************************************
checkUpdateConveyor
    lda jumpDirection               ;
    cmp #0                          ;
    bne updateConveyor              ;
    lda #1                          ;
    sta willyFalling                ;
notFoundConveyor
    rts                             ;

; ***************************************************************************************
updateConveyor
    ldx playerPixelX                ;
    ldy playerPixelY                ;
    jsr setTextPosFromPixelPos      ; TAB(playerX/4, playerY/8 + 2)

    jsr readTwoCharactersFromScreen ; read the two characters immediately lower on screen than the player

    lda screenCharacterA            ;
    jsr isConveyor                  ;
    bne foundConveyor               ;

    lda screenCharacterB            ;
    jsr isConveyor                  ;
    beq notFoundConveyor            ;

; ***************************************************************************************
foundConveyor
    lda #1                              ;
    sta willyJustLandedOnConveyor       ;
    lda jumpDirection                   ;
    sta willyDeltaX                     ;
    jmp checkForUpdatePlayerOnConveyor  ;

; ***************************************************************************************
handleJumping
    lda jumpPhase                   ;
    cmp #17                         ;
    bcc updatePlayerWhenJumping     ; if (jumping) then branch
    jmp updatePlayerWhenSupported   ; falling

; ***************************************************************************************
updatePlayerWhenJumping
    lda playerPixelY                ;
    and #7                          ;
    cmp #0                          ;
    beq checkForLanding             ;
    jmp updateJump                  ;

; ***************************************************************************************
checkForLanding
    lda playerPixelX                ;
    lsr                             ;
    lsr                             ;
    sta cursorX                     ;
    lda playerPixelY                ;
    sec                             ;
    sbc #2                          ; [TODO: is this calculation right??]
    lsr                             ;
    lsr                             ;
    lsr                             ;
    sta cursorY                     ;

    jsr readTwoCharactersFromScreen ;

    lda screenCharacterA            ;
    cmp #$8f                        ;
    beq hitWall                     ; if (wall) then branch
    lda screenCharacterB            ;
    cmp #$8f                        ;
    beq hitWall                     ; if (wall) then branch
    jmp updateInAir                 ;

; ***************************************************************************************
hitWall
    lda jumpPhase                   ;
    cmp #9                          ;
    bcs updateInAir                 ;
    lda #17                         ;
    sec                             ;
    sbc jumpPhase                   ;
    sta jumpPhase                   ;
    lda #0                          ;
    sta jumpDirection               ;
updateInAir
    lda playerPixelY                ;
    and #7                          ;
    cmp #0                          ;
    bne updateJump                  ;
    lda jumpPhase                   ;
    cmp #8                          ;
    bcc updateJump                  ;

    lda playerPixelX                ;
    lsr                             ;
    lsr                             ;
    sta cursorX                     ; TAB(playerX/4, 2 + (playerY + 3)/8)
    lda playerPixelY                ; [TODO: is this calculation right??]
    clc                             ;
    adc #3                          ;
    lsr                             ;
    lsr                             ;
    lsr                             ;
    clc                             ;
    adc #2                          ;
    sta cursorY                     ;

    jsr readTwoCharactersFromScreen ;
    lda screenCharacterA            ;
    jsr isSupporting                ;
    cmp #1                          ;
    beq updatePlayerWhenSupported   ;

    lda screenCharacterB            ;
    jsr isSupporting                ;
    cmp #1                          ;
    beq updatePlayerWhenSupported   ;

updateJump
    lda jumpPhase                   ;
    clc                             ;
    adc #1                          ;
    sta jumpPhase                   ;

    ldy jumpPhase                   ;
    lda newPlayerPixelY             ;
    sec                             ;
    sbc jumpMovementArray - 1,y     ;
    sta newPlayerPixelY             ;

    lda newPlayerPixelX             ;
    clc                             ;
    adc jumpDirection               ;
    sta newPlayerPixelX             ;
    lda jumpDirection               ;
    sta willyDeltaX                 ;
    jmp checkIfBlockedLeftOrRight	;

; ***************************************************************************************
updatePlayerWhenSupported
    lda #0                          ;
    sta isJumping                   ;
    sta jumpPhase                   ;
    jsr updateAirAndCheckExit       ;
    jsr drawConveyor                ;
    jsr checkUpdateConveyor         ;
    jmp updatePlayer                ;

; ***************************************************************************************
checkWhatsLeftOfThePlayer
    lda playerPixelX                ;
    lsr                             ;
    lsr                             ;
    sec                             ;
    sbc #1                          ;
    sta cursorX                     ; TAB(playerX/4 - 1, (newPlayerPixelY + playerYNegativeOffsetWithinCell) / 8)
    lda newPlayerPixelY             ;
    clc                             ;
    adc playerYNegativeOffsetWithinCell ;
    lsr                             ;
    lsr                             ;
    lsr                             ;
    sta cursorY                     ;
    jsr readTwoCharactersVertically ;

    lda newPlayerPixelY             ;
    and #7                          ;
    cmp #0                          ;
    beq +                           ;

    ; if we are not vertically aligned with a cell then we need to check another cell
    lda screenCharacterB            ;
    sta screenCharacterAPrime       ;
    inc cursorY                     ;
    jsr readTwoCharactersVertically ;

+
    lda screenCharacterAPrime       ;
    cmp #$20                        ;
    bne checkForCollisionToTheLeft  ; if (not a space) then branch (check for collision)

    lda screenCharacterB            ;
    cmp #$20                        ;
    bne checkForCollisionToTheLeft  ; if (not a space) then branch (check for collision)

    lda jumpPhase                   ;
    cmp #5                          ;
    bne checkForCollisionToTheLeft  ;
    rts                             ;

; ***************************************************************************************
checkForCollisionToTheLeft
    lda screenCharacterA            ;
    cmp #$8f                        ;
    beq markAsBlockedToTheLeft      ; if (wall) then branch

    lda screenCharacterB            ;
    cmp #$8f                        ;
    beq markAsBlockedToTheLeft      ; if (wall) then branch

    lda screenCharacterAPrime       ;
    cmp #$8f                        ;
    beq markAsBlockedToTheLeft      ; if (wall) then branch
    rts                             ;

; ***************************************************************************************
markAsBlockedToTheLeft
    lda #$fd                        ;
    sta willyDeltaX                 ;
    rts                             ;

; ***************************************************************************************
checkWhatsRightOfThePlayer
    lda playerPixelX                ; }
    lsr                             ; }
    lsr                             ; }
    clc                             ; }
    adc #2                          ; }
    sta cursorX                     ; } TAB(playerX/4 + 2, (newPlayerPixelY + playerYNegativeOffsetWithinCell)/8)
    lda newPlayerPixelY             ; }
    clc                             ; }
    adc playerYNegativeOffsetWithinCell ; }
    lsr                             ; }
    lsr                             ; }
    lsr                             ; }
    sta cursorY                     ; }
    jsr readTwoCharactersVertically ;

    lda newPlayerPixelY             ;
    and #7                          ;
    cmp #0                          ;
    beq +                           ;

    ; if we are not vertically aligned with a cell then we need to check another cell
    lda screenCharacterB            ;
    sta screenCharacterAPrime       ;
    inc cursorY                     ;
    jsr readTwoCharactersVertically ;

+
    lda screenCharacterAPrime       ;
    cmp #$20                        ;
    bne checkForCollisionRight       ; if (not a space) then branch (check for collision)

    lda screenCharacterB            ;
    cmp #$20                        ;
    bne checkForCollisionRight       ; if (not a space) then branch (check for collision)

    lda jumpPhase                   ;
    cmp #5                          ;
    bne checkForCollisionRight      ;
    rts                             ;

; ***************************************************************************************
checkForCollisionRight
    lda screenCharacterA            ;
    cmp #$8f                        ;
    beq markAsBlockedToTheRight     ; if (wall) then branch

    lda screenCharacterB            ;
    cmp #$8f                        ;
    beq markAsBlockedToTheRight     ; if (wall) then branch

    lda screenCharacterAPrime       ;
    cmp #$8f                        ;
    beq markAsBlockedToTheRight     ; if (wall) then branch
    rts                             ;

; ***************************************************************************************
markAsBlockedToTheRight
    lda #$fe                        ;
    sta willyDeltaX                 ;
    rts                             ;

; ***************************************************************************************
updateWillyOnConveyor
    lda conveyorDirection           ;
    cmp #1                          ;
    bne updateConveyorMovement      ;
    lda willyAnimationEOR           ;
    cmp #3                          ;
    bne updateConveyorMovement      ;

    lda #>willyRight0               ; }
    sta willyGraphicsPage           ; }
    lda #0                          ; } look right
    sta willyAnimationEOR           ; }

    jmp checkIfBlockedLeftOrRight   ;

; ***************************************************************************************
updateConveyorMovement
    lda conveyorDirection           ;
    cmp #1                          ;
    bne +                           ;

    ; conveyor right
    lda conveyorDirection           ;
    sta willyDeltaX                 ;
    lda newPlayerPixelX             ;
    clc                             ;
    adc conveyorDirection           ;
    sta newPlayerPixelX             ;
    rts                             ;

; ***************************************************************************************
+
    lda conveyorDirection           ;
    cmp #$ff                        ;
    bne walkWithConveyor            ;

    ; conveyor left
    lda willyAnimationEOR           ;
    cmp #0                          ;
    bne walkWithConveyor            ;
    lda #>willyLeft0                ; }
    sta willyGraphicsPage           ; }
    lda #3                          ; } look left
    sta willyAnimationEOR           ; }
    jmp checkIfBlockedLeftOrRight   ;

; ***************************************************************************************
walkWithConveyor
    lda conveyorDirection           ;
    sta willyDeltaX                 ;
    lda newPlayerPixelX             ;
    clc                             ;
    adc conveyorDirection           ;
    sta newPlayerPixelX             ;
    rts                             ;

; ***************************************************************************************
;
; On Entry:
;   A = 0   means read from cache and write to screen
;   A = 1   means read from screen and write to cache
;   X = x pixel position
;   Y = Y pixel position
;
; ***************************************************************************************
readOrWriteCachedBackground
    stx $71                         ;
    sty $72                         ;
    sta $70                         ;
    txa                             ;
    and #$fc                        ; X cell * 4
    sta tempX                       ;
    lsr                             ;
    lsr                             ;
    sta cachedCellX                 ;

    tya                             ;
    lsr                             ;
    lsr                             ;
    lsr                             ;
    sta cachedCellY                 ; Y cell

    ; read screen row address and add 16 * cell X to screen address
    tax                             ; row
    lda #0                          ;
    sta tempHigh                    ;
    lda tempX                       ; }
    asl                             ; } X cell * 4 again
    rol tempHigh                    ; }
    asl                             ; }
    rol tempHigh                    ; }
    clc                             ;
    adc screenRowAddressLow,x       ; }
    sta screenLow                   ; }
    lda screenRowAddressHigh,x      ; } add screen row address
    adc tempHigh                    ; }
    sta screenHigh                  ; }

    ; test which direction we want to read/write
    lda $70                                 ;
    beq +                                   ;

    ; set up for reading from the screen and writing to the background cache:
    ;   lda logicalScreenStart,x            ; screen address
    ;   sta backgroundCache,y               ; off-the-visible-screen storage area
    lda screenLow                           ;
    sta readFromMemory + 1                  ;
    lda screenHigh                          ;
    sta readFromMemory + 2                  ;

    lda #<backgroundCache                   ;
    sta writeToMemory + 1                   ;
    lda #>backgroundCache                   ;
    sta writeToMemory + 2                   ;
    jmp copyCache                           ;

+
    ; set up for reading from the background cache and writing to the screen:
    ;   lda backgroundCache,y               ; off-the-visible-screen storage area
    ;   sta logicalScreenStart,x            ; screen address

    lda #<backgroundCache                   ;
    sta readFromMemory + 1                  ;
    lda #>backgroundCache                   ;
    sta readFromMemory + 2                  ;

    lda screenLow                           ;
    sta writeToMemory + 1                   ;
    lda screenHigh                          ;
    sta writeToMemory + 2                   ;

; ***************************************************************************************
copyCache
    ldy #0                              ; outer loop counter (number of rows * 32)
readWriteBackgroundCacheLoop
    ldx #31                             ; inner loop counter (within one row)
readFromMemory
    lda $ffff,x                         ;
writeToMemory
    sta $ffff,x                         ;
    dex                                 ;
    bpl readFromMemory                  ;

    ; go to next row

    ; test which direction we want to read/write
    lda $70                                 ;
    beq otherDirection                      ;

    ; read from screen, write to cache
    lda readFromMemory + 1              ; }
    clc                                 ; }
    adc #$80                            ; }
    sta readFromMemory + 1              ; } add $0280 to screen address (goto next row)
    lda readFromMemory + 2              ; }
    adc #$02                            ; }
    sta readFromMemory + 2              ; }

    lda writeToMemory + 1               ; }
    clc                                 ; }
    adc #32                             ; }
    sta writeToMemory + 1               ; } add 32 to cache address (goto next row)
    bcc +                               ; }
    inc writeToMemory + 2               ; }
+
    jmp checkForEndOfLoop               ;

otherDirection
    ; read from cache, write to screen
    lda writeToMemory + 1               ; }
    clc                                 ; }
    adc #$80                            ; }
    sta writeToMemory + 1               ; } add $0280 to screen address (goto next row)
    lda writeToMemory + 2               ; }
    adc #$02                            ; }
    sta writeToMemory + 2               ; }

    lda readFromMemory + 1              ; }
    clc                                 ; }
    adc #32                             ; }
    sta readFromMemory + 1              ; } add 32 to cache address (goto next row)
    bcc +                               ; }
    inc readFromMemory + 2              ; }
+


checkForEndOfLoop
    iny                                 ;
    cpy #3                              ;
    bcc readWriteBackgroundCacheLoop    ; if (Y < 3) then branch (loop back)
    rts                                 ;

; ***************************************************************************************
updateVerticalGuardians
    lda currentLevel                    ;
    cmp #5                              ;
    beq drawEugene                      ;
    cmp #8                              ;
    beq drawRegularKong                 ;
    cmp #12                             ;
    beq drawRegularKong                 ; if (level 8 or 12) then branch (draw Kong)
    cmp #9                              ;
    beq drawVerticalGuardiansJumper     ;
    cmp #16                             ;
    beq +                               ; if (level 16 - The Sixteenth Cavern) then branch (return)
    cmp #11                             ;
    bcs drawVerticalGuardiansJumper     ;
+
    rts                                 ;

; ***************************************************************************************
drawVerticalGuardiansJumper
    jmp drawVerticalGuardians

; ***************************************************************************************
drawEugene
eugeneColourMask = * + 1
    lda #$f0                            ;
    sta spriteColourMask                ; colour 2
    lda eugenePositionY                 ;
    and #$7f                            ;
    cmp #$60                            ; bottom coordinate
    beq toggleEugeneDirection           ;
    cmp #8                              ;
    beq toggleEugeneDirection           ; top coordinate
moveEugene
    lda eugenePositionY                 ;
    and #$80                            ;
    cmp #$80                            ;
    bne moveEugeneDown                  ;

    ; move Eugene up
    inc eugenePositionY                 ;
    jmp +                               ;

; ***************************************************************************************
moveEugeneDown
    dec eugenePositionY                 ;
+
    ldx #$4c                            ;
    lda eugenePositionY                 ;
    and #$7f                            ;
    tay                                 ;
    jsr setEugineSprite                 ;
    lda #3                              ;
    jmp plot                            ; plot Eugene (mode 3)

; ***************************************************************************************
setEugineSprite
    lda #<verticalGuardianMODE1Address  ; }
    sta plotSourceSpriteAddressLow      ; } address verticalGuardianMODE1Address
    lda #>verticalGuardianMODE1Address  ; }
    sta plotSourceSpriteAddressHigh     ; }
    rts                                 ;

; ***************************************************************************************
toggleEugeneDirection
    lda eugenePositionY                 ;
    eor #$80                            ;
    sta eugenePositionY                 ;
doWeMoveEugene
    jmp moveEugene                      ;

; ***************************************************************************************
drawRegularKong
    lda #$f0                            ;
    sta spriteColourMask                ; colour 2

    inc kongAnimationCounter            ;
    lda kongAnimationCounter            ;
    and #8                              ;
    cmp #8                              ;
    beq showKongAnimationState1         ;
    lda #<verticalGuardianMODE1Address  ; }
    sta plotSourceSpriteAddressLow      ; }
    lda #>verticalGuardianMODE1Address  ; } address of Kong animation 0
    sta plotSourceSpriteAddressHigh     ; }
    jmp +                               ;

; ***************************************************************************************
showKongAnimationState1
    lda #<verticalGuardianMODE1Address1 ; }
    sta plotSourceSpriteAddressLow      ; } address of Kong animation 1
    lda #>verticalGuardianMODE1Address1 ; }
    sta plotSourceSpriteAddressHigh     ; }
+
    ldx #78                             ;
    ldy #8                              ;
    lda #3                              ;
    jmp plot                            ; draw Kong (mode 3)

; ***************************************************************************************
return7
    rts                                 ;

; ***************************************************************************************
drawLevel19VerticalGuardians
    lda #4                              ;
    sta drawGuardianPlotType            ;
    lda #5                              ;
    sta verticalGuardiansPlotType       ;
    jmp drawRegularVerticalGuardians    ;

; ***************************************************************************************
drawVerticalGuardians
    lda currentLevel                    ;
    cmp #19                             ;
    beq drawLevel19VerticalGuardians    ;
    lda #2                              ;
    sta verticalGuardiansPlotType       ;
    lda #3                              ;
    sta drawGuardianPlotType            ;

drawRegularVerticalGuardians
    inc verticalAnimationCounter        ;
    lda verticalAnimationCounter        ;
    lsr                                 ;
    and #3                              ;
    sta eugenePositionY                 ; animation state: here 'eugenePositionY' used as temporary storage
    ldx #0                              ;
    lda #<verticalGuardianMODE1Address  ; }
    sta tempGuardianSpriteAddrLow       ; } address of vertical guardian sprite
    lda #>verticalGuardianMODE1Address  ; }
    sta tempGuardianSpriteAddrHigh      ; }
-
    cpx eugenePositionY                 ; animation state: here 'eugenePositionY' used as temporary storage
    beq gotSpriteAddress                ; multiplication by repeated addition
    inx                                 ;
    lda tempGuardianSpriteAddrLow       ; }
    clc                                 ; }
    adc #$40                            ; } increment by $40
    sta tempGuardianSpriteAddrLow       ; }
    jmp -                               ;

; ***************************************************************************************
gotSpriteAddress
    lda currentLevel                    ;
    cmp #14                             ;
    bne +                               ;

    ; level 14 - Skylab Landing Bay specific code
    lda #0                              ;
    sta tempGuardianSpriteAddrLow       ;

+
    lda #0                              ;
    sta currentGuardianColour           ;
    ldx #0                              ;
    stx currentGuardianIndex            ;

updateOneVerticalGuardian
    lda currentVerticalGuardians,x      ;
    cmp #$ff                            ;
    beq return7                         ;
    sta currentGuardianX                ; x coordinate + top bit for direction + bit 6 for speed
    inx                                 ;
    jsr readByteFromVerticalGuardians   ;
    sta currentGuardianY                ; y coordinate
    inx                                 ;
    jsr readByteFromVerticalGuardians   ;
    sta currentGuardianExtent1          ; Y extent 1
    inx                                 ;
    jsr readByteFromVerticalGuardians   ;
    sta currentGuardianExtent2          ; Y extent 2
    stx currentGuardianIndex            ;
    lda currentGuardianX                ;
    and #$40                            ;
    cmp #$40                            ;
    beq fastVerticalGuardian            ;
    lda #2                              ; set slow speed
    jmp +                               ;

; ***************************************************************************************
fastVerticalGuardian
    lda #4                          ; set fast speed
+
    sta currentGuardianSpeed        ;
    lda currentGuardianColour       ;
    and #3                          ;
    tax                             ;
    lda guardianColourMasks,x       ;
    sta spriteColourMask            ; set sprite colour
    lda currentGuardianExtent1      ;
    and #$80                        ;
    cmp #$80                        ;
    bne updateVerticalGuardian      ;
    jmp drawSkylabCrashing          ;

; ***************************************************************************************
updateVerticalGuardian
    lda currentLevel                ;
    cmp #19                         ;
    bne +                           ; if (not level 19 - The Meteor Storm) then branch
    lda spriteColourMask            ;
    cmp #$ff                        ;
    bne +                           ; if (not colour 3) then branch
    lda #$f0                        ; make the meteors in the Meteor Storm colour 2
    sta spriteColourMask            ;
+
    lda currentGuardianX            ;
    and #$3f                        ;
    asl                             ;
    asl                             ;
    clc                             ;
    adc #$10                        ;
    tax                             ;
    lda currentGuardianY            ;
    clc                             ;
    adc #8                          ;
    tay                             ;
verticalGuardiansPlotType = * + 1
    lda #5                          ;
    jsr plot                        ; draw vertical guardian (mode 5)
    lda currentGuardianX            ; }
    and #$80                        ; } check current direction
    cmp #$80                        ; }
    beq moveVerticalGuardianDown    ; if (down) then branch

    ; move guardian up
    lda currentGuardianY            ;
    sec                             ;
    sbc currentGuardianSpeed        ;
    sta currentGuardianY            ;
    jmp drawVerticalGuardian        ;

; ***************************************************************************************
moveVerticalGuardianDown
    lda currentGuardianY            ;
    clc                             ;
    adc currentGuardianSpeed        ;
    sta currentGuardianY            ;

drawVerticalGuardian
    lda currentGuardianX            ;
    and #$3f                        ;
    asl                             ;
    asl                             ;
    clc                             ;
    adc #$10                        ;
    tax                             ; X = (guardianX * 4) + 16
    lda currentGuardianY            ;
    clc                             ;
    adc #8                          ;
    tay                             ; Y = (guardianY + 8)
    lda tempGuardianSpriteAddrLow   ;
    sta plotSourceSpriteAddressLow  ;
    lda tempGuardianSpriteAddrHigh  ;
    sta plotSourceSpriteAddressHigh ;
drawGuardianPlotType = * + 1
    lda #4                          ;
    jsr plot                        ; draw vertical guardian (mode 4, or mode 3 on level 19)

    lda currentGuardianY            ;
    cmp currentGuardianExtent1      ;
    beq bounceCurrentGuardian       ;
    cmp currentGuardianExtent2      ;
    beq bounceCurrentGuardian       ;

updateCurrentVerticalSkylab
    ldx currentGuardianIndex            ;
    dex                                 ;
    dex                                 ;
    dex                                 ;
    lda currentGuardianX                ;
    jsr writeByteToVerticalGuardians    ;
    inx                                 ;
    lda currentGuardianY                ;
    jsr writeByteToVerticalGuardians    ;
    inx                                 ;
    lda currentGuardianExtent1          ;
    jsr writeByteToVerticalGuardians    ;
    inx                                 ;
    lda currentGuardianExtent2          ;
    jsr writeByteToVerticalGuardians    ;
    inx                                 ;
    stx currentGuardianIndex            ;
    lda currentGuardianColour           ;
    clc                                 ;
    adc #1                              ;
    and #3                              ;
    sta currentGuardianColour           ;
    cpx #$10                            ;
    beq return11                        ;
    jmp updateOneVerticalGuardian       ;

; ***************************************************************************************
return11
    rts                                 ;

; ***************************************************************************************
bounceCurrentGuardian
    lda currentLevel                    ;
    cmp #14                             ;
    beq crashLand                       ; if (skylab landing bay) then don't bounce, crash land
    lda currentGuardianX                ; }
    eor #$80                            ; } flip direction
    sta currentGuardianX                ; }
    jmp updateCurrentVerticalSkylab     ;

; ***************************************************************************************
crashLand
    lda currentGuardianExtent1          ;
    eor #$80                            ;
    sta currentGuardianExtent1          ;
    jsr getSkylabAnimationIndex         ;
    lda #0                              ;
    sta guardianSpriteOffsets,y         ;
    jmp updateCurrentVerticalSkylab     ;

; ***************************************************************************************
drawSkylabCrashing
    jsr getSkylabAnimationIndex         ;
    lda guardianSpriteOffsets,y         ; }
    clc                                 ; }
    adc #1                              ; } add one to sprite offsets
    sta guardianSpriteOffsets,y         ; }
    asl                                 ;
    asl                                 ;
    asl                                 ;
    asl                                 ;
    asl                                 ;
    asl                                 ;
    sta plotSourceSpriteAddressLow      ; set source address (low) to 64 * spriteOffset
    sty tempGuardianSpriteOffset        ;
    jsr getSkylabSprite                 ;
    lda currentGuardianX                ;
    and #$3f                            ;
    asl                                 ;
    asl                                 ;
    clc                                 ;
    adc #$10                            ;
    tax                                 ;
    lda currentGuardianY                ;
    clc                                 ;
    adc #8                              ;
    tay                                 ;
    lda #3                              ;
    jsr plot                            ; draw Skylab crashing (mode 3)
    ldy tempGuardianSpriteOffset        ;
    lda guardianSpriteOffsets,y         ;
    cmp #6                              ;
    beq finishedCrashingSkylab          ;
    jmp updateCurrentVerticalSkylab     ;

; ***************************************************************************************
finishedCrashingSkylab
    lda #0                          ;
    sta currentGuardianY            ;
    lda currentGuardianExtent1      ;
    eor #$80                        ;
    sta currentGuardianExtent1      ;
    lda currentGuardianX            ;
    ora #$80                        ;
    clc                             ;
    adc #8                          ;
    sta currentGuardianX            ;
    and #$3f                        ;
    cmp #$20                        ;
    bcs guardianXTooBig             ;
    jmp updateCurrentVerticalSkylab ;

; ***************************************************************************************
getSkylabAnimationIndex
    lda currentGuardianY            ;
    cmp #$48                        ;
    beq setYZero                    ;
    cmp #$38                        ;
    beq setYOne                     ;

    ldy #2                          ;
    rts                             ;

; ***************************************************************************************
setYZero
    ldy #0                          ;
    rts                             ;

; ***************************************************************************************
setYOne
    ldy #1                          ;
    rts                             ;

; ***************************************************************************************
guardianXTooBig
    lda currentGuardianX            ;
    sec                             ;
    sbc #$20                        ;
    sta currentGuardianX            ;
    jmp updateCurrentVerticalSkylab ;

; ***************************************************************************************
getSkylabSprite
    jsr getSkylabAnimationIndex     ;
    lda guardianSpriteOffsets,y     ;
    cmp #4                          ;
    beq setSkylabSprite4            ;
    cmp #5                          ;
    beq setSkylabSprite5            ;
    cmp #6                          ;
    beq setSkylabSprite6            ;
    lda #>verticalGuardianMODE1Address  ;
    sta plotSourceSpriteAddressHigh     ;
    rts                                 ;

; ***************************************************************************************
setSkylabSprite4
    lda #<skylab4Sprite             ;
    sta plotSourceSpriteAddressLow  ; set sprite address
    lda #>skylab4Sprite             ;
    sta plotSourceSpriteAddressHigh ;
    rts                             ;

; ***************************************************************************************
setSkylabSprite5
    lda #<skylab5Sprite             ;
    sta plotSourceSpriteAddressLow  ; set sprite address
    lda #>skylab5Sprite             ;
    sta plotSourceSpriteAddressHigh ;
    rts                             ;

; ***************************************************************************************
setSkylabSprite6
    lda #<blankAreaOfScreen         ;
    sta plotSourceSpriteAddressLow  ; set sprite address (area to the right of screen that is blank)
    lda #>blankAreaOfScreen         ;
    sta plotSourceSpriteAddressHigh ;
    rts                             ;


; ***************************************************************************************
copyVerticalGuardianIntoMODE1Format
    ldy #0                              ; loop counter
    lda #<verticalGuardianMODE1Address  ; }
    sta storeByteY + 1                  ; }
!if (<verticalGuardianMODE1Address) != 0 {
    !error "vertical guardian address should be on a page boundary"
}
    sty tempX                           ; }
    lda #>verticalGuardianMODE1Address  ; }
    sta storeByteY + 2                  ; }

-
    ldx tempX                       ;
specialSpriteSourceAddress = * + 1
    lda eugeneSprite,x              ;
    sta copyEugeneSourceByte        ; store source byte
    stx tempX                       ; [redundant]
    and #$f0                        ; extract top nybble
    sta copyEugeneTempByte          ; save it
    lsr                             ;
    lsr                             ;
    lsr                             ;
    lsr                             ; shift to lower nybble
    clc                             ;
    adc copyEugeneTempByte          ; add original to get a Eugene in colour 3

    jsr storeByteY                  ; store left hand byte

    lda copyEugeneSourceByte        ; recall source byte
    and #$0f                        ; lower nybble
    sta copyEugeneTempByte          ; save it
    asl                             ;
    asl                             ;
    asl                             ;
    asl                             ;
    clc                             ;
    adc copyEugeneTempByte          ; add lower nybble to get white Eugene in colour 3
    sta copyEugeneTempByte          ; store

    tya                             ; }
    clc                             ; } Y += 8
    adc #8                          ; }
    tay                             ; }

    lda copyEugeneTempByte          ;
    jsr storeByteY                  ; store right hand side byte of Eugene
    ldx tempX                       ;
    inx                             ; increment source counter
    stx tempX                       ;
    tya                             ; }
    sec                             ; }
    sbc #7                          ; } Y -= 7
    tay                             ; }
    cmp #8                          ;
    bne -                           ; loop 8 times
    ldy #$00                        ; reset loop counter
    lda storeByteY + 1              ;
    clc                             ;
    adc #$10                        ; add 16 to destination byte
    sta storeByteY + 1              ;
    ldx tempX                       ;
    cpx #$80                        ; check if we are done
    bne -                           ; if (not done) then branch (loop back)
    rts                             ;

; ***************************************************************************************
levelWithKongBeast
    lda #2                          ;
    sta copyWhichSprite             ; copy Kong
    jmp continueCopySprites         ;

; ***************************************************************************************
levelWithAmoebatrons
    lda #8                          ;
    sta copyWhichSprite             ; copy Amoebatrons
    jmp continueCopySprites         ;

; ***************************************************************************************
levelEugenesLair
    lda #1                          ;
    sta copyWhichSprite             ; copy Eugene
    lda #8                          ;
    sta eugenePositionY             ;
    jmp continueCopySprites         ;

; ***************************************************************************************
copyVerticalSprites
    lda #0                              ;
    sta verticalAnimationCounter        ;
    lda #>eugeneSprite                  ;
    sta specialSpriteSourceAddress + 1  ;
    lda #<eugeneSprite                  ;
    sta specialSpriteSourceAddress      ; default to copying Eugene
    lda currentLevel                    ;
    cmp #12                             ;
    beq levelWithKongBeast              ;
    cmp #8                              ;
    beq levelWithKongBeast              ;
    cmp #9                              ;
    beq levelWithAmoebatrons            ;
    cmp #5                              ;
    beq levelEugenesLair                ;
    lda currentLevel                    ;
    sec                                 ;
    sbc #10                             ;
    tax                                 ;
    lda verticalGuardiansSpritesArray,x ;
    sta copyWhichSprite                 ; copy based on level number - 10
continueCopySprites
    ldx #1                              ;

-
    cpx copyWhichSprite                 ; multiplication by repeated addition
    beq foundSprite                     ;

    lda specialSpriteSourceAddress      ; }
    clc                                 ; }
    adc #$80                            ; }
    sta specialSpriteSourceAddress      ; } add $80 to address
    lda specialSpriteSourceAddress + 1  ; }
    adc #0                              ; }
    sta specialSpriteSourceAddress + 1  ; }

    inx                                 ;
    jmp -                               ;

; ***************************************************************************************
return4
    rts                                 ;

; ***************************************************************************************
foundSprite
    jsr copyVerticalGuardianIntoMODE1Format ;
    lda currentLevel                    ;
    cmp #9                              ; Levels 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
    beq handleVerticalGuardians         ; have vertical guardians
    cmp #11                             ;
    bcc return4                         ; if (currentLevel < 11) then branch (return)

handleVerticalGuardians
    sec                                 ;
    sbc #8                              ;
    asl                                 ;
    asl                                 ;
    asl                                 ;

    clc                                 ;
    adc #<verticalGuardians             ;
    sta readVerticalGuardiansByte + 1   ; addr = verticalGuardians + 8 * (currentLevel-8)
    lda #>verticalGuardians             ;
    adc #0                              ;
    sta readVerticalGuardiansByte + 2   ;

    ldx #0                              ; loop counter
    ldy #0                              ;
-
    jsr readVerticalGuardiansByte       ;
    cmp #$ff                            ;
    beq finishUpVerticalGuardians       ; if (terminator) then branch
    sta currentVerticalGuardians,y      ; write x coordinate of vertical guardian. top bit is direction (clear = up, set = down)
    iny                                 ;
    inx                                 ;
    jsr readVerticalGuardiansByte       ;
    sta currentVerticalGuardians,y      ; write byte 1: copy byte 1
    iny                                 ;
    sta currentVerticalGuardians,y      ; write byte 2: copy byte 1
    iny                                 ;
    sta currentVerticalGuardians,y      ; write byte 3: copy byte 1

    lda currentVerticalGuardians,y      ; [redundant]
    and #$0f                            ;
    asl                                 ;
    asl                                 ;
    asl                                 ;
    sta currentVerticalGuardians,y      ; write first extent (bottom nybble of byte 1 multiplied by eight)

    dey                                 ;
    lda currentVerticalGuardians,y      ;
    and #$f0                            ;
    lsr                                 ;
    sta currentVerticalGuardians,y      ; write second extent (top nybble of byte 1 divided by two)

    dey                                 ;
    sta currentVerticalGuardians,y      ; write y coordinate (top nybble of byte 1 divided by two)
    iny                                 ;
    iny                                 ;
    iny                                 ; Y is effectively moved on four bytes in aggregate
    inx                                 ;
    cpx #8                              ; loop eight times
    bne -                               ;
    rts                                 ;

; ***************************************************************************************
finishUpVerticalGuardians
    sta currentVerticalGuardians,y      ;
    rts                                 ;

; ***************************************************************************************
readVerticalGuardiansByte
    lda verticalGuardians + 8,x         ;
    rts                                 ;

; ***************************************************************************************
readByteFromVerticalGuardians
    lda currentVerticalGuardians,x      ;
    rts                                 ;

; ***************************************************************************************
writeByteToVerticalGuardians
    sta currentVerticalGuardians,x      ;
    rts                                 ;

; ***************************************************************************************
swapBackPages
    RTS                                 ;

; ***************************************************************************************
readGuardianByte
    lda $2280,x                     ; [address is overwritten before use]
    rts                             ;

; ***************************************************************************************
updateLevel19Guardians
    jsr updateHorizontalGuardians   ;
    jmp updateLevel19Special        ;

; ***************************************************************************************
animateKeysUpdateHorizontalGuardiansAndLevel19EnergyFields
    jsr colourCycleKeys             ;

    lda currentLevel                ;
    cmp #19                         ;
    beq updateLevel19Guardians      ; if (level 19 - The Meteor Storm) then branch (update guardians and energy fields)
    jmp updateHorizontalGuardians   ; [redundant]


; ***************************************************************************************
updateHorizontalGuardians
    lda #0                          ;
    sta drawGuardianLoopCounter     ;
    tay                             ;
    tax                             ;

drawGuardiansLoop
    lda guardianPositions,y         ; }
    sta zpGuardianPositionX,x       ; }
    iny                             ; } copy guardian info to zero page cache
    inx                             ; } from guardianPositions to $8a for four bytes
    cpx #4                          ; }
    bne drawGuardiansLoop           ; }

    lda zpGuardianPositionX         ;
    cmp #$ff                        ;
    beq swapBackPages               ; if (end of guardian array) then branch (finish up)

    jsr updateAndDrawGuardian       ; update and draw guardian

    lda drawGuardianLoopCounter     ;
    clc                             ;
    rol                             ;
    rol                             ;
    tay                             ; Y = 4 * loop counter
    ldx #0                          ; loop counter

-
    lda zpGuardianPositionX,x       ; }
    sta guardianPositions,y         ; }
    inx                             ; } copy guardian info back from zero page cache
    iny                             ; } from $8a to guardianPositions for four bytes
    cpx #4                          ; }
    bne -                           ; }

    inc drawGuardianLoopCounter     ;

    lda drawGuardianLoopCounter     ;
    clc                             ;
    rol                             ;
    rol                             ;
    tay                             ;
    ldx #0                          ;
    jmp drawGuardiansLoop           ;

; ***************************************************************************************
updateAndDrawGuardian
    lda zpGuardianPositionY         ;
    eor #$40                        ; flip bit 6
    sta zpGuardianPositionY         ;

    tay                             ;
    and #$20                        ;
    cmp #$20                        ;
    bne moveLeftOrRight             ; if (bit 5 clear) then branch
    tya                             ;
    and #$40                        ;
    cmp #$40                        ;
    beq moveLeftOrRight             ; if (bit 6 set) then branch
    rts                             ;

; ***************************************************************************************
moveLeftOrRight
    lda drawGuardianLoopCounter     ;
    and #3                          ;
    tax                             ;
    lda guardianColourTable,x       ;
    sta plotColourMask              ; set plot colour

    lda zpGuardianPositionY         ;
    and #$80                        ;
    beq moveGuardianLeft            ;

    ; move guardian right
    lda zpGuardianPositionX         ;
    clc                             ;
    adc #1                          ;
    and #$7f                        ;
    sta currentGuardianXPosition    ;

    lda zpGuardianPositionX         ;
    and #3                          ;
    asl                             ;
    sta zpGuardianAnimIndex         ; temp = 2 * (guardianX and 3)
    bne notAtCellXBoundary          ;

    jsr positionCursorAtGuardian    ;
    jsr eraseLeftOfGuardian         ;

notAtCellXBoundary
    jsr positionCursorAtGuardian    ;
    ; draw e0+temp, e1+temp
    ;      e8+temp, e9+temp
    lda #$e0                        ;
    clc                             ;
    adc zpGuardianAnimIndex         ;
    jsr drawIfNotOverExit           ;

    lda #$e1                        ;
    clc                             ;
    adc zpGuardianAnimIndex         ;
    jsr drawIfNotOverExit           ;

    inc cursorY                     ;
    dec cursorX                     ;
    dec cursorX                     ;

    lda #$e8                        ;
    clc                             ;
    adc zpGuardianAnimIndex         ;
    jsr drawIfNotOverExit           ;

    lda #$e9                        ;
    clc                             ;
    adc zpGuardianAnimIndex         ;
    jsr drawIfNotOverExit           ;

    jmp testForBounceHorizontal     ;

; ***************************************************************************************
setAnimIndexBasedOnX
    lda zpGuardianPositionX         ;
    and #3                          ;
    asl                             ;
    sta zpGuardianAnimIndex         ;
    jmp notAtCellXBoundary          ;

; ***************************************************************************************
moveGuardianLeft
    lda zpGuardianPositionX         ;
    sec                             ;
    sbc #1                          ;
    and #$7f                        ;
    sta currentGuardianXPosition    ;
    lda zpGuardianPositionX         ;
    and #3                          ;
    eor #3                          ;
    asl                             ;
    sta zpGuardianAnimIndex         ;
    bne +                           ;

    jsr positionCursorAtGuardian    ;
    jsr eraseRightOfGuardian        ;

+
    jsr positionCursorAtGuardian    ;
    lda currentLevel                ;
    cmp #19                         ;
    beq setAnimIndexBasedOnX        ;
    cmp #15                         ;
    beq setAnimIndexBasedOnX        ;

    ; draw f1+temp, f0+temp
    ;      f9+temp, f8+temp
    lda #$f1                        ;
    clc                             ;
    adc zpGuardianAnimIndex         ;
    jsr drawIfNotOverExit           ;
    lda #$f0                        ;
    clc                             ;
    adc zpGuardianAnimIndex         ;
    jsr drawIfNotOverExit           ;

    inc cursorY                     ;
    dec cursorX                     ;
    dec cursorX                     ;

    lda #$f9                        ;
    clc                             ;
    adc zpGuardianAnimIndex         ;
    jsr drawIfNotOverExit           ;

    lda #$f8                        ;
    clc                             ;
    adc zpGuardianAnimIndex         ;
    jsr drawIfNotOverExit           ;

    jmp testForBounceHorizontal     ;

; ***************************************************************************************
positionCursorAtGuardian
    lda zpGuardianPositionX         ;
    and #$fc                        ;
    lsr                             ;
    lsr                             ; TAB($8a/4 + 5, ($8b AND $0f) + 1)
    clc                             ;
    adc #5                          ;
    sta cursorX                     ;

    lda zpGuardianPositionY         ;
    and #$0f                        ;
    clc                             ;
    adc #1                          ;
    sta cursorY                     ;
    rts                             ;

; ***************************************************************************************
eraseLeftOfGuardian
    dec cursorX                     ; move left one character
    jmp +                           ;

; ***************************************************************************************
eraseRightOfGuardian
    inc cursorX                     ;
    inc cursorX                     ; move forward two characters
+
    jsr eraseIfNotOverExit          ;

    inc cursorY                     ; down
    dec cursorX                     ; left

    jsr eraseIfNotOverExit          ;
    rts                             ;

; ***************************************************************************************
toggleGuardianDirection
    lda zpGuardianPositionY         ;
    eor #$80                        ; toggle direction
    sta zpGuardianPositionY         ;
    rts                             ;

; ***************************************************************************************
testForBounceHorizontal
    lda currentGuardianXPosition    ;
    sta zpGuardianPositionX         ;
    cmp zpGuardianLimit1            ;
    beq toggleGuardianDirection     ;
    cmp zpGuardianLimit2            ;
    beq toggleGuardianDirection     ;
    rts                             ;

; ***************************************************************************************
copyGuardianSprites
    lda #<guardianGraphics              ;
    sta readGuardianByte + 1            ; set address to read guardian graphics
    lda #>guardianGraphics              ;
    sta readGuardianByte + 2            ;

    ldx currentLevel                    ;
    lda guardianSetForEachLevel - 1,x   ;
    sta zpGuardianPositionX             ;

    ldx #1                              ;
-
    cpx zpGuardianPositionX             ;
    beq copyGuardiansWithAddress        ;

    lda readGuardianByte + 1            ;
    clc                                 ;
    adc #$80                            ; multiplication by repeated addition
    sta readGuardianByte + 1            ; add $80 for each X up to zpGuardianPositionX
    lda readGuardianByte + 2            ;
    adc #0                              ;
    sta readGuardianByte + 2            ;
    inx                                 ;
    jmp -                               ;

; ***************************************************************************************
copyGuardiansWithAddress
    ldx #0                              ; loop counter
-
    jsr readGuardianByte                ;
    sta guardianSpriteCache,x           ; copy from guardian sprites to cache
    jsr reverseBits                     ;
    sta guardianSpriteCache + $80,x     ; copy reflected guardians to cache
    inx                                 ;
    cpx #$80                            ;
    bne -                               ;

    ; find guardian position data for current level
    lda #<(guardianLevelData - 1)       ;
    sta readGuardianByte + 1            ; set start of guardian level data
    lda #>(guardianLevelData - 1)       ;
    sta readGuardianByte + 2            ;

    ldy #0                              ;
    ldx #0                              ;
findGuardianDataLoop
    inc readGuardianByte + 1            ; } increment source address
    bne +                               ; }
    inc readGuardianByte + 2            ; }
+
    jsr readGuardianByte                ;
    cmp #$ff                            ;
    beq checkLevelNumber                ; when we reach a 255 (a level separator byte), then branch
    jmp findGuardianDataLoop            ;

; ***************************************************************************************
checkLevelNumber
    iny                                 ;
    cpy currentLevel                    ;
    bne findGuardianDataLoop            ; if (not current level) then branch (loop back)

    ldy #0                              ;
    ldx #1                              ;
copyGuardianPositionDataLoop
    jsr readGuardianByte                ;
    sta guardianPositions,y             ; Y coordinate
    iny                                 ;
    iny                                 ;
    sta guardianPositions,y             ; X1 coordinate
    inx                                 ;
    dey                                 ;
    jsr readGuardianByte                ; Y coordinate
    sta guardianPositions,y             ;
    inx                                 ;
    iny                                 ;
    iny                                 ;
    jsr readGuardianByte                ; X2 coordinate
    sta guardianPositions,y             ;
    inx                                 ;
    jsr readGuardianByte                ;
    iny                                 ;
    cmp #$ff                            ;
    bne copyGuardianPositionDataLoop    ;
    sta guardianPositions,y             ;
    rts                                 ;

; ***************************************************************************************
isOverExit
    lda cursorY                         ;
    clc                                 ;
    adc #2                              ;
    cmp exitPositionY                   ;
    beq textXPosition                   ; if (matches Y, then test X)
    sec                                 ;
    sbc #1                              ;
    cmp exitPositionY                   ;
    bne return13                        ; if (not over exit) return with Z=0
textXPosition
    lda cursorX                         ;
    cmp exitPositionX                   ;
    beq return13                        ; if (over exit) return with Z=1
    sec                                 ;
    sbc #1                              ;
    cmp exitPositionX                   ; if (over exit) return with Z=1
return13
    rts                                 ;

; ***************************************************************************************
setCursorScreenAddress
    lda cursorX                         ;
    asl                                 ;
    asl                                 ;
    tax                                 ;
    stx plotX                           ;

    lda cursorY                         ;
    asl                                 ;
    asl                                 ;
    asl                                 ;
    tay                                 ;
    sty plotY                           ;

    ; remember plot screen address
    lda plotScreenAddressLow            ;
    pha                                 ;
    lda plotScreenAddressHigh           ;
    pha                                 ;

    jsr plotGetScreenAddress            ;

    ; record results
    lda plotScreenAddressLow            ;
    sta cellScreenAddressLow            ;
    lda plotScreenAddressHigh           ;
    sta cellScreenAddressHigh           ;

    ; restore plot screen address
    pla                                 ;
    sta plotScreenAddressHigh           ;
    pla                                 ;
    sta plotScreenAddressLow            ;
    rts                                 ;

; ***************************************************************************************
drawIfNotOverExit
    sta rememberCharacterToDraw         ;
    jsr isOverExit                      ;
    beq moveForward                     ;

    jsr setCursorScreenAddress          ;
    lda rememberCharacterToDraw         ;
    and #$1f                            ;
    asl                                 ;
    asl                                 ;
    asl                                 ;
    clc                                 ;
    adc #<guardianSpriteCache           ;
    sta cellPlotSourceSpriteAddressLow  ;
    lda #>guardianSpriteCache           ;
    adc #0                              ;
    sta cellPlotSourceSpriteAddressHigh ;
    jsr cellPlot                        ;

moveForward
    inc cursorX                         ; move forward
    rts                                 ;

; ***************************************************************************************
eraseIfNotOverExit
    jsr isOverExit                      ;
    beq moveForward2                    ;

    jsr setCursorScreenAddress          ;
    lda #<eraseGuardianEmptyBytes       ;
    sta cellPlotSourceSpriteAddressLow  ;
    lda #>eraseGuardianEmptyBytes       ;
    sta cellPlotSourceSpriteAddressHigh ;
    jsr cellPlot                        ;

moveForward2
    inc cursorX                         ; move forward
    rts                                 ;

; ***************************************************************************************
updateLevel19Special
    jsr updateLevel19EnergyFields       ;

    ; copy guardian info away
    ldx #0                              ; loop counter
-
    lda guardianPositions,x             ;
    sta guardianPositionsCopy,x         ;
    inx                                 ;
    cpx #5                              ;
    bne -                               ;

    lda meteorXCoordinate               ; x coordinate
    sec                                 ;
    sbc #5                              ;
    asl                                 ;
    asl                                 ;
    sta guardianPositions               ;

    lda meteorYCoordinate               ; y coordinate
    clc                                 ;
    adc #1                              ;
    sta guardianPositions + 1           ; set y coordinate

    lda #$ff                            ;
    sta guardianPositions + 4           ; only one guardian
    jsr collideWithHorizontalGuardians  ; check for collision

    ; copy guardian info back
    ldx #0                              ;
-
    lda guardianPositionsCopy,x         ;
    sta guardianPositions,x             ;
    inx                                 ;
    cpx #5                              ;
    bne -                               ;

    jsr swapMeteorSpritesWith0C00       ;
    inc meteorYCoordinate               ; meteor moves down

    lda #3                              ; COLOUR 3
    jsr setTextColour                   ;

    lda #31                             ;
    jsr OSWRCH                          ;
    lda meteorXCoordinate               ; TAB(meteorXCoordinate, meteorYCoordinate + 1)
    jsr OSWRCH                          ; x coordinate

    lda meteorYCoordinate               ;
    and #1                              ;
    sta meteorTailAnimationOffset       ;
    lda meteorYCoordinate               ;
    cmp #0                              ;
    bne gotoYPosition                   ;

    clc                                 ;
    adc #1                              ;
    jsr OSWRCH                          ; y coordinate 1
    jmp checkForMeteorLanding           ;


; ***************************************************************************************
gotoYPosition
    jsr OSWRCH                      ; y coordinate
    lda #charSPACE                  ;
    jsr printCharacterAndMoveBelow  ;

checkForMeteorLanding
    lda meteorYCoordinate           ;
    cmp meteorLandingY              ;
    beq meteorLanded                ;

    ; meteor still falling
meteorAnimationState1
    lda #$e0                        ;
    clc                             ;
    adc meteorTailAnimationOffset   ;
    tay                             ;
    jsr printCharacterAndMoveBelow  ; draw meteor tail
    tya                             ;
    clc                             ;
    adc #2                          ;
    jsr OSWRCH                      ; draw meteor
    jmp swapMeteorSpritesWith0C00   ;

; ***************************************************************************************
meteorLanded
    inc meteorAnimationState        ;
    dec meteorYCoordinate           ;
    lda meteorAnimationState        ;
    cmp #4                          ;
    beq eraseLandedMeteors          ;
    cmp #1                          ;
    beq meteorAnimationState1       ;
    cmp #2                          ;
    beq meteorAnimationState2       ;

    ; animation state 3
    lda #$e5                        ;
    jsr printCharacterAndMoveBelow  ;
    lda #$e7                        ;
    jsr OSWRCH                      ;
    jmp swapMeteorSpritesWith0C00   ;

; ***************************************************************************************
eraseLandedMeteors
    lda #0                          ;
    sta meteorAnimationState        ;
    lda #$ff                        ;
    sta meteorYCoordinate           ;
    lda #charSPACE                  ;
    jsr printCharacterAndMoveBelow  ;
    lda #charSPACE                  ;
    jsr OSWRCH                      ;

    ; show next meteor
    inc meteorIndex                 ;
    lda meteorIndex                 ;
    and #$0f                        ;
    tax                             ;
    lda meteorPositions,x           ;
    tay                             ;
    and #$1f                        ;
    clc                             ;
    adc #4                          ;
    sta meteorXCoordinate           ;
    tya                             ;
    and #$e0                        ;
    lsr                             ;
    lsr                             ;
    lsr                             ;
    lsr                             ;
    lsr                             ;
    clc                             ;
    adc #3                          ;
    sta meteorLandingY              ;
    lda meteorXCoordinate           ;
    cmp #$19                        ;
    beq landingPoint11              ;
    cmp #$1a                        ;
    beq landingPoint11              ;
    jmp swapMeteorSpritesWith0C00   ;

; ***************************************************************************************
landingPoint11
    lda #$0b                        ;
    sta meteorLandingY              ;
    jmp swapMeteorSpritesWith0C00   ;

; ***************************************************************************************
meteorAnimationState2
    lda #$e4                        ;
    jsr printCharacterAndMoveBelow  ;
    lda #$e6                        ;
    jsr OSWRCH                      ;
    jmp swapMeteorSpritesWith0C00   ;

; ***************************************************************************************
swapMeteorSpritesWith0C00
    ldx #0                          ; loop counter
-
    lda meteorAndTailSprites,x      ;
    tay                             ;
    lda softCharacterDefinitions,x  ;
    sta meteorAndTailSprites,x      ;
    tya                             ;
    sta softCharacterDefinitions,x  ;
    inx                             ;
    cpx #$40                        ;
    bne -                           ;
    rts                             ;

; ***************************************************************************************
printCharacterAndMoveBelow
    jsr OSWRCH                      ;
    lda #$0a                        ;
    jsr OSWRCH                      ;
    lda #8                          ;
    jmp OSWRCH                      ;

; ***************************************************************************************
updateLevel19EnergyFields
    lda energyFieldTimer            ;
    and #$10                        ;
    cmp #0                          ;
    beq +                           ;

    ldx #$3f                        ;
    ldy #$f2                        ;
    jsr checkForCollisionLevel19    ;

    ldx #$49                        ;
    ldy #$f2                        ;
    jsr checkForCollisionLevel19    ;

+
    jmp animateLevel19EnergyFields  ;

; ***************************************************************************************
checkForCollisionLevel19
    stx readScreenByte + 2          ;
    sty readScreenByte + 1          ;
    ldx #0                          ;
    jsr readScreenByte              ;
    and #$80                        ; top bit set indicates collision
    cmp #0                          ;
    bne deathJumper2                ;
    ldx #7                          ;
    jsr readScreenByte              ;
    and #1                          ; bottom bit set indicates collision
    cmp #0                          ;
    bne deathJumper2                ;
    ldx #$90                        ;
    jsr readScreenByte              ;
    and #$80                        ; top bit set indicates collision
    cmp #0                          ;
    bne deathJumper2                ;
    ldx #$97                        ;
    jsr readScreenByte              ;
    and #1                          ; bottom bit set indicates collision
    cmp #0                          ;
    bne deathJumper2                ;
    rts                             ;

; ***************************************************************************************
deathJumper2
    jmp death                       ;

; ***************************************************************************************
readScreenByte
    lda $ffff,x                     ;
    rts                             ;

; ***************************************************************************************
drawFooterText
    lda #$60                        ;
    sta drawFooterTextOrReturn      ; Store opcode for RTS
    jsr drawRoomName                ;
    jmp drawScoreLevelLives         ;

; ***************************************************************************************
resetLevel19Meteors
    lda #$20                        ; }
    sta drawFooterTextOrReturn      ; } store opcode for JSR
    lda #8                          ;
    sta meteorXCoordinate           ;
    lda #$ff                        ;
    sta meteorYCoordinate           ;
    lda #6                          ;
    sta meteorLandingY              ;
    lda #0                          ;
    sta meteorIndex                 ;
    lda #$f0                        ;
    sta energyFieldTimer            ;
    jmp resetVerticalSprites        ;


; ***************************************************************************************
showTitleScreenMessageAndWaitForRETURN
    lda #2                          ;
    sta lives                       ;

    ; set palette to regular numbers
    ldx #0                          ;
-
    txa                             ;
    jsr setPalette                  ;
    inx                             ;
    cpx #5                          ;
    bne -                           ;

    ; set logical colour 3 to white
    lda #7                          ;
    ldx #3                          ;
    jsr setPalette                  ;

    ; delay loop
    lda #$d0                        ;
    sta $70                         ;
    tax                             ;
    tay                             ;

-
    inx                             ;
    bne -                           ;
    iny                             ;
    bne -                           ;
    stx $71                         ; reset to zero
    sty $72                         ;

    ldy #$ff                        ;
    ldx #$b6                        ;
    lda #$81                        ; wait for RETURN key
    jsr OSBYTE                      ;
    cpy #$ff                        ;
    beq startGameJumper             ; if (RETURN pressed) then branch

    ldy $72                         ;
    ldx $71                         ;
    inc $70                         ;
    bne -                           ;

    lda #$ff                        ;
    sta previousNoteByte            ;
    sta musicCounter                ; }
    sta vsyncCounter                ; }
    jsr resumeMusic                 ; } demo mode
    jmp playAttractLoop             ; }

; ***************************************************************************************
startGameJumper
    jmp startGame                   ;

; ***************************************************************************************
resetVerticalSprites
    lda #$ff                        ;
    sta willyIsOnGround             ;
    jmp copyVerticalSprites         ;

; ***************************************************************************************
drawFooterTextOrReturn
    jsr drawFooterText              ;

drawScoreLevelLives
    lda currentLevel                ;
    cmp #10                         ; level 10 - The Endorian Forest
    bne nonLevel10                  ;
    lda #$ff                        ;
    sta conveyorLength              ;
    jmp drawFixedString             ;

; ***************************************************************************************
nonLevel10
    ldy currentLevel                ;
    lda fixedText - 1,y             ;
    and #$80                        ;
    clc                             ;
    adc $71                         ;
    clc                             ;
    adc #5                          ;
    sta conveyorX                   ;

    lda $72                         ;
    clc                             ;
    adc #1                          ;
    sta conveyorY                   ;

    lda $73                         ;
    sta conveyorLength              ;

drawFixedString
    ldx #4                          ;
    ldy #20                         ;
    jsr setTextPos                  ; TAB(4,20)

    ; draw fixed text below play area
    ldy #0                          ;
-
    lda fixedText,y                 ;
    and #$7f                        ;
    jsr OSWRCH                      ;
    iny                             ;
    cpy #fixedTextEnd - fixedText   ;
    bne -                           ;
    rts                             ;

; ***************************************************************************************
; On Entry:
;       A = colour (add 128 to set background colour)
setTextColour
    pha                                                 ;
    lda #17                                             ;
    jsr OSWRCH                                          ;
    pla                                                 ;
    jmp OSWRCH                                          ;

; ***************************************************************************************
setTextPosFromPixelPos
    txa                                     ; }
    lsr                                     ; }
    lsr                                     ; }
    sta cursorX                             ; } TAB(X/4, Y/8+2)
    tya                                     ; }
    lsr                                     ; }
    lsr                                     ; }
    lsr                                     ; }
    clc                                     ; }
    adc #2                                  ; }
    sta cursorY                             ; }
    rts                                     ;

; ***************************************************************************************
setTextPos
    lda #31                                             ;
    jsr OSWRCH                                          ;
    txa                                                 ;
    jsr OSWRCH                                          ;
    tya                                                 ;
    jmp OSWRCH                                          ;

; ***************************************************************************************
;
; On Entry:
;   cellPlotSourceSpriteAddress is address of sprite
;   plotScreenAddressLow    is screen address (use plotGetScreenAddress to get address)
;   plotColourMask          is $00 for colour 0, $0f for colour 1, $f0 for colour 2, and $ff for colour 3
;
; ***************************************************************************************
cellPlot
    ldy #7                              ;
-
    lda (cellPlotSourceSpriteAddressLow),y  ;
    and #$f0                            ;
    sta tempCellPlotA                   ;
    lsr                                 ;
    lsr                                 ;
    lsr                                 ;
    lsr                                 ;
tempCellPlotA = * + 1
    adc #$ff                            ;
    and plotColourMask                  ;
    sta (cellScreenAddressLow),y        ; left side


    lda (cellPlotSourceSpriteAddressLow),y  ;
    and #$0f                            ;
    tax                                 ;
    lda toFullColour,x                  ;
    and plotColourMask                  ;
    sta tempA                           ;
    tya                                 ;
    tax                                 ;
    clc                                 ;
    adc #8                              ;
    tay                                 ;
    lda tempA                           ;
    sta (cellScreenAddressLow),y        ; right side

    txa                                 ;
    tay                                 ;
    dey                                 ;
    bpl -                               ;
return10
    rts                                 ;

; ***************************************************************************************
drawConveyor
    lda currentLevel                ;
    cmp #18                         ;
    beq return10                    ;

    inc conveyorSpriteOffset        ;
    lda conveyorLength              ;
    cmp #$ff                        ;
    beq return10                    ;

    lda conveyorX                   ;
    and #$80                        ;
    beq +                           ;
    lda #3                          ;
+
    eor conveyorSpriteOffset        ;

    and #3                              ;
    asl                                 ;
    asl                                 ;
    asl                                 ;
    clc                                 ;
    adc #$58                            ;
    sta cellPlotSourceSpriteAddressLow  ;
    lda #$0c                            ;
    sta cellPlotSourceSpriteAddressHigh ;

    lda conveyorX                       ;
    and #$7f                            ; remove top bit (direction)
    sta cursorX                         ;

    lda conveyorY                       ;
    sta cursorY                         ;

    jsr setCursorScreenAddress          ;
    lda #$f0                            ;
    sta plotColourMask                  ; plot colour 2

    jsr cellPlot                        ; plot first conveyor
    ldx conveyorLength                  ;

    lda cellScreenAddressLow            ;
    sta fromScreenAddressLow            ;
    sta toScreenAddressLow              ;
    lda cellScreenAddressHigh           ;
    sta fromScreenAddressHigh           ;
    sta toScreenAddressHigh             ;

--
    dex                                 ;
    beq doneConveying                   ;

    lda toScreenAddressLow              ;
    clc                                 ;
    adc #16                             ;
    sta toScreenAddressLow              ;
    bcc +
    inc toScreenAddressHigh             ;
+
    ldy #15                             ;
-
fromScreenAddressLow = * + 1
fromScreenAddressHigh = * + 2
    lda $ffff,y                         ;
toScreenAddressLow = * + 1
toScreenAddressHigh = * + 2
    sta $ffff,y                         ;
    dey                                 ;
    bpl -                               ;

    jmp --                              ;
doneConveying
    rts                                 ;


; ***************************************************************************************
showScoreLivesAndLevel
    lda #$ff                        ; }
    jsr addToScore                  ; } add 0 to score

    ; show lives
    lda #31                         ; }
    jsr OSWRCH                      ; }
    lda #34                         ; } TAB(34,20)
    jsr OSWRCH                      ; }
    lda #20                         ; }
    jsr OSWRCH                      ; }

    lda currentLevel                ; show current level
    tax                             ; [redundant]
    ldy #0                          ; counter for tens digit
    jsr print10sDigit               ; print 10s digit
    txa                             ; X is units
    tay                             ;
    jmp printY                      ; print units

; ***************************************************************************************
;
; On Entry:
;   A is the number to print
;   Y = 0
;
; ***************************************************************************************
print10sDigit
    cmp #10                         ;
    bcc printY                      ;
    iny                             ;
    sec                             ;
    sbc #10                         ;
    jmp print10sDigit               ;

; ***************************************************************************************
;
; print a single digit 0-9 in the Y register
;
; On Entry:
;   Y is the digit 0-9 to print
;
; ***************************************************************************************
printY
    tax                             ;
    tya                             ;
    clc                             ;
    adc #$30                        ;
    jmp OSWRCH                      ;

; ***************************************************************************************
setVerticalDisplayedCharacters
    lda #23                         ;
    jsr OSWRCH                      ; VDU 23
    lda #0                          ;
    jsr OSWRCH                      ; VDU 0
    lda #6                          ;
    jsr OSWRCH                      ; VDU 6
    txa                             ;
    jsr OSWRCH                      ; VDU X

    lda #0                          ;
    ldx #0                          ;
-
    jsr OSWRCH                      ; VDU 0
    inx                             ;
    cpx #6                          ;
    bne -                           ; loop 6 times
    rts                             ;

; ***************************************************************************************
clearScreen
    lda #0                          ;
    ldx #3                          ; loop counter
-
    jsr setPalette                  ; set every colour black (A=0)
    dex                             ;
    bpl -                           ; if (not done four yet) then branch (loop back)

    ; clear memory from screenStartAddress to screenEndAddress
    lda #<screenStartAddress        ;
    sta injectAddressLow            ;
    lda #>screenStartAddress        ;
    sta injectAddressHigh           ;
    lda #0                          ;
    ldy #>(screenEndAddress - screenStartAddress)   ;
    ldx #<(screenEndAddress - screenStartAddress)   ; XY = length of area to clear
    beq +                           ;
-
    dex                             ;
injectAddressLow = * + 1
injectAddressHigh = * + 2
    sta $ffff,x                     ; clear screen
    bne -                           ;
    lda #<screenEndAddress          ;
    sta injectAddressLow            ;
    txa                             ;
    inc injectAddressHigh           ;
+
    dey                             ;
    bpl -                           ;

    ldx #20                             ; set 20 character rows
    jmp setVerticalDisplayedCharacters  ;

; ***************************************************************************************
level10Init
    lda #$e1                        ;
    sta levelFeature3               ;
    lda #2                          ;
    sta levelColourArray + 1        ;
    sta levelColourArray + 2        ;
    lda #3                          ;
    sta levelColourArray + 3        ;
    jmp levelInitContinued          ;

drawSwitches
    lda #31                         ; }
    jsr OSWRCH                      ; }
    lda #10                         ; }
    jsr OSWRCH                      ; } TAB(10,1)
    lda #1                          ; }
    jsr OSWRCH                      ; }

    lda #$f8                        ; VDU $f8
    jsr OSWRCH                      ;

    ; print 11 spaces
    ldx #0                          ;
    lda #$20                        ;
-
    inx                             ;
    jsr OSWRCH                      ;
    cpx #11                         ;
    bne -                           ;

    lda #$f8                        ; VDU $f8
    jsr OSWRCH                      ;
    jmp nonLevel10Init              ;

level13Init
    lda #$f5                        ;
    sta levelFeature1               ;
    lda #3                          ;
    sta levelColourArray + 1        ;
    jmp levelInitContinued          ;

; ***************************************************************************************
;
; set an entry in the palette
;
; On Entry:
;       X = logical colour to change
;       A = physical colour to use
;
; ***************************************************************************************
setPalette
    tay                             ;
    lda #19                         ;
    jsr OSWRCH                      ; VDU 19
    txa                             ;
    jsr OSWRCH                      ; VDU X
    tya                             ;
    ldy #4                          ;
-
    jsr OSWRCH                      ; VDU Y
    dey                             ;
    bne -                           ; loop four times
    rts                             ;

; ***************************************************************************************
readByteOffsetX
    lda $2c00,x                     ; read byte [high byte of address overwritten before use]
    rts                             ;

; ***************************************************************************************
initLevel
    jsr clearScreen                 ;
    lda #>levelDefinitions          ; } read data from $6c00 upwards
    sta readByteOffsetX + 2         ; }

    lda #$eb                        ;
    sta levelFeature3               ;

    lda currentLevel                ;
    cmp #10                         ;
    beq level10Init                 ;
    cmp #8                          ; }
    beq drawSwitches                ; } if (level 8 or 12) then branch (show switches)
    cmp #12                         ; }
    beq drawSwitches                ; }

nonLevel10Init
    lda #$eb                        ; }
    sta levelFeature3               ; }
    lda #3                          ; }
    sta levelColourArray + 2        ; } values for all levels except level 10 - The Endorian Forest
    lda #1                          ; }
    sta levelColourArray + 1        ; }
    lda #2                          ; }
    sta levelColourArray + 3        ; }

    lda currentLevel                ;
    cmp #13                         ;
    beq level13Init                 ;
    lda #$e2                        ;
    sta levelFeature1               ;

levelInitContinued
    ldx #0                          ;
    stx readByteOffsetX + 1         ;
    stx levelNumberCounter          ;

findLevelDataLoop
    jsr readByteOffsetX             ;
    inx                             ;
    cpx #0                          ;
    beq addToHighByte               ;
    cmp #$ff                        ;
    beq +                           ;
    jmp findLevelDataLoop           ;

addToHighByte
    inc readByteOffsetX + 2         ;
    jmp findLevelDataLoop           ;

+
    jsr readByteOffsetX             ;
    cmp #$ff                        ;
    bne findLevelDataLoop           ; if (not end of current level data) then branch (loop back)
    inc levelNumberCounter          ;
    lda levelNumberCounter          ; add one to level counter
    cmp currentLevel                ;
    bne findLevelDataLoop           ; if (not the level we are looking for) then branch (loop back)
    jmp foundLevelData              ;

; ***************************************************************************************
readLevelDataByte
    lda $2c00,x                     ;
    rts                             ;

; ***************************************************************************************
foundLevelData
    inx                             ; }
    stx readLevelDataByte + 1       ; } store address of start of level data
    lda readByteOffsetX + 2         ; }
    sta readLevelDataByte + 2       ; }

    ; the first two bytes of the level data contain 3 colours, stored in nybbles
    ldx #0                          ;
    jsr readLevelDataByte           ; read first byte of level data (colours)
    sta levelColours                ; store it
    inx                             ;
    jsr readLevelDataByte           ; read second byte of level data
    sta levelColours2               ; store it

    ; set palette to black
    lda #0                          ;
    ldx #0                          ;
-
    jsr setPalette                  ;
    inx                             ;
    cpx #4                          ;
    bne -                           ;

    ; next read header information (4 bytes) into $83-$86
    ldx #2                          ;
-
    jsr readLevelDataByte           ; read the next four bytes of level data
    sta $81,x                       ; store them at the level address
    inx                             ;
    cpx #6                          ;
    bne -                           ;

    ; $83 contains two sprite numbers to use, one in each nybble
    ;
    ;   top nybble is the floor sprite
    ; lower nybble is the crumble bar sprite
    ;
    lda $83                         ; top nybble contains sprite to copy
    and #$f0                        ;
    clc                             ;
    ror                             ;
    tax                             ;

    ; copy floor sprite from $0b00+X to $0c00 for 16 bytes
    ldy #0                          ;
-
    lda $0b00,x                     ;
    sta softCharacterDefinitions,y  ;
    inx                             ;
    iny                             ;
    cpy #16                         ;
    bne -                           ;

    lda $83                         ; lower nybble contains sprite to copy
    and #$0f                        ;
    clc                             ;
    rol                             ;
    rol                             ;
    rol                             ;
    tax                             ;

    ; copy crumble bar sprite from $0b80+X to $0c10 for 8 bytes
    ldy #0                          ;
-
    lda $0b80,x                     ;
    sta $0c10,y                     ;
    iny                             ;
    inx                             ;
    cpy #8                          ;
    bne -                           ;

    ;
    ; copy crumble bar seven times into the different crumbled states:
    ;
    ;       $0c19-$0c28
    ;       $0c22-$0c30
    ;       $0c2b-$0c38
    ;       $0c34-$0c40
    ;       $0c3d-$0c48
    ;       $0c46-$0c50
    ;       $0c4f-$0c58
    ;
    lda #1                          ;
    sta tempCounter                 ;
    lda #$18                        ;
    sta storeAddressLow             ;

tempLoop
    ldx #0                          ;
    ldy tempCounter                 ; loop counter

-
    lda $0c10,x                     ;
storeAddressLow = * + 1
    sta $0c18,y                     ;
    inx                             ;
    iny                             ;
    cpy #8                          ;
    bne -                           ;

    inc tempCounter                 ;
    lda storeAddressLow             ;
    clc                             ;
    adc #8                          ;
    sta storeAddressLow             ;
    lda tempCounter                 ;
    cmp #8                          ;
    bne tempLoop                    ;

    ; ($84) bottom three bits contain the conveyor sprite to use
    ;       this also determines the side walls sprite
    ;
    ; We transform abcdefgh -> fgh00bcd, but in practice bcd = 000 so -> fgh00000
    lda $84                         ;
    and #$7f                        ;
    asl                             ;
    asl                             ;
    asl                             ;
    asl                             ;
    asl                             ;
    tax                             ;

    ; copy conveyor sprite from $0ba0+X to $0c58 for 32 bytes
    ldy #0                          ;
-
    lda $0ba0,x                     ;
    sta $0c58,y                     ;
    inx                             ;
    iny                             ;
    cpy #$20                        ;
    bne -                           ;

    lda $85                         ;
    and #$f0                        ; get upper nybble
    clc                             ;
    ror                             ; divide by two
    tax                             ;

    ; copy side wall sprite from $0b40+X to $0c78 for 8 bytes
    ldy #0                          ;
-
    lda $0b40,x                     ;
    sta $0c78,y                     ;
    iny                             ;
    inx                             ;
    cpy #8                          ;
    bne -                           ;

    ; $85 holds the key sprite
    lda $85                         ;
    and #$0f                        ; get lower nybble
    asl                             ;
    asl                             ;
    asl                             ; multiply by eight
    tax                             ;

    ; copy key sprite from $0ab0+X to $0c80 for 8 bytes
    ldy #0                          ;
-
    lda $0ab0,x                     ;
    sta $0c80,y                     ;
    iny                             ;
    inx                             ;
    cpy #8                          ;
    bne -                           ;

    jsr getExitSprite               ;
    jmp drawLevel                   ;

getExitSprite
    ; $86 bottom 3 bits holds the exit sprite - top two bits are the type:
    ;
    ;   00 = 8x8 exit sprite repeated four times (lower 3 bits are sprite number)
    ;   10 = 8x16 exit sprite mirrored about the Y axis (lower 3 bits are sprite number)
    ;   01 = }
    ;   11 = } 16x16 exit sprite (lower 6 bits are the sprite number)
    ;
    lda $86                         ;
    and #$c0                        ; get top two bits
    beq getExit8x8                  ; if (neither bit set) then branch
    cmp #$80                        ;
    beq getExit8x16                 ; if (only top bit set) then branch

getExit16x16
    lda $86                         ;
    and #$3f                        ; get lower 6 bits
    clc                             ;
    rol                             ;
    rol                             ;
    rol                             ;
    rol                             ;
    rol                             ; multiply by 32
    tax                             ;
    ; copy from exitSprites2x2+X to $0c88 for 32 bytes
    ldy #0                          ;
-
    lda exitSprites2x2,x            ;
    sta $0c88,y                     ;
    inx                             ;
    iny                             ;
    cpy #32                         ;
    bne -                           ;
    rts                             ;

getExit8x8
    lda $86                         ;
    and #7                          ; get bottom three bits
    clc                             ;
    rol                             ;
    rol                             ;
    rol                             ; multiply by eight
    tax                             ;

    ; copy from $0980+X to $0c88 and $0c90 and $0c98 and $0ca0 for eight bytes
    ldy #0                          ;
-
    lda exitSprites1x1,x            ;
    sta $0c88,y                     ;
    sta $0c90,y                     ;
    sta $0c98,y                     ;
    sta $0ca0,y                     ;
    inx                             ;
    iny                             ;
    cpy #8                          ;
    bne -                           ;
    rts                             ;

getExit8x16
    lda #>exitSprites1x2            ;
    sta getExitSourceByte + 2       ;
    lda $86                         ;
    and #$3f                        ; get lower 6 bits
    clc                             ;
    rol                             ;
    rol                             ;
    rol                             ;
    rol                             ;
    clc                             ;
    adc #<exitSprites1x2            ;
    sta getExitSourceByte + 1       ;
    bcc +                           ;
    inc getExitSourceByte + 2       ;
+

    ; copy 16 bytes
    ldy #15                          ; loop counter
getExitSourceByte
    lda exitSprites1x2,y            ;
    sta $0c88,y                     ;
    dey                             ;
    bpl getExitSourceByte           ;

    ; reverse the left hand side of the exit to get the right hand side
    ldx #7                          ;
-
    lda $0c90,x                     ;
    sta $0c98,x                     ;
    jsr reverseBits                 ;
    sta $0ca0,x                     ;

    lda $0c88,x                     ;
    jsr reverseBits                 ;
    sta $0c90,x                     ;

    dex                             ;
    bpl -                           ;
    rts                             ;

; ***************************************************************************************
;
; Reverse the order of all bits in A
;
;  from https://sites.google.com/site/h2obsession/programming/6502
;
; ***************************************************************************************
reverseBits
    sta byteToReverse               ;
    lda #1                          ;
-
    lsr byteToReverse               ;
    rol                             ;
    bcc -                           ;
    rts                             ;

; ***************************************************************************************
drawExit
    ldx #7                          ;
    jsr readLevelDataByte           ;
    sta $70                         ;
    inx                             ; read level exit position (index 7 and 8 into level data)
    jsr readLevelDataByte           ;
    sta $71                         ;

    lda #31                         ;
    jsr OSWRCH                      ;
    lda $70                         ; TAB(exitX,exitY - 2)
    jsr OSWRCH                      ;
    lda $71                         ;
    sec                             ;
    sbc #2                          ;
    jsr OSWRCH                      ;

    ; Draw: f1,f2
    ;       f3,f4
    ldx #0                          ;
-
    lda exitMessage,x               ;
    jsr OSWRCH                      ;
    inx                             ;
    cpx #8                          ;
    bne -                           ;
    rts                             ;

setRoomColours
    lda #0                          ;
    jsr OSWRCH                      ;
    jsr drawInitialAirMeter         ;

;    lda #2                          ; COLOUR 2
;    jsr setTextColour               ;

    jsr updateAirAndCheckExit       ;
    jsr drawConveyor                ;
    jsr drawExit                    ;

    ldx #0                          ;
    lda levelColours                ;
    and #$0f                        ;
    jsr setPalette                  ; set palette from lower nybble

    lda levelColours                ;
    and #$f0                        ;
    lsr                             ;
    lsr                             ;
    lsr                             ;
    lsr                             ;
    ldx #1                          ;
    jsr setPalette                  ; set palette from upper nybble

    lda levelColours2               ;
    and #$0f                        ;
    ldx #2                          ;
    jsr setPalette                  ; set palette from second colour byte (lower nybble)
    ldx #3                          ;
    lda #3                          ;
    jmp setPalette                  ; set palette(3) = 3

; ***************************************************************************************
command255IncrementFeatureIndex
    stx levelDataOffset             ;
    lda levelFeatureIndex           ;
    cmp #5                          ;
    beq setRoomColours              ;
    inc levelFeatureIndex           ;
    jmp decodeLevelData             ;

; ***************************************************************************************
command253SetType
    inx                             ;
    jsr readLevelDataByte           ; read next byte
    sta levelFeatureIndex           ; store next byte
    stx $70                         ; record incremented index
    jmp decodeLevelData             ;

; ***************************************************************************************
command254Rectangle
    inx                             ;
    ldy #0                          ; loop counter
-
    jsr readLevelDataByte           ; }
    sta $0071,y                     ; }
    inx                             ; } read four level bytes and store them in $71,$72,$73,$74
    iny                             ; }
    cpy #4                          ; }
    bne -                           ; }

    dex                             ;
    stx levelDataOffset             ;

    jsr drawRectangularFeature      ;
    jmp decodeLevelData             ;

; ***************************************************************************************
drawRectangularFeature
    jsr commandDrawHorizontalStrip      ;
    inc $72                             ;
    lda $72                             ;
    cmp $74                             ;
    bne drawRectangularFeature          ;
    rts                                 ;

; ***************************************************************************************
drawLevel
    jsr drawSideWallsAndFloor           ;
    lda #8                              ;
    sta levelDataOffset                 ;
    lda #0                              ;
    sta levelFeatureIndex               ;

decodeLevelData
    inc levelDataOffset                 ;
    ldx levelDataOffset                 ;
    jsr readLevelDataByte               ; read next byte of data
    cmp #$ff                            ;
    beq command255IncrementFeatureIndex ; if (255) then branch
    cmp #$fe                            ;
    beq command254Rectangle             ; if (254) then branch
    cmp #$fd                            ;
    beq command253SetType               ; if (253) then branch

    ldy #0                              ;
    ldx levelDataOffset                 ;
-
    jsr readLevelDataByte               ;
    sta $0071,y                         ;
    iny                                 ; store next three bytes of level data into $71, $72, $73
    inx                                 ; these are X, Y, Length of a feature
    cpy #3                              ; (y_max value is unchanged)
    bne -                               ;
    dex                                 ;
    stx levelDataOffset                 ; remember incremented level data offset

    jsr commandDrawHorizontalStrip      ;
    jmp decodeLevelData                 ;

; ***************************************************************************************
setColourAndDrawLevel7Platform
    lda levelFeatureIndex               ;
    cmp #1                              ;
    bne setColourAndDrawPlatform        ;
    lda #2                              ; COLOUR 2
    jsr setTextColour                   ;
    jmp drawPlatform                    ;

; ***************************************************************************************
setColourAndDrawLevel14Platform
    lda levelFeatureIndex               ;
    cmp #0                              ;
    bne setColourAndDrawPlatform        ;

    lda #1                              ; COLOUR 1
    jsr setTextColour                   ;

    lda #31                             ;
    jsr OSWRCH                          ;
    lda $71                             ;
    clc                                 ;
    adc #5                              ;
    jsr OSWRCH                          ; TAB($71 + 5, $72 + 1)
    lda $72                             ;
    clc                                 ;
    adc #1                              ;
    jsr OSWRCH                          ;

    lda #$e0                            ;
    jsr OSWRCH                          ;
    lda #$e1                            ;
    jsr OSWRCH                          ;

    rts                                 ;

; ***************************************************************************************
commandDrawHorizontalStrip
    lda currentLevel                    ;
    cmp #7                              ;
    beq setColourAndDrawLevel7Platform  ;
    cmp #14                             ;
    beq setColourAndDrawLevel14Platform ;

setColourAndDrawPlatform
    ldx levelFeatureIndex               ;
    lda levelColourArray,x              ;
    jsr setTextColour                   ;

drawPlatform
    lda #31                             ;
    jsr OSWRCH                          ;
    lda $71                             ;
    clc                                 ;
    adc #5                              ;
    jsr OSWRCH                          ; TAB($71 + 5, $72 + 1)
    lda $72                             ;
    clc                                 ;
    adc #1                              ;
    jsr OSWRCH                          ;

    ldx levelFeatureIndex               ;
    lda levelFeatureArray,x             ;
    ldy #0                              ;
-
    jsr OSWRCH                          ;
    iny                                 ;
    cpy $73                             ;
    bne -                               ;
    lda levelFeatureIndex               ;
    cmp #3                              ;
    beq +                               ;
    rts                                 ;

+
    lda currentLevel                    ;
    cmp #10                             ;
    beq +                               ;
    lda #$f6                            ;
    sta levelFeature3                   ;

+
    jmp drawFooterTextOrReturn          ;

drawSideWallsAndFloor

    ; draw left edge wall
    lda #$ff                            ; }
    sta $71                             ; }
    lda #0                              ; } from (-1, 0)
    sta $72                             ; }

    lda #1                              ; }
    sta $73                             ; } width 1
    lda #16                             ; } to (-1, 16)
    sta $74                             ; }

    lda #2                              ;
    sta levelFeatureIndex               ;
    jsr drawRectangularFeature          ; draw

    ; draw right edge wall
    lda #30                             ; }
    sta $71                             ; }
    lda #0                              ; } from (30,0)
    sta $72                             ; }
                                        ; } (width 1 still)
    lda #16                             ; }
    sta $74                             ; } to (30, 16)
    jsr drawRectangularFeature          ; draw

    ; draw floor
    lda #0                              ;
    sta levelFeatureIndex               ;
    lda #0                              ; }
    sta $71                             ; }
    lda #15                             ; } at (0,15)
    sta $72                             ; }

    lda #30                             ; }
    sta $73                             ; } 30 is end X coordinate
    jsr commandDrawHorizontalStrip      ; [use JMP commandDrawHorizontalStrip to avoid needing the next RTS]
    rts                                 ;

; ***************************************************************************************
;
; called on vsync to update the audio
;
; ***************************************************************************************
mainInterruptRoutine
    txa                                 ; Remember X and Y registers
    pha                                 ;
    tya                                 ;
    pha                                 ;

    lda userVIAInterruptFlagRegister    ; What kind of interrupt?
    and #%11000000                      ; }
    cmp #%11000000                      ; } is it the User VIA Timer 1?
    beq +

    ; unknown interrupt - pass through
    pla                                 ; Restore X and Y registers
    tay                                 ;
    pla                                 ;
    tax                                 ;

    lda interruptAccumulator            ;
oldIrq1RoutineLow = * + 1
oldIrq1RoutineHigh = * + 2
    jmp $ffff                           ;

+
    ; handle system VIA Timer 1
;    ldy rasterArea                               ;
;    CPY #12                                     ;
;    BNE +                                       ;
;    LDX #.headerPalette - .startOfPalettes + 3  ; }
;    JSR .definePaletteAX                        ; } Set palette for header

;+
;    CPY #0                                      ;
;    BNE +                                       ;
;    LDX #.playAreaPalette - .startOfPalettes + 3; } Set palette for play area
;    JSR .definePaletteAX                        ; }

;+
;    CPY #6                                      ;
;    BNE +                                       ;

;    LDX #8                                      ; loop counter for delay
;-
;    DEX                                         ; delay so we set the palette at the right time
;    BNE -                                       ;
;    LDX #.footerPalette  - .startOfPalettes + 3 ; } Set palette for footer
;    JSR .definePaletteAX                        ; }
;+

    lda #$40                            ; clear User VIA timer 1 interrupt
    sta userVIAInterruptFlagRegister    ;

;    lda rasterArea                      ;
;    jsr debugChangePalette              ;

    inc rasterArea                      ;
    lda rasterArea                      ;

    cmp #2                              ;
    beq updateSound                     ;

    cmp #13                             ;
    bne handledInterrupt                ;
    inc clock                           ;
    lda #0                              ;
    sta rasterArea                      ;
    beq handledInterrupt                ; ALWAYS branch

; ***************************************************************************************
updateSound
    ; update music
    jsr updateMusic                     ;

    ; update sound effects
    lda channel2Frequency               ;
    cmp #$ff                            ;
    beq silenceChannel2                 ;
    lda vsyncCounter                    ;
    cmp #$ff                            ;
    beq silenceChannel2                 ;
    lda #$b0                            ;
    jsr soundDirect                     ; Set channel 2 maximum volume
    lda #$a0                            ;
    jsr soundDirect                     ; Set channel 2 frequency first byte
    lda channel2Frequency               ;
    jsr soundDirect                     ; Set channel 2 frequency second byte
    lda #$ff                            ;
    sta channel2Frequency               ;

handledInterrupt
    pla                                 ; Restore X and Y registers
    tay                                 ;
    pla                                 ;
    tax                                 ;
    lda interruptAccumulator            ;
    rti                                 ;

silenceChannel2
    lda #$bf                        ;
    jsr soundDirect                 ; set zero volume on channel 2
    jmp handledInterrupt            ;

; ***************************************************************************************
updateMusic
updateMusicOpcode = *
    inc vsyncCounter                ; This first instruction MUST be an INC (this byte is modified elsewhere)
    lda vsyncCounter                ;
    and #7                          ;
    beq updateChannel3              ; update channel 3
updateMusicVolume
    lda vsyncCounter                ;
    lsr
    clc                             ;
    adc #$93                        ;
    cmp #$9f                        ;
    bcc +                           ;
    lda #$9f                        ;
+
    jmp soundDirect                 ; Channel 3 volume

updateChannel3
    inc musicCounter                ;
    lda musicCounter                ;
    tax                             ;
    lda music,x                     ;
    cmp #$ff                        ;
    beq finishChannel3Notes         ; if (end of tune) then branch
    cmp previousNoteByte            ;
    beq updateMusicVolume           ; if (same as previous note) then branch
    sta previousNoteByte            ;
    tax                             ;
    lda #0                          ;
    sta vsyncCounter                ;
    lda soundFrequenciesFirst,x     ;
    jsr soundDirect                 ; Channel 3 frequency
    lda soundFrequenciesSecond,x    ;
    jsr soundDirect                 ; Channel 3 frequency
    jmp updateMusicVolume           ;

finishChannel3Notes
    lda #$ff                        ;
    sta musicCounter                ; end channel 3 notes
    sta vsyncCounter                ;
    sta previousNoteByte            ;
+
    rts                             ;


quietChannel3
    lda #$9f                        ;
    jmp soundDirect                 ; set zero volume on channel 3


; ***************************************************************************************
; send a byte to the sound chip (as seen in the advanced user guide)
soundDirect
    php                             ; remember if interrupts are enabled
    sei                             ;
    pha                             ; remember A

    stx saveX                       ;

    lda #151                        ;
    ldx #$43                        ; Data direction register A
    ldy #$ff                        ; Set all 8 bits as output
    jsr OSBYTE                      ; Write to SHEILA OSBYTE CALL

    ldx #$41                        ; Output register A
    pla                             ;
    tay                             ; Y holds byte to sound chip
    lda #151                        ; Write to SHEILA OSBYTE CALL
    jsr OSBYTE                      ; Output to slow data bus

    ldx #$40                        ; Output register B
    ldy #0                          ; Set sound chip write pin low
    jsr OSBYTE                      ;

    ldy #8                          ; Set sound chip write pin high
    jsr OSBYTE                      ;

    ldx saveX                       ;

    plp                             ; Restore interrupt enabled as needed
    rts                             ;

; ***************************************************************************************
playAttractLoop
    lda #1                          ;
    sta currentLevel                ; start attract loop on level 1 - Central Cavern

    lda #2                          ;
    sta lives                       ; start with 2 remaining lives (3 lives total)

    ; clear the score
    jsr zeroScore                   ;

attractLoop
    lda currentLevel                ;
    jsr showLevel                   ;
    lda #0                          ;
    sta attractModeTimer            ;
showALevelLoop
    jsr updateAirAndCheckExit       ;
    jsr drawConveyor                ;
    jsr animateKeysUpdateHorizontalGuardiansAndLevel19EnergyFields   ;
    jsr updateVerticalGuardians     ;

    ; wait for tick
-
    lda clock                       ;
    cmp #3                          ;
    bcc -                           ;
    lda #0                          ;
    sta clock                       ;

    inc attractModeTimer            ;
    lda attractModeTimer            ;
    cmp #$40                        ;
    beq showNextLevel               ;

    ldy #$ff                        ;
    ldx #$b6                        ;
    lda #$81                        ; check for RETURN
    jsr OSBYTE                      ;
    cpy #$ff                        ;
    beq +                           ;

    jmp showALevelLoop              ;

+
    jmp startGame                   ;

showNextLevel
    inc currentLevel                ;
    lda currentLevel                ;
    cmp #21                         ;
    beq endOfAttractLoop            ;
    jmp attractLoop                 ;

endOfAttractLoop
    jmp showTitleScreen            ;

; ***************************************************************************************
checkCheatCode
    lda $ed                         ;
    cmp #0                          ;
    bne resetCheatProgress          ; if (two keys pressed) then branch (reset progress)
    lda $ec                         ; read key pressed
    and #$7f                        ; remove top bit set
    cmp #0                          ;
    beq return2                     ; if (nothing pressed) then branch (return)
    ldx cheatCodeCounter            ;
    cmp cheatCode,x                 ;
    beq incrementCheatCode          ; if (next key in code pressed) then branch
    dex                             ;
    cmp cheatCode,x                 ;
    beq return2                     ; if (current key in code still pressed) then branch (return)

resetCheatProgress
    lda #0                          ;
    sta cheatCodeCounter            ;
    rts                             ;

incrementCheatCode
    inc cheatCodeCounter            ;
    lda cheatCodeCounter            ;
    cmp #cheatCodeEnd - cheatCode   ;
    beq toggleCheatMode             ;
    rts                             ;

toggleCheatMode
    lda cheatModeEnabled            ;
    eor #1                          ;
    sta cheatModeEnabled            ;

    lda #$03                        ; }
    ldx #$64                        ; }
    ldy #$03                        ; } SOUND
    jmp playSoundAXY                ; }

return2
    rts                             ;

; ***************************************************************************************
updateVerticalGuardiansAndJumpAndFallSounds
    jsr updateVerticalGuardians     ;
    lda isJumping                   ;
    cmp #1                          ;
    bne notInAir                    ; if (not in air) then branch
    lda jumpPhase                   ;
    cmp #1                          ;
    bne notInAir                    ;

    lda #$04                        ; }
    ldx #$64                        ; }
    ldy #$02                        ; } play jump sound
    jmp playSoundAXY                ; }

notInAir
    lda isJumping                   ;
    cmp #1                          ;
    beq return5                     ;
    lda willyIsOnGround             ;
    cmp #0                          ;
    bne return5                     ;

    lda #$ff                        ;
    sta oswordSoundBlock + 3        ;

    lda newPlayerPixelY             ; }
    sec                             ; }
    sbc playerHeightOnTakeOff       ; }
    eor #$7f                        ; } play descending falling sound
    tax                             ; }
    lda #$f1                        ; }
    ldy #1                          ; }
    jsr playSoundAXY                ; }

    lda #0                          ;
    sta oswordSoundBlock + 3        ;
return5
    rts                             ;

; ***************************************************************************************
showTitleScreen
    jsr clearScreen                 ;
    jsr zeroScore                   ;

    lda #3                          ;
    jsr setTextColour               ;

    jsr pauseMusic                  ;

    ; Show credits
    ldx #0                          ; loop counter
-
    lda creditsMessage,x            ;
    jsr OSWRCH                      ;
    inx                             ;
    cpx #creditsMessageEnd - creditsMessage ;
    bne -                           ;

    ; swap in the flowery logo
    jsr swapLogoWithC00             ;

    ; draw the flowery logo
    ldx #$80                        ; loop counter (and character to print)
-
    txa                             ;
    jsr OSWRCH                      ;
    inx                             ;
    cpx #$91                        ;
    bne -                           ;

    ; swap out the flowery logo
    jsr swapLogoWithC00             ;

    ; plot triangle logo
    ldx #$ff                        ;
plotLoop
    jsr getNextByte                 ;
    cmp #$ff                        ;
    beq finishPlot                  ;
    cmp #$fe                        ;
    beq gcol                        ;
    sta plotType                    ; PLOT type
    lda #0                          ;
    sta plotXHigh                   ;
    sta plotYHigh                   ;
    jsr getNextByte                 ; Y coordinate low (top 2 bits) and X low (top two bits)
    asl                             ;
    rol plotXHigh                   ;
    asl                             ;
    rol plotXHigh                   ;
    sta plotXLow                    ;
    jsr getNextByte                 ;
    asl                             ;
    rol plotYHigh                   ;
    asl                             ;
    rol plotYHigh                   ;
    sta plotYLow                    ;

    ; PLOT
    ldy #0                          ; loop counter
-
    lda plotMessageStart,y          ;
    jsr OSWRCH                      ;
    iny                             ;
    cpy #plotMessageEnd - plotMessageStart  ;
    bne -                           ;
    jmp plotLoop                    ;

; ***************************************************************************************
finishPlot
    lda #128                        ;
    jsr setTextColour               ;

    jmp showTitleScreenMessageAndWaitForRETURN  ;

; ***************************************************************************************
gcol
    lda #18                         ;
    jsr OSWRCH                      ;
    lda #0                          ; GCOL 0,next byte
    jsr OSWRCH                      ;
    jsr getNextByte                 ;
    jsr OSWRCH                      ;
    jmp plotLoop                    ;

; ***************************************************************************************
getNextByte
    inx                             ;
    lda penroseTriangle,x           ;
    rts                             ;

; ***************************************************************************************
swapLogoWithC00
    ldx #0                          ; loop counter
-
    lda manicMinerGraphic,x         ;
    tay                             ;
    lda softCharacterDefinitions,x  ;
    sta manicMinerGraphic,x         ;
    tya                             ; swap $700->$7ff with $0c00->$0cff
    sta softCharacterDefinitions,x  ;
    inx                             ;
    bne -                           ;
    rts                             ;

; ***************************************************************************************
zeroScore
    ; clear the score (6 digits in 3 BCD bytes)
    lda #0                          ;
    ldx #2                          ;
-
    sta score,x                     ;
    dex                             ;
    bpl -                           ;
    rts                             ;

; ***************************************************************************************
getLevelDataByte
    lda $2a28                           ; [address is overwritten before use]
    rts                                 ;

; ***************************************************************************************
level18Thing
    jsr drawFooterTextOrReturn          ;
    jmp afterLevel18Thing               ;

; ***************************************************************************************
decodeSingleItemData
    lda #0                                  ;
    sta keyPositionCounter                  ;
    lda #>(levelSingleItemDefinitions - 1)  ;
    sta getLevelDataByte + 2                ;
    lda currentLevel                        ;
    cmp #18                                 ;
    beq level18Thing                        ;
afterLevel18Thing
    lda #0                                  ;
    sta decodeLevelByte                     ;
    lda #<(levelSingleItemDefinitions - 1)  ;
    sta getLevelDataByte + 1                ;

skipToTerminator
    jsr incrementLevelDataPointer       ;
    jsr getLevelDataByte                ;
    cmp #$ff                            ; level separator
    beq +                               ;
    jmp skipToTerminator                ;
+
    inc decodeLevelByte                 ; increment level counter
    lda decodeLevelByte                 ;
    cmp currentLevel                    ;
    bne skipToTerminator                ; if (not current room) then branch back (find next level separator)

    jsr incrementLevelDataPointer       ;
    jsr getLevelDataByte                ;
    sta singleItemType                  ;
    lda singleItemType                  ;
    and #$3f                            ;
    sta singleItemSpriteOffset          ; singleItemSpriteOffset = bottom 6 bits
    lda singleItemType                  ;
    and #$c0                            ;
    clc                                 ;
    rol                                 ;
    rol                                 ;
    rol                                 ;
    sta singleItemType                  ;
    inc singleItemType                  ; singleItemType = (top two bits / 64) + 1
    lda #$f0                            ;
    sta singleItemSprite                ; singleItemSprite = $f0
    jsr setSingleOffsetX5               ; singleItemOffsetX = 5, type++
    ldx #0                              ;
    jmp decodeNextSingleItem            ;

; ***************************************************************************************
drawExtraSpikes
    lda currentLevel                    ;
    cmp #8                              ; }
    beq drawSpecialSpikes               ; } special thinner spikes on
    cmp #12                             ; } the ceiling of levels 8 and 12
    beq drawSpecialSpikes               ; }
    ldx #0                              ; swap characters back
    jmp swapPagesC00andA00              ;

; ***************************************************************************************
drawSpecialSpikes
    lda #3                              ; COLOUR 3
    jsr setTextColour                   ;

    lda #31                             ; }
    jsr OSWRCH                          ; }
    lda #6                              ; }
    jsr OSWRCH                          ; } TAB(6,1)
    lda #1                              ; }
    jsr OSWRCH                          ; }

    lda #$ec                            ; }
    jsr OSWRCH                          ; } VDU &EC (spike)

    lda #9                              ;
    ldx #0                              ; loop counter
-
    inx                                 ;
    jsr OSWRCH                          ; output seven forward spaces
    cpx #7                              ;
    bne -                               ;

    lda #$ec                            ; }
    jsr OSWRCH                          ; } VDU &EC (second spike)

    ldx #0                              ; swap characters back
    jmp swapPagesC00andA00              ;

; ***************************************************************************************
setSingleItemOffset15Command
    jsr setSingleItemOffset15           ;
    jmp decodeNextSingleItem            ;

; ***************************************************************************************
setSingleItemNextTypeCommand
    jsr setSingleOffsetX5               ;
    lda singleItemSprite                ;
    sec                                 ;
    adc singleItemSpriteOffset          ; add 1 + sprite offset to current sprite
    sta singleItemSprite                ;
    jmp decodeNextSingleItem            ;

; ***************************************************************************************
toggleAlternativeSingleItemSprite
    jsr setSingleOffsetX5               ; X offset 5, type++
    ldx #0                              ;
    jsr swapPagesC00andA00              ; swap pages
    lda #$eb                            ; regular single item character code
    sta singleItemSprite                ;
    jmp decodeNextSingleItem            ;

; ***************************************************************************************
decodeNextSingleItem
    jsr incrementLevelDataPointer       ;
    jsr getLevelDataByte                ;
    sta decodeLevelByte                 ;
    cmp #$ff                            ;
    beq drawExtraSpikes                 ; if (command 255) then branch (we are finished
                                        ; with this loop. Finally we draw the special
                                        ; spikes for level 8 and 12).
    cmp #$fe                            ;
    beq setSingleItemOffset15Command    ; if (command 254) then set X offset to 15
    cmp #$fd                            ;
    beq setSingleItemNextTypeCommand    ; if (command 253) then type += offset; set X offset to 5

    dec singleItemType                  ;

    lda decodeLevelByte                 ;
    and #$f0                            ; top nybble contains the X position
    clc                                 ;
    ror                                 ;
    ror                                 ;
    ror                                 ;
    ror                                 ;
    sta singleItemX                     ;
    lda decodeLevelByte                 ;
    and #$0f                            ; bottom nybble contains the Y position
    sta singleItemY                     ;

    lda #31                             ; TAB
    jsr OSWRCH                          ;

    lda singleItemX                     ;
    clc                                 ;
    adc singleItemOffsetX               ;
    jsr OSWRCH                          ; X pos

    lda singleItemY                     ;
    clc                                 ;
    adc #1                              ;
    jsr OSWRCH                          ; Y pos

    lda #2                              ; COLOUR 2
    jsr setTextColour                   ;

    lda singleItemSprite                ;
    cmp #$ee                            ;
    beq drawSpiderAndThread             ; if (spider) then branch
    cmp #$f0                            ;
    beq handleKey                       ; if (key) then branch
    cmp #$eb                            ;
    bne handleColour1SingleItem         ; if (colour 1 item) then branch
drawSingleItem
    lda singleItemSprite                    ;
    jsr OSWRCH                              ;
    lda singleItemType                      ;
    cmp #$ff                                ;
    beq toggleAlternativeSingleItemSprite   ;
    jmp decodeNextSingleItem                ;

; ***************************************************************************************
handleKey
    lda #3                          ; COLOUR 3
    jsr setTextColour               ;
    jmp recordKey                   ;

; ***************************************************************************************
handleColour1SingleItem
    lda #1                          ; COLOUR 1
    jsr setTextColour               ;
    jmp drawSingleItem              ;

; ***************************************************************************************
setSingleItemOffset15
    lda #$15                        ;
    sta singleItemOffsetX           ;
    rts                             ;

; ***************************************************************************************
setSingleOffsetX5
    lda #5                          ;
    sta singleItemOffsetX           ;
    rts                             ;

; ***************************************************************************************
swapPagesC00andA00
    lda softCharacterDefinitions,x  ;
    tay                             ;
    lda $0a00,x                     ;
    sta softCharacterDefinitions,x  ;
    tya                             ;
    sta $0a00,x                     ;
    inx                             ;
    cpx #$ff                        ;
    bne swapPagesC00andA00          ;
    rts                             ;

; ***************************************************************************************
incrementLevelDataPointer
    inc getLevelDataByte + 1        ;
    bne +                           ;
    inc getLevelDataByte + 2        ;
+
    rts                             ;

; ***************************************************************************************
drawSpiderAndThread
    jsr incrementLevelDataPointer   ;
    jsr getLevelDataByte            ;
    sta decodeLevelByte             ;

    ; draw line of vertical thread
    ldx #0                          ; loop counter
threadLoop
    cpx decodeLevelByte             ;
    beq drawSpider                  ; if (length of thread reached) then branch

    lda #$f5                        ; draw vertical thread
    jsr OSWRCH                      ;
    lda #$0a                        ; move down one character
    jsr OSWRCH                      ;
    lda #$08                        ;
    jsr OSWRCH                      ; and back one character
    inx                             ;
    jmp threadLoop                  ;

; ***************************************************************************************
drawSpider
    lda #$ee                        ; spider at end of thread
    jsr OSWRCH                      ;
    jmp decodeNextSingleItem        ;

; ***************************************************************************************
recordKey
    lda keyPositionCounter          ;
    cmp #5                          ; only store five keys (don't go beyond the end of the buffer)
    bcc +                           ;
    jmp drawSingleItem              ;

+
    lda singleItemX                 ;
    clc                             ;
    adc singleItemOffsetX           ;
    ldy keyPositionCounter          ;
    sta keyXPositions,y             ; store key position x
    lda singleItemY                 ;
    clc                             ;
    adc #1                          ;
    sta keyYPositions,y             ; store key position y
    inc keyPositionCounter          ;
    jmp drawSingleItem              ;

; ***************************************************************************************
colourCycleKeys
    ldx currentKeyIndex             ; }
    inx                             ; }
    cpx keyPositionCounter          ; } cycle between zero and the number of keys
    bcc +                           ; }
    ldx #0                          ; }
    stx currentKeyIndex             ; }

+
    stx currentKeyIndex             ;

    ; cycle around colours 0,1,2
    inc keyColourCounter            ;
    lda keyColourCounter            ;
    cmp #3                          ;
    bcc +                           ;
    lda #0                          ;
    sta keyColourCounter            ;
+

    lda keyGot,x                    ;
    bne return12                    ; if (got) then skip animating

    ; tab into to position
    lda keyXPositions,x             ;
    sta cursorX                     ;
    lda keyYPositions,x             ;
    sta cursorY                     ;

    ldx keyColourCounter            ;
    lda guardianColourMasks,x       ;
    sta plotColourMask              ;

    jsr setCursorScreenAddress          ;

    lda #<keySprite                     ;
    sta cellPlotSourceSpriteAddressLow  ;
    lda #>keySprite                     ;
    sta cellPlotSourceSpriteAddressHigh ;
    jmp cellPlot                        ;

; ***************************************************************************************
readRoomNameCharacter
    lda $ffff,x                     ;
return12
    rts                             ;

drawRoomName
    lda #<levelTitles               ;
    sta readRoomNameCharacter + 1   ;
    lda #>levelTitles               ;
    sta readRoomNameCharacter + 2   ;
    lda #0                          ;
    sta roomNumberReached           ;
    ldx #4                          ; TAB(4,17)
    ldy #17                         ;
    jsr setTextPos                  ;

    ; print 32 spaces
    lda #charSPACE                  ;
    ldx #0                          ;
-
    jsr OSWRCH                      ;
    inx                             ;
    cpx #$20                        ;
    bne -                           ;

    lda #3                          ; COLOUR 3
    jsr setTextColour               ;

    ; scan for next control character
    ldx #0                          ; loop counter
scanForControl
    jsr readRoomNameCharacter       ;
    cmp #charSPACE                  ;
    bcc foundControlCharacter       ;
-
    inx                             ;
    cpx #0                          ;
    bne scanForControl              ;
    inc readRoomNameCharacter + 2   ;
    jmp scanForControl              ;

foundControlCharacter
    inc roomNumberReached           ; }
    lda currentLevel                ; }
    cmp roomNumberReached           ; }
    bne -                           ; } if (room not reached) then branch back

    ; tab to room title area
    stx tempX                       ;
    ldx #4                          ; TAB (4, 17)
    ldy #17                         ;
    jsr setTextPos                  ;
    lda #131                        ; COLOUR 131
    jsr setTextColour               ;
    lda #0                          ; COLOUR 0
    jsr setTextColour               ;
    ldx #31                         ;
    lda #charSPACE                  ;
-
    JSR OSWRCH                      ;
    dex                             ;
    bpl -                           ;

    ; tab to correct position
    ldx tempX                       ;
    jsr readRoomNameCharacter       ; }
    clc                             ; }
    adc #4                          ; }
    tax                             ; } TAB(31, 4+char, 17)
    ldy #17                         ; }
    jsr setTextPos                  ; }

    ; print room title
    ldx tempX                       ;
-
    inx                             ;
    jsr readRoomNameCharacter       ; read next character
    cmp #charSPACE                  ;
    bcc +                           ; if (control character) then branch
    jsr OSWRCH                      ;
    jmp -
+
    lda #128                        ; COLOUR 128
    jsr setTextColour               ;
    lda #3                          ; COLOUR 3
    jmp setTextColour               ;

copySpikeSprites
    ldx #0                          ; loop counter
-
    lda spikePlant,x                ;
    sta $0cd8,x                     ; copy spike plant sprite to $0cd8
    inx                             ;
    cpx #8                          ;
    bne -                           ;

    lda singleItemSpriteOffset      ;
    asl                             ;
    asl                             ;
    asl                             ;
    tax                             ;

    ldy #0                          ; loop counter
-
    lda allOtherSpikes,x            ;
    sta $0ce0,y                     ; copy spike from allOtherSpikes+(8*singleItemSpriteOffset) to $0ce0
    inx                             ;
    iny                             ;
    cpy #8                          ;
    bne -                           ;

    ; clear array of 'key got' flags
    ldx #4                          ;
    lda #0                          ;
-
    sta keyGot,x                    ;
    dex                             ;
    bpl -                           ;


    lda keyPositionCounter          ;
    cmp #2                          ;
    beq +                           ; special case for handling one key only
    sta keysLeft                    ;
    rts                             ;

+
    lda #1                          ;
    sta keysLeft                    ;
    rts                             ;

readOrWriteByte
readOrWriteAddrLow = readOrWriteByte + 1
readOrWriteAddrHigh = readOrWriteByte + 2
    lda $ffff,x                     ;
    rts                             ;

; ***************************************************************************************
; This is the number of timer ticks per frame (num PAL scanlines * 62us/line)
; This timing is only true of non-interlaced modes.
; We have to subtract 2 because the latch reload costs 2us.
; This is not documented anywhere!
FramePeriod     = 312*62-2

; Calculate here the timer value to interrupt at the desired line
TimerValue      = 71*62 + 25

; This is the delay between interrupts (three character rows)
ShortTimerValue = 24*62 + 46

; ***************************************************************************************
initialize
    lda #$ff                                ;
    sta musicCounter                        ;
    sta vsyncCounter                        ;
    sta rasterArea                          ;
    sta channel2Frequency                   ;
    sta previousNoteByte                    ;
    jsr pauseMusic                          ;

    ; install irq code
    sei
    lda #$7F                                ; }
    sta userVIAInterruptEnableRegister      ; } Disable all interrupts

    lda irqv1                               ;
    sta oldIrq1RoutineLow                   ;
    lda irqv1 + 1                           ;
    sta oldIrq1RoutineHigh                  ;

    lda #<mainInterruptRoutine              ;
    sta irqv1                               ;
    lda #>mainInterruptRoutine              ;
    sta irqv1 + 1                           ;

    lda #$c0                                ; }
    sta userVIAInterruptEnableRegister      ; } Enable User VIA timer 1

    ; set User VIA T1 in free run mode (i.e. repeating)
    lda #$c0                                ; }
    sta userVIAAuxiliaryControlRegister     ; } Start User VIA T1 in free run mode


    ; write User VIA T1 low now (the timer will not be written until you write the high byte)
    lda #<TimerValue                        ;
    sta userVIATimer1CounterLow             ;
    ; get high byte ready so we can write it as quickly as possible at the right moment
    ldx #>TimerValue                        ;

    ; wait for VSync without having to catch it from its IRQ
    lda #2                                  ;
    sta systemVIAInterruptFlagRegister      ; clear VSync flag
-
    bit systemVIAInterruptFlagRegister      ;
    beq -                                   ; poll VSync flag

    stx userVIATimer1CounterHigh            ; start User VIA Timer 1 counting
    sta userVIAInterruptFlagRegister        ; clear VSync flag

    ; set timer to fire every frame (set latch)
    lda #<ShortTimerValue                   ;
    sta userVIATimer1LatchLow               ;
    lda #>ShortTimerValue                   ;
    sta userVIATimer1LatchHigh              ;
    lda #0                                  ;
    sta rasterArea                          ;
    cli                                     ;

    ; print VDU stream
    ldx #0                          ;
-
    lda crtcSetup,x                 ;
    cmp #$ff                        ;
    beq output8Zeros                ;
    jsr OSWRCH                      ;
backFrom8Zeros
    inx                             ;
    cpx #crtcSetupEnd - crtcSetup   ;
    bne -                           ;

    ; *FX 229,1 - ESCAPE generates ASCII code
    lda #229                        ;
    ldx #1                          ;
    ldy #0                          ;
    jsr OSBYTE                      ;

    ; VDU 26 - reset text and graphics windows
    lda #26                         ;
    jsr OSWRCH                      ;

    jmp showTitleScreen             ;

; ***************************************************************************************
output8Zeros
    ldy #8                          ;
    lda #0                          ;
zerosLoop
    jsr OSWRCH                      ;
    dey                             ;
    bne zerosLoop                   ;
    jmp backFrom8Zeros              ;

waitForRETURN
    ldy #$ff                    ;
    ldx #$b6                    ; -74 = RETURN
    lda #129                    ;
    jsr OSBYTE                  ;
    cpy #$ff                    ;
    beq waitForRETURN           ;
    rts                         ;

; ***************************************************************************************

startGame
    lda #1                                  ; set level 1 - Central Cavern
    jsr showLevel                           ;
    jsr updateMusicState                    ; pause / resume music
    lda #0                                  ;
    sta clock                               ;

playCurrentLevel
    lda tempScreenAddressLow                ; }
    sta plotScreenAddressLow                ; } restore screen plotting address
    lda tempScreenAddressHigh               ; }
    sta plotScreenAddressHigh               ; }

    jsr updatePlayer                        ;

    lda plotScreenAddressLow                ; }
    sta tempScreenAddressLow                ; } save screen plotting address
    lda plotScreenAddressHigh               ; }
    sta tempScreenAddressHigh               ; }

    jsr animateKeysUpdateHorizontalGuardiansAndLevel19EnergyFields  ;
    jsr checkForCollisions                                          ;
    jsr updateVerticalGuardiansAndJumpAndFallSounds                 ;

    ; wait for tick
-
    lda clock                               ;
    cmp #3
    bcc -                                   ;
    lda #0                                  ;
    sta clock                               ;

    ; read special keys (for sound on/off, pause, quit)
    ldy #$ff                                ;
    ldx #$a6                                ; DELETE
    lda #$81                                ;
    jsr OSBYTE                              ;
    cpy #$ff                                ;
    beq freezeGame                          ;

    ldy #$ff                                ;
    ldx #$8f                                ; ESCAPE
    lda #$81                                ;
    jsr OSBYTE                              ;
    cpy #$ff                                ;
    beq endGame                             ;

    ldy #$ff                                ;
    ldx #$ae                                ; S
    lda #$81                                ;
    jsr OSBYTE                              ;
    cpy #$ff                                ;
    beq musicOn                             ;

    ldy #$ff                                ;
    ldx #$ef                                ; Q
    lda #$81                                ;
    jsr OSBYTE                              ;
    cpy #$ff                                ;
    beq musicOff                            ;

    ; check for cheat mode enabled
checkForFunctionKeys
    lda cheatModeEnabled                    ;
    cmp #0                                  ;
    beq +                                   ; if (cheat mode not enabled) then branch

    ; read function keys
    lda #0                                  ;
    sta keyCounter                          ; zero loop counter
readKeysLoop
    ldy #$ff                                ;
    ldx keyCounter                          ;
    lda keysToRead,x                        ; get key to read
    tax                                     ;
    lda #$81                                ;
    jsr OSBYTE                              ;
    cpy #$ff                                ;
    beq functionKeyPressed                  ; if (function key pressed) then branch

    inc keyCounter                          ; increment counter
    lda keyCounter                          ;
    cmp #keysToReadEnd - keysToRead         ;
    bne readKeysLoop                        ;
+
    jmp playCurrentLevel                    ;

freezeGame
    jsr pauseMusic                          ;
waitForCOPYKey
    jsr checkCheatCode                      ;

    ldy #$ff                                ;
    ldx #$96                                ; COPY
    lda #$81                                ;
    jsr OSBYTE                              ;
    cpy #$ff                                ;
    bne waitForCOPYKey                      ;

    jsr updateMusicState                    ;
    jmp playCurrentLevel                    ;

endGame
    jmp showTitleScreen                     ;

musicOff
    lda #0                                  ;
    sta musicEnabled                        ;
    jsr pauseMusic                          ;
    jmp checkForFunctionKeys                ;

musicOn
    lda #1                                  ;
    sta musicEnabled                        ;
    jsr resumeMusic                         ;
    jmp checkForFunctionKeys                ;

showLevel
    jsr storeLevelNumber                    ; store level number
    lda #5                                  ;
    sta keysLeft                            ;

    lda #2                                  ; COLOUR 2
    jsr setTextColour                       ;

    lda currentLevel                        ;
    jsr initLevel                           ;
    jsr copyGuardianSprites                 ;
    jsr resetLevel19Meteors                 ;
    jmp initializeLevelSprites              ;

resumeMusic
    lda #$e6                                ; opcode for 'INC zp'
    sta updateMusicOpcode                   ; store INC opcode in the code that updates music
    rts                                     ;

pauseMusic
    lda #$60                                ; opcode for 'RTS'
    sta updateMusicOpcode                   ; store RTS opcode in the code that updates music
    lda #$9f                                ;
    jmp soundDirect                         ; silence sound channel 3

updateMusicState
    lda #$ff                                ;
    sta musicCounter                        ;
    sta vsyncCounter                        ;
    sta previousNoteByte                    ;
    lda musicEnabled                        ;
    beq pauseMusic                          ;
    jmp resumeMusic                         ;

functionKeyPressed
    ldy #$ff                                ;
    ldx #$ff                                ;
    lda #$81                                ; check for SHIFT key press
    jsr OSBYTE                              ;
    cpy #$ff                                ;
    beq shiftPressed                        ;

afterShiftHandled
    lda keyCounter                          ;
    cmp zeroBasedLevel                      ;
    beq +                                   ;
    sta zeroBasedLevel                      ;
    clc                                     ;
    adc #1                                  ;
    jsr showLevel                           ; change level
+
    jmp playCurrentLevel                    ;

shiftPressed
    lda keyCounter                          ;
    clc                                     ;
    adc #$0a                                ;
    sta keyCounter                          ; add 10 to the key counter
    jmp afterShiftHandled                   ;

; ***************************************************************************************
;
; On Entry:
;   A = current level (1 based)
;
; ***************************************************************************************
storeLevelNumber
    sta currentLevel                    ;
    sta zeroBasedLevel                  ;
    dec zeroBasedLevel                  ; make the level zero based

    lda cheatModeEnabled                ;
    cmp #0                              ;
    beq .return1                        ;

    lda currentLevel                    ;
    cmp #21                             ;
    bcc .return1                        ; if (current level < 21)
    lda #1                              ; set level 1 - Central Cavern
    sta currentLevel                    ;
    lda #0                              ; zero based level number is zero
.return1
    rts                                 ;

initializeLevelSprites
    ldx #0                          ;
-
    lda softCharacterDefinitions,x  ;
    sta $0cd0,x                     ;       copy eight bytes from $0c00 to $0cd0
    lda $0c78,x                     ;
    sta $0cb8,x                     ;       copy eight bytes from $0c78 to $0cb8
    lda $0c08,x                     ;
    sta $0ce8,x                     ;       copy eight bytes from $0c09 to $0ce8
    inx                             ;
    cpx #8                          ;
    bne -                           ;

    lda #0                          ;
    sta $0cd6                       ;
    sta $0cbe                       ;
    sta $0cee                       ;

    lda #$ff                        ;
    sta $0cd7                       ;
    sta $0cbf                       ;
    sta $0cef                       ;

    lda $70                         ; }
    sta exitPositionX               ; }
    lda $71                         ; } set exit position
    sta exitPositionY               ; }

    lda #$4c                        ; }
    sta doWeMoveEugene              ; } store opcode for 'JMP abs'

    lda #$f0                        ;
    sta eugeneColourMask            ;

    lda #16                         ;
    sta kongYCoordinate             ;

    ; draw regular Kong
    lda #$a9                        ; opcode for 'LDA #'
    sta drawRegularKong             ;

    lda #0                          ;
    sta kongBeastSwitchTriggered    ;
    sta isJumping                   ;

    lda #$27                        ;
    sta willySpriteAddressLow       ;

    lda #>willyLeft0                ; }
    sta willyGraphicsPage           ; } look left

    ; set player start position
    ldx currentLevel                ;
    lda playerStartPositions - 1,x  ;
    tax                             ;
    and #$f0                        ;
    lsr                             ;
    clc                             ;
    adc #$17                        ;
    sta playerPixelX                ; playerPixelX = 23 + (top nybble * 8)
    sta newPlayerPixelX             ;
    txa                             ;
    and #$0f                        ;
    asl                             ;
    asl                             ;
    asl                             ;
    sta playerPixelY                ; playerPixelY = (lower nybble * 8)
    sta newPlayerPixelY             ;
    sta willyHighestPointReachedOnCurrentJump ;

    ldx playerPixelX                ; if (start X < 64) then look right at start
    cpx #64                         ;
    bcc lookRight                   ;
    lda #3                          ; look left
afterLooking
    sta willyAnimationEOR           ;
    ldy playerPixelY                ;
    lda #1                          ;
    jsr readOrWriteCachedBackground ;
    lda willyGraphicsPage           ;
    sta willySpriteAddressHigh      ;

    lda conveyorX                   ;
    and #$80                        ;
    cmp #$80                        ;
    beq +                           ;

    lda #$ff                        ;
    sta conveyorDirection           ;
    jmp copySpikeSprites            ;

+
    lda #1                          ;
    sta conveyorDirection           ;
    jmp copySpikeSprites            ;

lookRight
    lda #$e7                        ;
    sta willySpriteAddressLow       ;
    lda #>willyRight0               ; }
    sta willyGraphicsPage           ; } look right
    lda #0                          ; }
    jmp afterLooking                ; }

; ***************************************************************************************
gotoNextLevel
    lda cheatModeEnabled            ;
    cmp #1                          ;
    beq +                           ; if (cheat mode enabled) then branch (reset same level)
    lda currentLevel                ;
    cmp #20                         ;
    beq startGameJumper2            ; if (current level is the last) then branch (start a new game)
    inc currentLevel                ;
+
    lda currentLevel                ;
    jsr showLevel                   ;
    jmp playCurrentLevel            ;

startGameJumper2
    jmp startGame                   ;

updateAirAndCheckExit
    jsr updateAir                   ;
    lda keysLeft                    ;
    beq checkExit                   ;
    rts                             ;

checkExit
    lda #34                         ;
    sta cursorX                     ;
    lda #23                         ; TAB(34, 23)
    sta cursorY                     ;

    jsr readTwoCharactersFromScreen ;
    lda currentLevel                ;
    cmp #5                          ;
    bne +                           ;

    ; level 5 - Eugene's Lair specific code
    lda eugenePositionY             ;
    ora #$80                        ; set top bit (ensure moving down)
    sta eugenePositionY             ;

    lda #$60                        ; store opcode for 'RTS'
    sta doWeMoveEugene              ;

    jsr toggleEugeneColour          ;

+
    lda newPlayerPixelX             ;
    lsr                             ;
    lsr                             ;
    cmp exitPositionX               ;
    bne notAtExit                   ;

    lda newPlayerPixelY             ;
    lsr                             ;
    lsr                             ;
    lsr                             ;
    clc                             ;
    adc #2                          ;
    cmp exitPositionY               ;
    bne notAtExit                   ;
    jmp reachedExit                 ;

notAtExit
    lda currentLevel                ;
    cmp #6                          ;
    bne updateFlashingExit          ;

    ; special code to handle level 6 - Processing Plant flashing exit
    lda playerPixelX                ;
    cmp #130                        ;
    bne updateFlashingExit          ;

    lda playerPixelY                ;
    cmp #13                         ;
    bne updateFlashingExit          ;
    jmp reachedExit                 ;

updateFlashingExit
    inc flashingExitCounter         ;
    lda flashingExitCounter         ;
    and #3                          ;
    cmp #0                          ;
    beq flashExit                   ;
    rts                             ;

flashExit
    lda flashingExitCounter         ;
    and #4                          ;
    cmp #4                          ;
    beq +                           ;
    lda #$f0                        ; plot colour 2
    jmp setColourAndShowExit
+
    lda #$ff                        ; plot colour 3
setColourAndShowExit
    sta plotColourMask              ;

    lda exitPositionX               ;
    sta cursorX                     ;
    lda exitPositionY               ;
    sec                             ; TAB(exitX, exitY-2)
    sbc #2                          ;
    sta cursorY                     ;

    lda #<exitSprite                    ;
    sta cellPlotSourceSpriteAddressLow  ;
    lda #>exitSprite                    ; use exit sprite
    sta cellPlotSourceSpriteAddressHigh ;

    jsr drawExitCell                ; top left
    inc cursorX                     ;
    jsr drawExitCell                ; top right
    inc cursorY                     ;
    dec cursorX                     ;
    jsr drawExitCell                ; bottom left
    inc cursorX                     ;
    jsr drawExitCell                ; bottom right

    rts                             ;

; ***************************************************************************************
drawExitCell
    jsr setCursorScreenAddress          ;
    jsr cellPlot                        ;
    lda cellPlotSourceSpriteAddressLow  ;
    clc                                 ;
    adc #8                              ;
    sta cellPlotSourceSpriteAddressLow  ;
    bcc +                               ;
    inc cellPlotSourceSpriteAddressHigh ;
+
    rts                                 ;
; ***************************************************************************************
reachedExit
    lda #$4c                        ;
    sta opcodeForJsrPlot            ; set opcode 'JMP abs'
    jsr updatePlayerWithAnimation   ;
    lda #$20                        ;
    sta opcodeForJsrPlot            ; set opcode 'JSR abs'
    jsr pauseMusic                  ;
    lda #0                          ;
    sta keyCounter                  ;
drainAirRemaining
    lda airRemaining                ;
    lsr                             ;
    clc                             ;
    adc #1                          ;
    eor #$3f                        ;
    sta channel2Frequency           ;
    jsr updateAir                   ;
    jsr updateAir                   ;
    inc keyCounter                  ;
    lda keyCounter                  ;
    and #3                          ;
    cmp #0                          ;
    beq addScoreAsAirDrains         ;
continueDrainingAir
    lda airRemaining                ;
    cmp #0                          ;
    bne drainAirRemaining           ;
    jsr updateMusicState            ;
    jmp gotoNextLevel               ;

addScoreAsAirDrains
    lda #1                          ;
    jsr addToScore                  ; add 2 to score
    jmp continueDrainingAir         ;

; ***************************************************************************************
drawInitialAirMeter
    lda #224                        ;
    sta airRemaining                ;
    lda #0                          ;
    sta airRemainingOffsetWithinCell;

    lda #3                          ; COLOUR 3
    jsr setTextColour               ;

    jsr showScoreAndResetVerticalGuardians  ;
    jsr decodeSingleItemData                ;

    ; show 'AIR' message
    ldx #0                          ; loop counter
-
    lda airMessage,x                ;
    jsr OSWRCH                      ;
    inx                             ;
    cpx #airMessageEnd - airMessage ;
    bne -                           ;

    rts                             ;

; ***************************************************************************************
storeByteY
    sta $ffff,y                     ;
    rts                             ;

; ***************************************************************************************
updateAir
    lda kongBeastSwitchTriggered    ;
    beq +                           ;
    jsr updateKongFalling           ;
+
    inc airRemainingDelayCounter    ;
    lda airRemainingDelayCounter    ;
    and #$07                        ;
    cmp #0                          ;
    beq loseAir                     ;
    rts                             ;

airStartAddress = $5d82

; ***************************************************************************************
loseAir
    lda airRemaining                    ;
    beq return14                        ;
    dec airRemaining                    ;

    ; draw a single vertical line to remove air from bar
    lda #0                              ;
    sta airScreenAddressHigh            ;
    lda airRemaining                    ; }
    and #$fc                            ; } cell X

    asl                                 ; }
    rol airScreenAddressHigh            ; }
    clc                                 ; }
    adc #<airStartAddress               ; }
    sta airScreenAddressLow             ; } start + cellX
    lda #>airStartAddress               ; }
    adc airScreenAddressHigh            ; }
    sta airScreenAddressHigh            ; }

    lda airRemaining                    ;
    and #3                              ; X offset within cell
    tax                                 ;

    lda airRemaining                    ;
    cmp #48                             ;
    bcc red                             ;
    lda byteMaskGreen, x                ;
    jmp writeAir                        ;
red
    lda byteMaskRed, x                  ;

writeAir
    ldy #0                              ;
-
    sta (airScreenAddressLow),y         ;
    iny                                 ;
    cpy #4                              ;
    bne -                               ;
return14
    rts                                 ;

; ***************************************************************************************
updateKongFalling
    lda kongYCoordinate             ;
    cmp #112                        ;
    bcs resetKongTriggered          ; if (kongY >= 112) then branch (reset trigger)
    cmp #16                         ;
    beq lowerKong                   ; if (kongY == 16) then branch
    and #4                          ;
    cmp #4                          ;
    beq YIsAMultipleOfFour          ;
    jsr isKongLow                   ;
    jsr checkKongHeight2            ;

    lda kongYCoordinate             ;
    clc                             ;
    adc #4                          ; lower kong
    sta kongYCoordinate             ;

    ldx #0                          ;
    jsr checkKongHeight             ;
    jmp setColour2AndShowExit       ;

YIsAMultipleOfFour
    jsr isKongLow                   ;
    jsr checkKongHeight             ;

    lda kongYCoordinate             ;
    clc                             ; lower kong
    adc #4                          ;
    sta kongYCoordinate             ;

    ldx #0                          ;
    jsr checkKongHeight2            ;
    jmp setColour2AndShowExit       ;

resetKongTriggered
    lda #0                          ;
    sta kongBeastSwitchTriggered    ;
    jmp setColour2AndShowExit       ;

lowerKong
    lda kongYCoordinate             ;
    clc                             ;
    adc #4                          ;
    sta kongYCoordinate             ;
    jmp checkKongHeight             ;

checkKongHeight2
    cpx #1                              ;
    beq kongIsLow                       ;
    lda #<verticalGuardianMODE1Address2 ; }
    sta plotSourceSpriteAddressLow      ; } $0480
    lda #>verticalGuardianMODE1Address2 ; }
    sta plotSourceSpriteAddressHigh     ; }
    jmp kongIsNotLow                    ;

checkKongHeight
    cpx #1                              ;
    beq kongIsLow                       ;

    lda #<verticalGuardianMODE1Address3 ; }
    sta plotSourceSpriteAddressLow      ; } $04c0
    lda #>verticalGuardianMODE1Address3 ; }
    sta plotSourceSpriteAddressHigh     ; }
    jmp kongIsNotLow                    ; [redundant]

kongIsNotLow
    lda #$39                        ;
    jsr addToScore                  ; add 40 to score
    ldx #78                         ;
    ldy kongYCoordinate             ;
    lda #1                          ;
    jmp plot                        ; draw Kong falling (mode 10)

kongIsLow
    lda #$69                        ;
    jsr addToScore                  ; add 70 to score
    ldx #78                         ;
    ldy kongYCoordinate             ;
    lda #2                          ;
    jmp plot                        ; erase Kong falling (mode 2)

setColour2AndShowExit
    lda #2                          ; COLOUR 2
    jmp setTextColour               ;

isKongLow
    lda kongYCoordinate             ;
    cmp #96                         ;
    bcs +                           ; if (kong low enough) then return 1
    ldx #0                          ;
    rts                             ;
+
    ldx #1                          ;
    rts                             ;

; ***************************************************************************************
;
; On Entry:
;   (A+1) is the BCD value of the score to add
;
; ***************************************************************************************
addToScore
    cmp #$63                        ; if score to add is 99 (BCD) then it's a key taken
    beq keyTaken                    ;

incrementScore
    clc                             ; }
    adc #1                          ; }
    sed                             ; }
    clc                             ; } add (A+1) to score (binary coded decimal)
    adc score                       ; }
    sta score                       ; }
    lda score + 1                   ; }
    adc #0                          ; }
    sta score + 1                   ; }
    lda score + 2                   ;
    bcs extraLife                   ; if (score passes each 10000 boundary) then branch (extra life)

printScoreAndLives
    cld
    lda #31                         ; }
    jsr OSWRCH                      ; }
    lda #10                         ; } TAB(10,20)
    jsr OSWRCH                      ; }
    lda #20                         ; }
    jsr OSWRCH                      ; }

    lda #3                          ; COLOUR 3
    jsr setTextColour               ;

    ; print three pairs of numbers for the score
    ldx #2                          ;
-
    lda score,x                     ;
    jsr printBCDNumber              ;
    dex                             ;
    cpx #$ff                        ;
    bne -                           ;

    ; move eight positions right
    lda #9                          ; forward space
    ldx #8                          ; loop eight times
-
    jsr OSWRCH                      ;
    dex                             ;
    bne -                           ;

    ; print lives
    lda lives                       ;
    jmp printBCDNumber              ;

extraLife
    adc #0                          ;
    sta score + 2                   ;
    cld                             ;

    lda #3                          ;
    ldx #100                        ;
    ldy #4                          ;
    jsr playSoundAXY                ; Play sound for extra life: SOUND
    inc lives                       ;
    jmp printScoreAndLives          ;

; ***************************************************************************************
;
; print two digits: 0-9 from the upper nybble, then 0-9 from the lower nybble
;
; ***************************************************************************************
printBCDNumber
    tay                             ;
    and #$f0                        ;
    lsr                             ;
    lsr                             ;
    lsr                             ;
    lsr                             ;
    clc                             ;
    adc #$30                        ;
    jsr OSWRCH                      ;
    tya                             ;
    and #$0f                        ;
    clc                             ;
    adc #$30                        ;
    jmp OSWRCH                      ;

; ***************************************************************************************
keyTaken
    lda #$02                        ; }
    ldx #$c8                        ; }
    ldy #$01                        ; } SOUND
    jsr playSoundAXY                ; }

    lda #$49                        ;
    jsr incrementScore              ; add 50 to score
    lda #$49                        ;
    jmp incrementScore              ; add 50 to score

; ***************************************************************************************
;
; A = Amplitude
; X = pitch
; Y = duration
;
; ***************************************************************************************
playSoundAXY
    sta oswordSoundBlock + 2        ;
    stx oswordSoundBlock + 4        ;
    sty oswordSoundBlock + 6        ;
    lda #7                          ;
    ldx #<oswordSoundBlock          ; SOUND
    ldy #>oswordSoundBlock          ;
    jmp OSWORD                      ;

; ***************************************************************************************
delayAndClearPedestalSprite
    sta $70                         ;
delayOuterLoop
    ldx #$ff                        ;
    ldy #$ff                        ;
-
    dex                             ;
    bne -                           ;
    dey                             ;
    bne -                           ;
    dec $70                         ;
    bne delayOuterLoop              ;

    ; clear pedestal sprite
    ldx #0                          ;
    txa                             ;
-
    sta softCharacterDefinitions,x  ;
    inx                             ;
    cpx #$40                        ;
    bne -                           ;
    rts                             ;

; ***************************************************************************************
death
    jsr pauseMusic                  ;

    lda #$01                        ; }
    ldx #$c8                        ; } Play death sound
    ldy #$01                        ; }
    jsr playSoundAXY                ; }

    ldx #$fd                        ;
    txs                             ; fix the stack pointer!!

    lda lives                       ;
    bne +                           ;
    jmp gameOver                    ; if (already zero lives left) then branch (game over)
+
    dec lives                       ;

    lda currentLevel                ;
    jsr showLevel                   ;
    jsr updateMusicState            ;
    jmp playCurrentLevel            ;

guardianSpriteCache
    * = * + 256

; ***************************************************************************************
;
; Like OSBYTE 135, this reads a character from the screen and returns it's ASCII code in X
; but this is tweaked to only check SPACE and the used defined characters 128-160
;
; ***************************************************************************************
readCharacter
    JSR readCharacterDefinitionMaskFromScreen           ; read from screen, making a one bit
                                                        ; mask of 8 bytes to match against
                                                        ; each character, in workspaceA-H

    ; check for a SPACE character first
    ldx #7                                              ; x=7
-
    lda characterFromScreen,x                           ; get byte in workspaceA-H copy
    bne checkUserDefinedCharacters                      ; if (not the same) then branch (to skip to next character)
    dex                                                 ; x--
    bpl -                                               ; if (still non-negative) then branch (back to loop eight times, to check each row of the character)
    ldx #charSPACE                                      ;
    rts                                                 ;

checkUserDefinedCharacters
    ldy #0                                              ; loop counter
    sty characterAddrLow                                ;
    lda #$0c                                            ;
    sta characterAddrHigh                               ;
readCharLoop
    ldx #7                                              ; x=7
-
    lda characterFromScreen,x                           ; get byte in workspaceA-H copy
characterAddrLow = * + 1
characterAddrHigh = * + 2
    cmp $ffff,x                                         ; check against character definition
    bne gotoNextCharacter                               ; if (not the same) then branch (to skip to next character)
    dex                                                 ; x--
    bpl -                                               ; if (still non-negative) then branch (back to loop eight times, to check each row of the character)
finishUp
    tya                                                 ; At this point the character matches
    ora #$80                                            ; Add 128 to the code returned
    tax                                                 ;
    rts                                                 ;

gotoNextCharacter
    iny                                                 ; no match on this character so increment to next character
    lda characterAddrLow                                ; }
    clc                                                 ; } Add 8 to address of character definition to move on to the next character
    adc #8                                              ; } Affects low byte only as we check one page of characters at a time
    sta characterAddrLow                                ; }
    bne readCharLoop                                    ; if (we have not reached the end of the page) then branch (back to check the character)

    cpy #32                                             ; check for end of page
    bne readCharLoop                                    ; if (not done with all characters) then branch (loop back)
    ldx #0                                              ; nothing found
    rts                                                 ;

; ***************************************************************************************
;
; Read character from screen pixels
;
; Reads 8x8 cell of pixels from the screen. This will be compared against each of the
; character definitions to determine which character is on screen.
;
; ***************************************************************************************
readCharacterDefinitionMaskFromScreen
    ; Set readCharScreenAddress = $3000 + cursorY*$280 + cursorX * 16
    ; get the row address
    ldx cursorY                         ;
    lda screenRowAddressLow,x           ;
    sta readCharScreenAddressLow        ;
    lda screenRowAddressHigh,x          ;
    sta readCharScreenAddressHigh       ;

    ; add 16 * cell X
    lda #0                              ;
    sta tempHigh                        ;
    lda cursorX                         ;
    asl                                 ; no need for a rol here, as X is too small
    asl                                 ;
    rol tempHigh                        ;
    asl                                 ;
    rol tempHigh                        ;
    asl                                 ;
    rol tempHigh                        ;
    clc
    adc readCharScreenAddressLow        ;
    sta readCharScreenAddressLow        ;
    lda readCharScreenAddressHigh       ;
    adc tempHigh                        ;
    sta readCharScreenAddressHigh       ;

    ldy #7                                              ; Y=7
setupPatternLoop
    sty tempLoopCounter                                 ; tempLoopCounter=Y (loop counter)
    lda #1                                              ; A=1
    sta tempByte                                        ; tempByte=A
--
    lda #$88                                            ; A=left colour mask
    sta tempMask                                        ; store in tempMask
    lda (readCharScreenAddressLow),Y                    ; get a byte from screen
;    eor vduBackgroundTextColour                         ; EOR with text background colour
    clc                                                 ; clear carry
-
    bit tempMask                                        ; and check bits of colour mask
    beq +                                               ; if (result = 0) then branch (this becomes a zero bit in our mask)
    sec                                                 ; set carry. This becomes a one bit in our mask
+
    rol tempByte                                        ; Rotate left and add the carry in the low bit
    bcs +                                               ; if (carry now set; bit 7 originally set) then branch (because we are done:
                                                        ;               the initial value of 1 has rotated through the 8 bits and into the carry)
    lsr tempMask                                        ; shift mask right one place for the next pixel
    bcc -                                               ; if (carry clear; nothing shifted off the left) then branch (loop back)
    tya                                                 ; }
    adc #7                                              ; } Y = Y + 8 (Carry is set, so adding 7 + carry = 8)
    tay                                                 ; }
    bcc --                                              ; if (no overflow from the add) then branch (loop back, move on to the next cell to read from)
+
    ldy tempLoopCounter                                 ; read modified values into Y and A
    lda tempByte                                        ;
    sta characterFromScreen,Y                           ; store copy
    dey                                                 ; and do it again
    bpl setupPatternLoop                                ; until 8 bytes copied
    rts                                                 ;

energyFieldSprites
    !byte %########
    !byte %.##..##.
    !byte %........
    !byte %..#..#..
    !byte %.#....#.
    !byte %..#..#..
    !byte %.#....#.
    !byte %..#..#..
    !byte %.#....#.
    !byte %..#..#..
    !byte %.#....#.
    !byte %..#..#..
    !byte %.#....#.
    !byte %........
    !byte %.##..##.
    !byte %########

    !byte %########
    !byte %.##..##.
    !byte %........
    !byte %.#....#.
    !byte %..#..#..
    !byte %.#....#.
    !byte %..#..#..
    !byte %.#....#.
    !byte %..#..#..
    !byte %.#....#.
    !byte %..#..#..
    !byte %.#....#.
    !byte %..#..#..
    !byte %........
    !byte %.##..##.
    !byte %########

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

meteorAndTailSprites
    !byte %........
    !byte %........
    !byte %..#...#.
    !byte %#..#...#
    !byte %.#..#.#.
    !byte %#..#...#
    !byte %.#..#.#.
    !byte %...#..#.

    !byte %........
    !byte %..#.....
    !byte %..#.#.#.
    !byte %.#..#.#.
    !byte %.#..#.#.
    !byte %.#.#...#
    !byte %..#...#.
    !byte %...#.#..

    !byte %.#..#...
    !byte %...###..
    !byte %..#.###.
    !byte %.#####.#
    !byte %.#.#.###
    !byte %.#####.#
    !byte %..##.##.
    !byte %...###..

    !byte %.#....#.
    !byte %..####..
    !byte %..##.##.
    !byte %.#.#####
    !byte %.#####.#
    !byte %.##.####
    !byte %..###.#.
    !byte %...###..

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %..#...#.
    !byte %#..#...#
    !byte %.#..#.#.

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %.#......

    !byte %#..#...#
    !byte %.#..#.#.
    !byte %...#..#.
    !byte %.#..#...
    !byte %...###..
    !byte %..#.###.
    !byte %.#####.#
    !byte %.#.#.###

    !byte %....#..#
    !byte %..#.....
    !byte %...#.#..
    !byte %.#......
    !byte %..#.#...
    !byte %......#.
    !byte %..#...#.
    !byte %.#.###.#

; ***************************************************************************************
;
; Later levels (9 and 11 upwards) can have up to four vertical guardians
;
; Guardian position data is packed into two bytes:
;
; <x coordinate>    x position in cells, top bit specifies initial direction, (clear = up, set = down)
; <y coordinates>   top nybble is the initial Y and also the second extent, bottom nybble is the first extent
;
; ***************************************************************************************
verticalGuardians
    !byte $00, $00, $00, $00, $00, $00, $00, $00    ; [UNUSED]
    !byte $85, $0d, $cb, $0d, $94, $0d, $d9, $0d    ; level 9 - Wacky Amoebatrons
    !byte $00, $00, $00, $00, $00, $00, $00, $00    ; [UNUSED]
    !byte $83, $4d, $8c, $07, $95, $6d, $da, $0d    ; level 11 - Attack of the Mutant Telephones
    !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff    ; level 12 - Return of the Alien Kong Beast
    !byte $85, $1d, $ff, $ff, $ff, $ff, $ff, $ff    ; level 13 - Ore Refinery
    !byte $c1, $09, $8b, $04, $d5, $07, $ff, $ff    ; level 14 - Skylab Landing Bay
    !byte $89, $4d, $8f, $5d, $d5, $4d, $ff, $ff    ; level 15 - The Bank
    !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff    ; level 16 - The Sixteenth Cavern
    !byte $83, $8d, $4a, $c0, $13, $80, $db, $0c    ; level 17 - The Warehouse
    !byte $c5, $1d, $8a, $1d, $d4, $1d, $99, $1d    ; level 18 - Amoebatrons' Revenge
    !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff    ; level 19 - The Meteor Storm
    !byte $82, $06, $da, $4d, $ff, $ff, $ff, $ff    ; level 20 - The Final Barrier

; ***************************************************************************************
cheatCode
    ; code: A <space> S,   E,   C,   R,   E,   T
    ;
    ; key codes as stored in memory address $ec (by the OS) when pressed, all with top bit set:
    ;     $C1, $E2, $D1, $A2, $D2, $B3, $A2, $A3
    ; stored here without top bit set:
    !byte $41, $62, $51, $22, $52, $33, $22, $23
cheatCodeEnd

; ***************************************************************************************
music
    ;     B2, C#3, D3, E3, F#3, D3, F#3,    E#3, C#3, E#3,    E3, B#2, E3
    !byte  0,   2,  3,  5,   7,  3,   7,7,    6,   2,   6,6,   5,   1,  5, 5
    ;     B2, C#3, D3, E3, F#3, D3, F#3,     B3,  A3, F#3,    D3, F#3, A3
    !byte  0,   2,  3,  5,   7,  3,   7,     12,  10,   7,     3,   7, 10, 10, 10, 10
    ;     B2, C#3, D3, E3, F#3, D3, F#3,    E#3, C#3, E#3,    E3, B#2, E3
    !byte  0,   2,  3,  5,   7,  3,   7,7,    6,   2,   6,6,   5,   1,  5, 5
    ;     B2, C#3, D3, E3, F#3, D3, F#3,     B3, F#3,  D3,   F#3,  B3, B2
    !byte  0,   2,  3,  5,   7,  3,   7,     12,   7,   3,     7,  12,  0, 0, 0, 0, $ff

soundFrequenciesFirst
    !byte $80 + 4           ; 0   1012  B2
    !byte $80 + 12          ; 1    956  C3 (=B#2)
    !byte $80 + 6           ; 2    902  C#3
    !byte $80 + 3           ; 3    851  D3
    !byte $80 + 4           ; 4    804  D#3
    !byte $80 + 6           ; 5    758  E3
    !byte $80 + 12          ; 6    716  F3 (=E#3)
    !byte $80 + 4           ; 7    676  F#3
    !byte $80 + 14          ; 8    638  G3
    !byte $80 + 10          ; 9    602  G#3
    !byte $80 + 8           ; 10   568  A3
    !byte $80 + 8           ; 11   536  A#3
    !byte $80 + 10          ; 12   506  B3

soundFrequenciesSecond
    !byte 63                ; 0   1012  B2
    !byte 59                ; 1    956  C3 (=B#2)
    !byte 56                ; 2    902  C#3
    !byte 53                ; 3    851  D3
    !byte 50                ; 4    804  D#3
    !byte 47                ; 5    758  E3
    !byte 44                ; 6    716  F3 (=E#3)
    !byte 42                ; 7    676  F#3
    !byte 39                ; 8    638  G3
    !byte 37                ; 9    602  G#3
    !byte 35                ; 10   568  A3
    !byte 33                ; 11   536  A#3
    !byte 31                ; 12   506  B3

; ***************************************************************************************
creditsMessage
    !byte 31, 19, 2                 ; TAB(19,2)
    !text "SOFTWARE PROJECTS"
    !byte 31, 23, 4                 ; TAB(23,4)
    !text "Presents"
    !byte 31, 19, 15                ; TAB(19,15)
    !text "ORIGINAL PROGRAM"
    !byte 31, 19, 17                ; TAB(19,17)
    !text "BY MATTHEW SMITH"
    !byte 18, 0, 130                ; GCOL 0,130
    !byte 24                        ; define graphics window
    !word 19 * 32                   ; left
    !word 19 * 32                   ; bottom
    !word 36 * 32 + 12              ; right
    !word (32-6)*32                 ; top
    !byte 16                        ; clear graphics area
    !byte 18, 0, 128                ; GCOL 0,128
    !byte 26                        ; reset text window
    !byte 17, 130                   ; COLOUR 130
    !byte 31, 26, 9                 ; TAB(26,9)
    !text "BY"
    !byte 31, 21, 11                ; TAB(21,11)
    !text "D.J.COATHUPE"
    !byte 31, 19, 7                 ; TAB(19,7)
creditsMessageEnd

; ***************************************************************************************
verticalGuardiansSpritesArray
    ; vertical guardians for the later levels
    ; Level     11,  12,  13,  14,  15,  16,  17,  18,  19,  20
    !byte $ea, $03, $00, $04, $05, $06, $00, $07, $09, $08, $04

; ***************************************************************************************
    ; vertical movements at each stage of a jump
jumpMovementArray
    !byte $04, $04, $03, $03, $02, $02, $01, $00, $00, $00, $ff, $fe, $fe, $fd, $fd, $fc, $fc

; ***************************************************************************************
guardianColourTable
    !byte $ff, $f0, $0f, $ff        ;

guardianSetForEachLevel
    ; level 1,   2,   3,   4,   5,   6,   7,  8,    9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20
    !byte $01, $02, $03, $04, $05, $06, $07, $08, $09, $0a, $0b, $08, $0c, $00, $0d, $0e, $0f, $09, $10, $01

meteorPositions
    !byte $64, $1b, $28, $a9, $16, $1d, $02, $58, $65, $57, $27, $d9, $aa, $1c, $15, $63

    ; A Penrose triangle as encoded PLOT statements
penroseTriangle
    !byte $FE, 1                        ; GCOL 0,1
    !byte $04, $12, $AC-6               ; MOVE
    !byte $04, $12, $B8-6               ; MOVE
    !byte $55, $78, $79-6               ; TRI
    !byte $55, $6C, $8B-6               ; TRI
    !byte $55, $78, $D3-6               ; TRI
    !byte $55, $6C, $CD-6               ; TRI
    !byte $FE, 2                        ; GCOL 0,2
    !byte $04, $78, $79-6               ; MOVE
    !byte $04, $83, $7F-6               ; MOVE
    !byte $55, $78, $D3-6               ; TRI
    !byte $55, $83, $E4-6               ; TRI
    !byte $55, $37, $B3-6               ; TRI
    !byte $55, $2D, $B8-6               ; TRI
    !byte $FE, 3                        ; GCOL 0,3
    !byte $04, $6C, $CC-6               ; MOVE
    !byte $05, $6C, $98-6               ; DRAW
    !byte $05, $2C, $B8-6               ; DRAW
    !byte $05, $83, $E4-6               ; DRAW
    !byte $05, $77, $EA-6               ; DRAW
    !byte $05, $12, $B8-6               ; DRAW
    !byte $05, $12, $AC-6               ; DRAW
    !byte $05, $78, $79-6               ; DRAW
    !byte $05, $83, $7F-6               ; DRAW
    !byte $05, $83, $E4-6               ; DRAW
    !byte $04, $78, $79-6               ; MOVE
    !byte $05, $78, $D3-6               ; DRAW
    !byte $05, $37, $B3-6               ; DRAW
    !byte $04, $6C, $99-6               ; MOVE
    !byte $05, $6C, $8B-6               ; DRAW
    !byte $05, $12, $B8-6               ; DRAW
    !byte $FF                           ; TERMINATOR



!if (* > $3280 ) {
    !error "Code too big by ", * - $3280, " bytes"
}
free2 = $3280 - *
    * = $3280                       ; start of visible screen
!pseudopc $6480 {



; ***************************************************************************************
toggleEugeneColour
    lda eugeneColourMask                ;
    eor #$0f                            ;
    sta eugeneColourMask                ;

    jsr updateVerticalGuardians         ;

    lda #$ff                            ;
    sta spriteColourMask                ;
    rts                                 ;

showScoreAndResetVerticalGuardians
    jsr showScoreLivesAndLevel          ;
    lda #$ff                            ;
    sta currentVerticalGuardians        ;
    rts                                 ;

checkForSwitchFlipped
    lda $332e                           ; screen address that becomes non-zero when the switch is flipped
    cmp #0                              ;
    bne switchFlipped                   ;
    rts                                 ;

switchFlipped
    lda currentLevel                    ;
    cmp #8                              ;
    beq level8SwitchFlipped             ;
    cmp #12                             ;
    bne +                               ;

    ; level 12 switch flipped - Return of the Alien Kong Beast
    lda #$47                            ;
    sta guardianPositions + 3           ;
+
    rts                                 ;

level8SwitchFlipped
    lda #$47                            ;
    sta guardianPositions + 7           ;
return6
    rts                                 ;

; ***************************************************************************************
updateAirEtc
    lda airRemaining                    ;
    cmp #0                              ;
    beq deathJumper5                    ; if (out of air) then branch (die)

    lda playerPixelY                    ;
    cmp willyHighestPointReachedOnCurrentJump ;
    bcs +                               ;
    sta willyHighestPointReachedOnCurrentJump ;
+
    lda playerPixelY                    ;
    and #7                              ;
    cmp #0                              ;
    beq +                               ;
    lda #0                              ;
    sta willyIsOnGround                 ;
+
    lda playerPixelY                    ;
    and #7                              ;
    cmp willyOffsetWithinCellY          ;
    bne setOffsetYWithinCell            ;
    cmp #0                              ;
    bne setOffsetYWithinCell            ;

    lda willyIsOnGround                 ;
    cmp #0                              ;
    bne setOffsetYWithinCell            ;

    ; land (or die if fallen too far)
    lda #$ff                            ;
    sta willyIsOnGround                 ;
    jsr updateAirAndCheckExit           ;
    jsr drawConveyor                    ;
    lda playerPixelY                    ;
    sec                                 ;
    sbc willyHighestPointReachedOnCurrentJump   ;
    cmp #$28                            ;
    bcc +                               ; if (fall is less than 40 pixels) then branch
    jmp death                           ;

+
    lda playerPixelY                            ;
    sta willyHighestPointReachedOnCurrentJump   ;

setOffsetYWithinCell
    lda playerPixelY                    ;
    and #7                              ;
    sta willyOffsetWithinCellY          ;
    rts                                 ;

; ***************************************************************************************
hitLevel20EnergyField
    jsr swapEnergyFieldSpritesWith0C00  ;
deathJumper5
    jmp death                           ;

; ***************************************************************************************
checkForDeath
    jsr updateAirEtc                    ;
    lda currentLevel                    ;
    cmp #20                             ;
    bne return6                         ;
    inc level20EnergyFieldsTimer        ;
    jsr swapEnergyFieldSpritesWith0C00  ;
    lda level20EnergyFieldsTimer        ;
    and #$10                            ;
    cmp #0                              ;
    beq toggleLevel20EnergyFields       ;

    ; check for collision
    lda $4f42                           ; read screen byte directly
    and #$80                            ;
    cmp #0                              ; top bit set indicates a collision
    bne hitLevel20EnergyField           ;

    lda $3942                           ; read screen byte directly
    and #$80                            ;
    cmp #0                              ; top bit set indicates a collision
    bne hitLevel20EnergyField           ;

    lda $394a                           ; read screen byte directly
    and #1                              ;
    cmp #0                              ; bottom bit set indicates a collision
    bne hitLevel20EnergyField           ;

    lda $4f4a                           ; read screen byte directly
    and #1                              ;
    cmp #0                              ; bottom bit set indicates a collision
    bne hitLevel20EnergyField           ;

    lda level20EnergyFieldsTimer        ;
    and #1                              ;
    cmp #0                              ;
    beq level20SwitchEnergyFieldSprite  ;
    lda #0                              ;
    sta energyFieldSpriteOffset         ;
drawLevel20EnergyFieldString
    ldx #0                              ;
-
    lda level20EnergyFieldsString,x     ;
    jsr OSWRCH                          ;
    inx                                 ;
    cpx #5                              ;
    beq +                               ;
backToLevel20EnergyFieldString
    cpx #8                              ;
    bne -                               ;
    jsr drawLevel20EnergyField          ;
    jmp swapEnergyFieldSpritesWith0C00  ;

+
    jsr drawLevel20EnergyField          ;
    jmp backToLevel20EnergyFieldString  ;

; ***************************************************************************************
drawLevel20EnergyField
    lda #$e0                            ;
    clc                                 ;
    adc energyFieldSpriteOffset         ;
    jsr OSWRCH                          ; draw first character of energy field
    tay                                 ;
    iny                                 ;
    lda #$0a                            ; move down
    jsr OSWRCH                          ;
    lda #8                              ; move left
    jsr OSWRCH                          ;
    tya                                 ;
    jmp OSWRCH                          ; draw second character of energy field

; ***************************************************************************************
level20SwitchEnergyFieldSprite
    lda #2                              ;
    sta energyFieldSpriteOffset         ;
    jmp drawLevel20EnergyFieldString    ;

; ***************************************************************************************
toggleLevel20EnergyFields
    lda #4                              ;
    sta energyFieldSpriteOffset         ;
    lda level20EnergyFieldsTimer        ;
    and #$0f                            ;
    cmp #0                              ;
    bne swapEnergyFieldSpritesWith0C00  ;
    jmp drawLevel20EnergyFieldString    ;

; ***************************************************************************************
swapEnergyFieldSpritesWith0C00
    ldx #$40                            ;
-
    lda softCharacterDefinitions,x      ;
    tay                                 ;
    lda energyFieldSprites,x            ;
    sta softCharacterDefinitions,x      ;
    tya                                 ;
    sta energyFieldSprites,x            ;
    dex                                 ;
    bne -                               ;
    rts                                 ;

; ***************************************************************************************
playerStartPositions
    ;level  1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20
    !byte $0e, $0e, $0e, $de, $04, $74, $0e, $0e, $0e, $05, $12, $0e, $ee, $8e, $0e, $4e, $04, $de, $0e, $0e

    ; ***********************************************************************************
!macro levelStrip .x, .y, .width {
    !byte .x, .y, .width
    }

!macro levelRect .x, .y, .width, .y_max {
    !byte $fe, .x, .y, .width, .y_max
}

!macro levelSetType .type {
    !byte $fd, .type
}

!macro levelIncrementType {
    !byte $ff
}

levelDefinitions
    ; ***********************************************************************************
    ; level 1 - Central Cavern
    !byte $ff, $ff, 16, 2, 0, 1, 0, 0, 1, 33, 16                ; header

    ; floors
    +levelStrip 4, 13, 15
    +levelStrip 27, 12, 3
    +levelStrip 28, 10, 2
    +levelStrip 0, 9, 4
    +levelStrip 0, 7, 3
    +levelStrip 0, 5, 14
    +levelStrip 17, 5, 1
    +levelStrip 22, 5, 8

    +levelIncrementType

    ; crumble floors
    +levelStrip 22, 12, 5
    +levelStrip 13, 5, 4
    +levelStrip 18, 5, 4

    +levelIncrementType

    ; walls
    +levelStrip 19, 12, 3
    +levelStrip 16, 8, 3

    +levelIncrementType

    ; conveyor
    +levelStrip 7, 9, 20

    ; ***********************************************************************************
    ; level 2 - The Cold Room
    !byte $ff, $ff, 84, 7, 0, 1, 1, 128, 2, 33, 16              ; header

    ; floors
    +levelStrip 13, 12, 4
    +levelStrip 8, 9, 7
    +levelStrip 0, 7, 1
    +levelStrip 0, 5, 19
    +levelStrip 20, 6, 4
    +levelStrip 23, 3, 1

    +levelIncrementType

    ; crumble floors
    +levelStrip 7, 13, 4
    +levelStrip 18, 10, 4
    +levelStrip 20, 3, 3
    +levelStrip 1, 7, 5
    +levelStrip 25, 6, 2
    +levelRect 25, 8, 2, 13

    +levelIncrementType

    ; walls
    +levelStrip 18, 0, 12
    +levelRect 24, 6, 1, 13
    +levelRect 27, 5, 1, 13

    +levelIncrementType

    ; conveyor
    +levelStrip 2, 11, 4

    ; ***********************************************************************************
    ; level 3 - The Menagerie
    !byte $ff, $ff, 100, 7, 17, 2, 16, 66, 0, 33, 14            ; header

    ; floors
    +levelStrip  4, 12,  6
    +levelStrip 20, 13, 10
    +levelStrip 13, 11,  5
    +levelStrip 24, 10,  6
    +levelStrip 26,  7,  4
    +levelStrip  0,  7,  6
    +levelStrip  0,  5,  4

    +levelIncrementType

    ; crumble floors
    +levelStrip  4,  5, 26

    +levelIncrementType

    ; walls
    +levelStrip 30, 0, 1

    +levelIncrementType

    ; conveyor
    +levelStrip 5, 9, 6

    ; ***********************************************************************************
    ; level 4 - Abandoned Uranium Workings
    !byte $ff, $ff, 32, 5, 0, 1, 0, 1, 0, 33, 4                 ; header

    ; floors
    +levelStrip  5, 12,  2
    +levelStrip  6,  8,  2
    +levelStrip  0,  5,  1
    +levelStrip  6,  5,  1
    +levelStrip 11, 11,  3
    +levelStrip 11,  6,  2
    +levelStrip 16,  5,  1
    +levelStrip 17, 13,  2
    +levelStrip 17,  9,  3
    +levelStrip 18,  3,  6
    +levelStrip 20,  6,  3
    +levelStrip 21, 11,  3
    +levelStrip 25,  8,  3
    +levelStrip 27, 12,  3
    +levelStrip 29, 10,  1
    +levelStrip 26,  4,  4

    +levelIncrementType

    ; crumble floors
    +levelStrip 0, 7, 3

    +levelIncrementType

    ; walls
    +levelStrip 14, 0, 16

    +levelIncrementType

    ; conveyor
    +levelStrip 0, 10, 3

    ; ***********************************************************************************
    ; level 5 - Eugene's Lair
    !byte $ff, $ff, 36, 7, 0, 1, 2, 128, 0, 19, 16              ; header

    ; floors
    +levelStrip 0, 13, 2
    +levelStrip 2, 11, 11
    +levelStrip 3, 9, 10
    +levelStrip 0, 5, 13
    +levelStrip 17, 11, 7
    +levelStrip 29, 11, 1
    +levelStrip 21, 5, 6
    +levelStrip 28, 6, 2

    +levelIncrementType

    ; crumble floors
    +levelStrip 0, 11, 2
    +levelStrip 17, 5, 4

    +levelIncrementType

    ; walls
    +levelStrip 7, 15, 16
    +levelStrip 13, 14, 10
    +levelStrip 13, 13, 4
    +levelRect 7, 12, 1, 16

    +levelIncrementType

    ; conveyor
    +levelStrip 17, 8, 10

    ; ***********************************************************************************
    ; level 6 - Processing Plant
    !byte $ff, $ff, 32, 6, 32, 1, 0, 129, 0, 33, 3              ; header

    ; floors
    +levelStrip 0, 9, 2
    +levelStrip 2, 6, 2
    +levelStrip 7, 5, 3
    +levelStrip 14, 5, 2
    +levelStrip 6, 10, 19
    +levelStrip 20, 5, 5
    +levelStrip 27, 12, 3
    +levelStrip 21, 13, 2
    +levelStrip 27, 6, 3
    +levelStrip 22, 8, 5

    +levelIncrementType

    ; crumble floors
    +levelStrip 29, 0, 1

    +levelIncrementType

    ; walls
    +levelRect 15, 6, 1, 8
    +levelRect 15, 10, 1, 13

    +levelIncrementType

    ; conveyor
    +levelStrip 2, 13, 4

    ; ***********************************************************************************
    ; level 7 - The Vat
    !byte $ff, $ff, 16, 2, 3, 2, 0, 2, 0, 19, 16                ; header

    ; floors
    +levelStrip 8, 13, 3
    +levelStrip 0, 10, 11
    +levelStrip 13, 9, 3
    +levelStrip 0, 8, 1
    +levelStrip 0, 6, 3
    +levelStrip 13, 5, 3
    +levelStrip 14, 3, 2

    +levelIncrementType

    ; crumble floors
    +levelRect 17, 3, 13, 13

    +levelIncrementType

    ; walls
    +levelRect 16, 3, 1, 13
    +levelStrip 13, 12, 4
    +levelRect 13, 13, 1, 16
    +levelStrip 13, 15, 17
    +levelStrip 13, 0, 17

    +levelIncrementType

    ; conveyor
    +levelStrip 6, 5, 5

    ; ***********************************************************************************
    ; level 8 - Miner Willy meets the Kong Beast
    !byte $ff, $ff, 16, 2, 0, 2, 3, 130, 0, 19, 16              ; header

    ; floors
    +levelStrip 3, 12, 2
    +levelStrip 3, 12, 2                                        ; [redundant]
    +levelStrip 0, 10, 1
    +levelStrip 1, 7, 3
    +levelStrip 0, 5, 3
    +levelStrip 8, 5, 6
    +levelStrip 14, 2, 2
    +levelStrip 8, 11, 2
    +levelStrip 11, 10, 3
    +levelStrip 7, 8, 3
    +levelStrip 17, 5, 2
    +levelStrip 20, 6, 4
    +levelStrip 17, 9, 5
    +levelStrip 17, 13, 2
    +levelStrip 21, 12, 5
    +levelStrip 26, 10, 4
    +levelStrip 26, 7, 1
    +levelStrip 29, 6, 1
    +levelStrip 28, 2, 2

    +levelIncrementType

    ; crumble floors
    +levelStrip 16, 14, 1

    +levelIncrementType

    ; walls
    +levelRect 16, 0, 1, 15
    +levelRect 19, 0, 1, 2
    +levelRect 13, 13, 1, 15

    +levelIncrementType

    ; conveyor
    +levelStrip 10, 13, 3

    ; ***********************************************************************************
    ; level 9 - Wacky Amoebatrons
    !byte $ff, $ff, 16, 2, 0, 2, 0, 131, 0, 5, 3                ; header

    ; floors
    +levelStrip 2, 12, 26
    +levelStrip 2, 8, 8
    +levelStrip 0, 5, 28
    +levelStrip 0, 10, 2
    +levelStrip 28, 13, 2
    +levelStrip 28, 7, 2
    +levelStrip 21, 9, 7

    +levelIncrementType

    ; crumble floors
    +levelStrip 2, 0, 1

    +levelIncrementType

    ; walls
    +levelRect 2, 0, 1, 1

    +levelIncrementType

    ; conveyor
    +levelStrip 12, 8, 7

    +levelSetType 4

    ; clear
    +levelRect 4, 4, 2, 14
    +levelRect 10, 4, 2, 14
    +levelRect 19, 4, 2, 14
    +levelRect 24, 4, 2, 14

    +levelSetType 3                 ; back to conveyor [needed to terminate properly?]

    ; ***********************************************************************************
    ; level 10 - The Endorian Forest
    !byte $ff, $ff, 32, 1, 50, 1, 52, 67, 0, 17, 16             ; header

    ; floors
    +levelStrip 0, 13, 3
    +levelStrip 0, 10, 4
    +levelStrip 0, 8, 5
    +levelStrip 0, 6, 4
    +levelStrip 0, 2, 6
    +levelStrip 12, 0, 3
    +levelStrip 7, 5, 1
    +levelStrip 8, 9, 7
    +levelStrip 16, 10, 7
    +levelStrip 16, 7, 7
    +levelStrip 16, 4, 4
    +levelStrip 20, 0, 10
    +levelStrip 26, 2, 4
    +levelStrip 22, 5, 8
    +levelStrip 28, 9, 2
    +levelStrip 27, 13, 3

    +levelIncrementType

    ; crumble floors
    +levelStrip 4, 10, 2
    +levelStrip 8, 5, 7
    +levelStrip 23, 7, 3
    +levelStrip 23, 11, 3

    +levelIncrementType

    ; walls
    +levelRect 15, 0, 1, 12

    +levelIncrementType

    ; conveyor
    +levelStrip 0, 15, 30
    +levelStrip 7, 12, 10

    ; ***********************************************************************************
    ; level 11 - Attack of the Mutant Telephones
    !byte $ff, $ff, 100, 7, 0, 0, 118, 128, 0, 5, 4             ; header

    ; floors
    +levelStrip 0, 3, 4
    +levelStrip 4, 5, 6
    +levelStrip 0, 8, 2
    +levelStrip 0, 13, 2
    +levelStrip 27, 12, 3
    +levelStrip 22, 13, 3
    +levelStrip 27, 10, 1
    +levelStrip 28, 8, 2
    +levelStrip 28, 6, 2
    +levelStrip 10, 9, 9
    +levelStrip 14, 5, 10
    +levelStrip 8, 11, 1

    +levelIncrementType

    ; crumble floors
    +levelStrip 5, 11, 3

    +levelIncrementType

    ; walls
    +levelStrip 0, 0, 5

    +levelIncrementType

    ; conveyor
    +levelStrip 4, 8, 2

    ; ***********************************************************************************
    ; level 12 - Return of the Alien Kong Beast
    !byte $ff, $ff, 80, 6, 0, 2, 3, 132, 0, 19, 16              ; header

    ; floors
    +levelStrip 10, 13, 3
    +levelStrip 0, 12, 6
    +levelStrip 5, 10, 1
    +levelStrip 5, 7, 2
    +levelStrip 2, 8, 1
    +levelStrip 0, 5, 3
    +levelStrip 9, 9, 4
    +levelStrip 17, 10, 3
    +levelStrip 24, 11, 2
    +levelStrip 24, 8, 6
    +levelStrip 29, 6, 1
    +levelStrip 23, 5, 2

    +levelIncrementType

    ; crumble floors
    +levelStrip 17, 5, 6
    +levelStrip 8, 5, 5
    +levelStrip 14, 2, 2

    +levelIncrementType

    ; walls
    +levelStrip 16, 0, 1
    +levelStrip 20, 0, 1
    +levelRect 16, 5, 1, 15
    +levelRect 13, 5, 1, 10
    +levelRect 13, 13, 1, 15
    +levelStrip 13, 15, 4

    +levelIncrementType

    ; conveyor
    +levelStrip 17, 13, 11

    ; ***********************************************************************************
    ; level 13 - Ore Refinery
    !byte $ff, $ff, 32, 7, 80, 2, 5, 64, 0, 5, 16               ; header

    ; floors
    +levelStrip 0, 15, 30
    +levelStrip 6, 3, 24
    +levelStrip 6, 6, 24
    +levelStrip 6, 12, 24
    +levelStrip 6, 9, 24

    +levelIncrementType

    ; crumble floors
    +levelRect 2, 1, 1, 15

    +levelIncrementType

    ; walls
    +levelStrip 0, 0, 30

    +levelIncrementType

    ; conveyor
    +levelStrip 2, 15, 26

    +levelSetType 4

    +levelStrip 8, 6, 2
    +levelStrip 9, 12, 2
    +levelStrip 21, 6, 2
    +levelStrip 20, 12, 2
    +levelStrip 14, 6, 2
    +levelStrip 14, 12, 2
    +levelStrip 16, 9, 2
    +levelStrip 27, 6, 2
    +levelStrip 26, 12, 2
    +levelStrip 11, 9, 2
    +levelStrip 24, 9, 2
    +levelStrip 24, 3, 2

    +levelSetType 4

    ; ***********************************************************************************
    ; level 14 - Skylab Landing Bay
    !byte $ff, $ff, 36, 5, 96, 2, 39, 133, 0, 19, 3             ; header

    ; floors
    +levelStrip 0, 11, 0
    +levelStrip 2, 6, 0
    +levelStrip 4, 9, 0
    +levelStrip 6, 13, 0
    +levelStrip 6, 7, 0
    +levelStrip 8, 11, 0
    +levelStrip 12, 9, 0
    +levelStrip 10, 6, 0
    +levelStrip 14, 5, 0
    +levelStrip 18, 6, 0
    +levelStrip 22, 7, 0
    +levelStrip 20, 9, 0
    +levelStrip 26, 6, 0
    +levelStrip 28, 9, 0
    +levelStrip 24, 11, 0

    +levelSetType 2

    ; wall
    +levelStrip 0, 15, 30

    +levelIncrementType

    ; conveyor
    +levelStrip 14, 11, 6

    ; ***********************************************************************************
    ; level 15 - The Bank
    !byte $ff, $ff, 32, 6, 0, 0, 120, 65, 0, 5, 6               ; header

    ; floors
    +levelStrip 0, 10, 2
    +levelStrip 2, 8, 2
    +levelStrip 0, 5, 5
    +levelStrip 4, 12, 3
    +levelStrip 11, 13, 2
    +levelStrip 11, 10, 2
    +levelStrip 11, 7, 2
    +levelStrip 17, 11, 2
    +levelStrip 17, 8, 2
    +levelStrip 23, 6, 2
    +levelStrip 24, 9, 2
    +levelStrip 22, 12, 2
    +levelStrip 23, 3, 5

    +levelIncrementType

    ; crumble floors
    +levelStrip 6, 7, 1

    +levelIncrementType

    ; wall
    +levelStrip 5, 0, 25

    +levelIncrementType

    ; conveyor
    +levelStrip 7, 3, 16

    +levelRect 28, 1, 2, 15
    +levelStrip 7, 3, 16

    ; ***********************************************************************************
    ; level 16 - The Sixteenth Cavern
    !byte $ff, $ff, 16, 6, 0, 2, 9, 134, 0, 16, 8               ; header

    ; floors
    +levelStrip  0, 12, 9
    +levelStrip 11, 11, 2
    +levelStrip 0, 5, 1
    +levelStrip 5, 5, 1
    +levelStrip 3, 7, 1
    +levelStrip 20, 13, 1
    +levelStrip 26, 13, 1
    +levelStrip 26, 11, 1
    +levelStrip 25, 7, 5
    +levelStrip 22, 5, 3

    +levelIncrementType

    ; crumble floors
    +levelStrip 0, 9, 2

    +levelIncrementType

    ; wall
    +levelStrip 9, 11, 2
    +levelRect 10, 5, 1, 9
    +levelStrip 13, 5, 1
    +levelStrip 13, 6, 2
    +levelStrip 13, 7, 3
    +levelStrip 13, 8, 4

    +levelIncrementType

    ; conveyor
    +levelStrip 2, 9, 25

    ; ***********************************************************************************
    ; level 17 - The Warehouse
    !byte $ff, $ff, 32, 6, 3, 1, 80, 135, 0, 33, 4              ; header

    ; floors
    +levelStrip 26, 14, 4
    +levelStrip 28, 5, 2
    +levelStrip 0, 5, 2
    +levelStrip 0, 15, 30

    +levelIncrementType

    ; crumble floors
    +levelStrip 2, 5, 26
    +levelRect 0, 6, 30, 13

    +levelIncrementType

    ; wall
    +levelStrip 28, 0, 2

    +levelIncrementType

    ; conveyor
    !byte 13, 8, 5

    +levelSetType 4

    ; empty
    +levelRect 2, 8, 2, 13
    +levelRect 9, 5, 2, 13
    +levelRect 18, 5, 2, 10
    +levelRect 26, 5, 2, 13

    +levelSetType 4

    ; ***********************************************************************************
    ; level 18 - Amoebatrons' Revenge
    !byte $ff, $ff, 16, 6, 0, 0, 64, 136, 0, 33, 3              ; header

    ;  floors
    +levelStrip 0, 15, 30
    +levelStrip 0, 13, 2
    +levelStrip 2, 12, 26
    +levelStrip 2, 9, 7
    +levelStrip 0, 7, 2
    +levelStrip 2, 5, 28
    +levelStrip 10, 8, 18
    +levelStrip 28, 10, 2

    +levelSetType 2

    ; wall
    +levelStrip 27, 0, 1

    +levelSetType 4

    ; empty
    +levelRect 4, 5, 2, 13
    +levelRect 9, 5, 2, 13
    +levelRect 19, 5, 2, 13
    +levelRect 24, 5, 2, 13

    +levelSetType 4

    ; ***********************************************************************************
    ; level 19 - The Meteor Storm
    !byte $ff, $ff, 36, 7, 0, 1, 0, 137, 0, 19, 7               ; header

    ; floors
    +levelStrip 0, 5, 2
    +levelStrip 2, 8, 3
    +levelStrip 8, 13, 14
    +levelStrip 5, 6, 3
    +levelStrip 7, 10, 4
    +levelStrip 23, 11, 2
    +levelStrip 22, 7, 2
    +levelStrip 26, 5, 4
    +levelStrip 27, 9, 3

    +levelIncrementType

    +levelSetType 2

    ; wall
    +levelRect 10, 3, 10, 11

    +levelIncrementType

    ; conveyor
    +levelStrip 2, 12, 3

    +levelIncrementType

    ; empty
    +levelRect 10, 4, 10, 6
    +levelRect 10, 8, 10, 10

    +levelSetType 3

    ; ***********************************************************************************
    ; level 20 - The Final Barrier
    !byte $ff, $ff, 32, 6, 0, 1, 0, 138, 1, 33, 4               ; header

    ; floors
    +levelStrip 7, 5, 7
    +levelStrip 13, 3, 7
    +levelStrip 0, 8, 2
    +levelStrip 8, 7, 7
    +levelStrip 27, 7, 3
    +levelStrip 16, 7, 4
    +levelStrip 19, 13, 1
    +levelStrip 16, 12, 1
    +levelStrip 22, 13, 1
    +levelStrip 24, 9, 1

    +levelIncrementType

    ; crumble floors
    +levelStrip 0, 9, 1
    +levelStrip 20, 3, 3
    +levelStrip 20, 10, 1
    +levelStrip 23, 13, 2

    +levelIncrementType

    ; wall
    +levelStrip 12, 0, 18
    +levelStrip 23, 3, 5
    +levelStrip 3, 7, 5
    +levelStrip 0, 11, 2
    +levelStrip 0, 12, 11
    +levelStrip 13, 14, 3
    +levelStrip 14, 13, 2
    +levelStrip 15, 12, 1
    +levelRect 15, 7, 1, 10
    +levelStrip 10, 11, 1

    +levelIncrementType

    ; conveyor
    +levelStrip 2, 11, 8
    +levelRect 28, 3, 2, 7
    +levelStrip 2, 11, 8

    ; ***********************************************************************************
    ; terminator
    !byte $ff, $ff, $ff

!if * > $6ba0 {
    !error "space is wrong, ", *
}
free3 = $6ba0 - *
    ; ***********************************************************************************
* = $6ba0
backgroundCache
* = * + 16 * 6

; ***************************************************************************************
gameOver
    ; clear screen
    lda #>screenStartAddress        ;
    sta $71                         ;
    lda #<screenStartAddress        ; ($70,$71) = $3280
    sta $70                         ;

    ldx #41                         ;
    ldy #0                          ;
    tya                             ;
clearScreenLoop
    sta ($70),y                     ;
    iny                             ;
    bne clearScreenLoop             ;

    inc $71                         ;
    dex                             ;
    bne clearScreenLoop             ;

    jsr drawRoomName                ;

    ; copy 32 bytes (4 characters worth) into drawable region at softCharacterDefinitions
    ldx #0                          ; loop counter
-
    lda pedestalSprite,x            ;
    sta softCharacterDefinitions,x  ;
    inx                             ;
    cpx #$40                        ;
    bne -                           ;

    ; draw pedestal
    ldx #0                          ; loop counter
-
    lda pedestalMessage,x           ;
    jsr OSWRCH                      ;
    inx                             ;
    cpx #$0c                        ; loop 12 times
    bne -                           ;

    lda #<willyRight2               ; }
    sta plotSourceSpriteAddressLow  ; }
    lda #>willyRight2               ; } sprite address = $0580 (address of willy)
    sta plotSourceSpriteAddressHigh ; }

    ldx #78                         ;
    ldy #104                        ;
    lda #3                          ;
    jsr plot                        ; plot willy (on the pedestal) (mode 3)

    lda #8                          ;
    sta footPositionY               ;
footDescendingLoop
    lda #<footSprite                ; }
    sta plotSourceSpriteAddressLow  ; } set address to foot sprite
    lda #>footSprite                ; }
    sta plotSourceSpriteAddressHigh ; }
    ldx #$4e                        ;
    ldy footPositionY               ;
    lda #3                          ;
    jsr plot                        ; draw foot (mode 3)

    ldx #$ff                        ;
    ldy #$40                        ; loop counter
-
    dex                             ;
    bne -                           ; delay
    lda footPositionY               ;
    lsr                             ;
    eor #$3f                        ;
    sta channel2Frequency           ; increase pitch
    dey                             ;
    bne -                           ; if (not zero) then branch (loop back)

    inc footPositionY               ;
    inc footPositionY               ;
    lda footPositionY               ;
    cmp #106                        ;
    bne footDescendingLoop          ;

    lda #$9f                        ;
    jsr soundDirect                 ; silence sound

    lda #$10                        ; delay amount
    jsr delayAndClearPedestalSprite ;
    jmp showTitleScreen             ;


; ***************************************************************************************
checkForCollisions
    ; not needed!?
    ;jsr getPlayerSourceSpriteAddress    ;
    ;ldx newPlayerPixelX                 ;
    ;ldy newPlayerPixelY                 ;
    ;lda #1                              ;
    ;jsr plot                            ; draw player (mode 1)
    jsr checkForDeath                   ;
    jsr checkForSwitchFlipped           ;
    jsr collideWithVerticalGuardians    ;

collideWithHorizontalGuardians
    lda #3                              ;
    sta collisionLimit1                 ;
    lda #4                              ;
    sta collisionLimit2                 ;
    lda willyAnimationEOR               ;
    cmp #3                              ;
    bne willyPointingRight              ;

    ; willy pointing left
    lda #4                              ;
    sta collisionLimit1                 ; set left/right limits for willy collision
    lda #3                              ;
    sta collisionLimit2                 ;

willyPointingRight
    lda playerPixelX                    ;
    and #3                              ;
    eor willyAnimationEOR               ;
    cmp #3                              ;
    bne checkCollision                  ;

    lda willyAnimationEOR               ;
    cmp #3                              ;
    bne +                               ;
    lda #5                              ;
    sta collisionLimit1                 ;
    jmp checkCollision                  ;

+
    lda #5                              ;
    sta collisionLimit2                 ;

    ; loop to check each guardian
checkCollision
    ldx #0                              ;
checkCollisionLoop
    lda guardianPositions,x             ;
    cmp #$ff                            ;
    beq return8                         ; if (out of guardians) then return
    jsr checkCollisionForOneGuardian    ;
    txa                                 ;
    clc                                 ;
    adc #4                              ;
    tax                                 ;
    jmp checkCollisionLoop              ;

; ***************************************************************************************
checkCollisionForOneGuardian
    clc                                 ;
    adc #19                             ;
    sec                                 ;
    sbc playerPixelX                    ; guardianX + 19 - playerX
collisionLimit1 = * + 1
    cmp #3                              ;
    bcc possibleCollisionInX            ; if (guardianX + 19 - playerX < limit1) then branch
    eor #$fe                            ; [attempt to negate value, not correct]
collisionLimit2 = * + 1
    cmp #3                              ;
    bcc possibleCollisionInX            ; if (255 - guardianX - 19 + playerX < limit2) then branch
return8
    rts                                 ;

possibleCollisionInX
    inx                                 ;
    lda guardianPositions,x             ; get guardian cell Y
    sec                                 ;
    sbc #1                              ;
    asl                                 ;
    asl                                 ;
    asl                                 ;
    cmp playerPixelY                    ;
    bcc possibleCollisionInY            ; if ((guardianCellY - 1) * 8) < playerY then branch
    dex                                 ;
    rts                                 ;

possibleCollisionInY
    lda guardianPositions,x             ;
    dex                                 ;
    clc                                 ;
    adc #3                              ;
    asl                                 ;
    asl                                 ;
    asl                                 ;
    sec                                 ;
    sbc #1                              ;
    cmp playerPixelY                    ; if (((guardian cell Y + 3) * 8) - 1) > playerY then branch (collision found)
    bcs deathJumper3                    ;
    rts                                 ;

deathJumper3
    jmp death                           ;

; ***************************************************************************************
collideWithVerticalGuardians
    lda #0                              ;
    sta collisionFudgeFactor            ;
    lda playerPixelX                    ;
    and #3                              ;
    eor willyAnimationEOR               ;
    cmp #0                              ;
    beq +                               ;
    lda #1                              ;
    sta collisionFudgeFactor            ;
+
    lda currentLevel                    ;
    cmp #5                              ;
    bne notLevel5                       ;

    ; level 5 - Eugene's Lair specific code
    lda eugenePositionY                 ;
    and #$7f                            ;
    sec                                 ;
    sbc #8                              ;
    sta currentVerticalGuardians + 1    ; Y coordinate

    lda #$ff                            ; } only one vertical guardian on level 5 - Eugene's Lair
    sta verticalGuardian2               ; }

    lda #$0f                            ; } column 15
    sta currentVerticalGuardians        ; }

notLevel5
    lda currentLevel                    ;
    cmp #8                              ;
    beq kongSpecifics                   ;
    cmp #12                             ;
    beq kongSpecifics                   ;
    jmp regularLevels                   ;

    ; Kong levels specific code
kongSpecifics
    lda #$ff                            ;
    sta currentVerticalGuardians        ;
    lda $33c0                           ; screen byte where Kong lives
    cmp #0                              ;
    beq regularLevels                   ;
    lda #$0f                            ; }
    sta currentVerticalGuardians        ; } column 15

    lda #$ff                            ; } only one vertical guardian on Kong levels
    sta verticalGuardian2               ; }

    lda #0                              ;
    sta currentVerticalGuardians + 1    ; Y coordinate

regularLevels
    lda #$f1                            ;
    sta largestYExtent                  ;
    lda currentLevel                    ;
    cmp #14                             ;
    bne +                               ;

    ; level 14 - Skylab Landing Bay specific code
    lda #$f1                            ;
    sta largestYExtent                  ;

    ; check for collisions with all vertical guardians
+
    ldx #0                              ; loop counter
verticalGuardianCollisionLoop
    lda currentVerticalGuardians,x      ;
    cmp #$ff                            ;
    beq return9                         ; if (no vertical guardians) then branch (return)
    jsr checkOneVerticalCollision       ;
    txa                                 ;
    clc                                 ;
    adc #4                              ;
    tax                                 ;
    cpx #16                             ;
    bcs return9                         ;
    jmp verticalGuardianCollisionLoop   ;

; ***************************************************************************************
checkOneVerticalCollision
    lda currentVerticalGuardians,x      ;
    and #$3f                            ;
    clc                                 ;
    adc #5                              ;
    asl                                 ;
    asl                                 ;
    sta tempScreenByte                  ;
    lda playerPixelX                    ;
    clc                                 ;
    adc #4                              ;
    sec                                 ;
tempScreenByte = * + 1
    sbc #$ff                            ; playerX + 4 - (guardianX + 5) * 4
    cmp #0                              ;
    beq checkVerticalCollision          ;
    cmp #7                              ;
    bcc checkVerticalCollision          ;
    sec                                 ;
    sbc collisionFudgeFactor            ; subtract 0 or 1
    cmp #7                              ;
    bcc checkVerticalCollision          ;
    clc                                 ;
    adc collisionFudgeFactor            ; subtract 0 or 1
    cmp #$fd                            ;
    bcs checkVerticalCollision          ;
    clc                                 ;
    adc collisionFudgeFactor            ; subtract 0 or 1
    cmp #$fd                            ;
    bcs checkVerticalCollision          ;
return9
    rts                                 ;

; ***************************************************************************************
checkVerticalCollision
    lda currentVerticalGuardians + 1,x  ;
    clc                                 ;
    adc #8                              ;
    sec                                 ;
    sbc playerPixelY                    ;
    cmp #19                             ;
    bcc deathJumper4                    ; if ( guardianY + 8 - playerY < 19) then branch (die)
largestYExtent = * + 1
    cmp #$f0                            ; if (guardianY + 8 - playerY > largestYExtent) then branch (die)
    bcs deathJumper4                    ;
    rts                                 ;

; ***************************************************************************************
deathJumper4
    jmp death                           ;



; ***************************************************************************************
animateLevel19EnergyFields
    lda currentLevel                    ;
    cmp #19                             ;
    beq level19EnergyFields             ;
    rts                                 ;

level19EnergyFields
    inc energyFieldTimer                ;
    jsr swapEnergyFieldSpritesWith0C00  ;
    lda energyFieldTimer                ;
    and #$10                            ;
    cmp #0                              ;
    beq toggleEnergyField               ;
    lda #0                              ;
    sta energyFieldSpriteOffset         ;
    lda energyFieldTimer                ;
    and #1                              ;
    cmp #0                              ;
    beq setEnergyFieldColour            ;
    lda #2                              ;
    sta energyFieldSpriteOffset         ;
setEnergyFieldColour
    lda #2                              ; COLOUR 2
    jsr setTextColour                   ;
    ldx #0                              ;
-
    lda energyFieldString,x             ;
    cmp #$2a                            ;
    beq drawEnergyField                 ;
continueEnergyFieldString
    jsr OSWRCH                          ;
    inx                                 ;
    cpx #16                             ;
    bne -                               ; loop for length of message
    jmp swapEnergyFieldSpritesWith0C00  ;

drawEnergyField
    lda #$e0                            ;
    clc                                 ;
    adc energyFieldSpriteOffset         ;
    tay                                 ;
    iny                                 ;
    jsr OSWRCH                          ;
    lda #$0a                            ;
    jsr OSWRCH                          ;
    lda #8                              ;
    jsr OSWRCH                          ;
    tya                                 ;
    jmp continueEnergyFieldString       ;

toggleEnergyField
    lda #4                              ;
    sta energyFieldSpriteOffset         ;
    lda energyFieldTimer                ;
    and #$0f                            ;
    cmp #0                              ;
    beq setEnergyFieldColour            ;
    jmp swapEnergyFieldSpritesWith0C00  ;

    ; ***********************************************************************************
    !macro singleType .count, .spriteOffset {
        !if (.count < 2) {
            !error "Cannot encode less than two keys. If one key is needed, define the second key in the same position as the first"
        }
        !byte ((.count-2) * 64) + (.spriteOffset - 1)
    }

    !macro singlePos .x, .y {
        !if (.x = 15) {
            !if (.y = 15) {
                !error "Cannot encode position at 15, 15 as that code is reserved"
            }
            !if (.y = 14) {
                !error "Cannot encode position at 15, 14 as that code is reserved"
            }
            !if (.y = 13) {
                !error "Cannot encode position at 15, 13 as that code is reserved"
            }
        }
        !byte (.x * 16) + .y
    }

    !macro singleOffsetX15 {
        !byte $fe
    }

    !macro singleNextType {
        !byte $fd
    }

    !macro singleSpider .x, .y, .threadLength {
        !byte (.x * 16) + .y
        !byte .threadLength
    }

    ; ***********************************************************************************
levelSingleItemDefinitions

    ; ***********************************************************************************
    ; level 1 - Central Cavern
    !byte $ff

    +singleType 5, 2        ; 5 keys, sprite offset 2
    +singlePos 8, 0         ; key
    +singlePos 15, 1        ; key
    +singleOffsetX15
    +singlePos 7, 4         ; key
    +singlePos 12, 0        ; key
    +singlePos 13, 6        ; key

    +singlePos 11,12        ; thorn

    +singleOffsetX15
    +singlePos 4, 8         ; thorn
    +singlePos 6, 4         ; thorn
    +singlePos 10, 4        ; thorn

    +singleNextType
    +singlePos 10, 0        ; spike
    +singlePos 15, 0        ; spike

    ; ***********************************************************************************
    ; level 2 - The Cold Room
    !byte $ff

    +singleType 5, 2        ; 5 keys, sprite offset 2
    +singlePos 2, 9         ; key
    +singlePos 6, 1         ; key
    +singleOffsetX15
    +singlePos 7, 1         ; key
    +singlePos 9, 7         ; key
    +singlePos 2, 12        ; key

    +singleNextType
    +singleOffsetX15
    +singlePos 13, 1        ; spike

    ; ***********************************************************************************
    ; level 3 - The Menagerie
    !byte $ff

    +singleType 5, 3        ; 5 keys, sprite offset 3
    +singlePos 5, 0         ; key
    +singlePos 14, 0        ; key

    +singleOffsetX15
    +singlePos 6, 0         ; key
    +singlePos 13, 6        ; key
    +singlePos 4, 6         ; key

    +singleNextType
    +singleSpider 0, 8, 3   ; spider
    +singleSpider 9, 0, 0   ; spider

    +singleOffsetX15
    +singleSpider 1, 0, 1   ; spider
    +singleSpider 10, 0, 0  ; spider

    ; ***********************************************************************************
    ; level 4 - Abandoned Uranium Workings
    !byte $ff

    +singleType 5, 3        ; 5 keys, sprite offset 3
    +singlePos 0, 0         ; key
    +singlePos 11, 1        ; key
    +singlePos 15, 6        ; key

    +singleOffsetX15
    +singlePos 8, 1         ; key
    +singlePos 13, 6        ; key

    +singleNextType
    +singleSpider 6, 0, 0   ; spider
    +singleOffsetX15
    +singleSpider 6, 12, 0  ; spider

    ; ***********************************************************************************
    ; level 5 - Eugene's Lair
    !byte $ff

    +singleType 5, 1        ; 5 keys, sprite offset 1
    +singlePos 6, 12        ; key
    +singlePos 8, 12        ; key
    +singlePos 9, 6         ; key
    +singleOffsetX15
    +singlePos 13, 1        ; key
    +singlePos 12, 7        ; key

    +singlePos 4, 14        ; spike
    +singleOffsetX15
    +singlePos 7, 14        ; spike
    +singlePos 8, 14        ; spike
    +singlePos 4, 7         ; spike
    +singlePos 7, 4         ; spike

    +singleNextType
    +singleOffsetX15
    +singlePos 3, 0         ; alt spike

    ; ***********************************************************************************
    ; level 6 - Processing Plant
    !byte $ff

    +singleType 5, 5        ; 5 keys, sprite offset 5
    +singlePos 0, 10        ; key
    +singlePos 12, 11       ; key
    +singlePos 14, 6        ; key
    +singleOffsetX15
    +singlePos 0, 6         ; key
    +singlePos 13, 7        ; key

    +singlePos 2, 12        ; thorn

    +singleNextType
    +singleOffsetX15
    +singlePos 0, 11        ; cross spike
    +singlePos 4, 4         ; cross spike

    ; ***********************************************************************************
    ; level 7 - The Vat
    !byte $ff

    +singleType 5, 6        ; 5 keys, sprite offset 6
    +singleOffsetX15
    +singlePos 2, 10        ; key
    +singlePos 3, 6         ; key
    +singlePos 10, 7        ; key
    +singlePos 13, 3        ; key
    +singlePos 13, 11       ; key

    +singleNextType
    +singleOffsetX15
    +singlePos 6, 12        ; spider (no thread)
    +singlePos 6, 8         ; spider (no thread)
    +singlePos 11, 10       ; spider (no thread)
    +singlePos 11, 5        ; spider (no thread)

    ; ***********************************************************************************
    ; level 8 - Miner Willy meets the Kong Beast
    !byte $ff

    +singleType 4, 1        ; 4 keys, sprite offset 1
    +singlePos 1, 8         ; key
    +singlePos 13, 6        ; key
    +singlePos 11, 2        ; key
    +singleOffsetX15
    +singlePos 12, 13       ; key

    +singleOffsetX15
    +singlePos 6, 14        ; thorn

    ; ***********************************************************************************
    ; level 9 - Wacky Amoebatrons
    !byte $ff

    +singleType 2, 1        ; 2 keys [we only want one, but need at least two keys defined]
    +singlePos 15, 1        ; key
    +singlePos 15, 1        ; key [this key just overwrites the first]

    +singleOffsetX15        ; [redundant]

    ; ***********************************************************************************
    ; level 10 - The Endorian Forest
    !byte $ff

    +singleType 5, 7        ; 5 keys, sprite offset 7
    +singlePos 13, 1        ; key
    +singlePos 11, 6        ; key
    +singleOffsetX15
    +singlePos 1, 8         ; key
    +singlePos 4, 2         ; key
    +singlePos 13, 1        ; key

    +singleNextType
    +singlePos 2, 3         ; flower spike
    +singlePos 0, 9         ; flower spike
    +singlePos 9, 0         ; flower spike
    +singleOffsetX15
    +singlePos 1, 0         ; flower spike
    +singlePos 3, 0         ; flower spike
    +singlePos 4, 1         ; flower spike
    +singlePos 6, 11        ; flower spike
    +singlePos 13, 10       ; flower spike

    ; ***********************************************************************************
    ; level 11 - Attack of the Mutant Telephones
    !byte $ff
    +singleType 5, 3        ; 5 keys, sprite offset 3
    +singlePos 0, 4         ; key
    +singleOffsetX15
    +singlePos 2, 6         ; key
    +singlePos 7, 0         ; key
    +singlePos 13, 1        ; key
    +singlePos 13, 13       ; key

    +singleNextType
    +singleSpider 11, 10, 2 ; spider, thread length 2
    +singleOffsetX15
    +singleSpider 2, 0, 1   ; spider, thread length 1
    +singleSpider 2, 10, 1  ; spider, thread length 1
    +singleSpider 7, 6, 3   ; spider, thread length 3

    ; ***********************************************************************************
    ; level 12 - Return of the Alien Kong Beast
    !byte $ff

    +singleType 5, 1        ; 5 keys, sprite offset 1
    +singlePos 1, 6         ; key
    +singlePos 14, 3        ; key
    +singlePos 15, 7        ; key

    +singleOffsetX15
    +singlePos 9, 5         ; key
    +singlePos 12, 13       ; key

    +singleOffsetX15
    +singlePos 6, 12        ; thorn
    +singlePos 11, 12       ; thorn

    ; ***********************************************************************************
    ; level 13 - Ore Refinery
    !byte $ff

    +singleType 5, 1        ; 5 keys, sprite offset 1
    +singlePos 10, 12       ; keys
    +singlePos 9, 6         ; keys
    +singleOffsetX15
    +singlePos 9, 3         ; keys
    +singlePos 9, 9         ; keys
    +singlePos 2, 9         ; keys
    +singleOffsetX15

    ; ***********************************************************************************
    ; level 14 - Skylab Landing Bay
    !byte $ff
    +singleType 4, 1        ; 4 keys, sprite offset 1

    +singlePos 2, 8         ; key
    +singlePos 15, 7        ; key
    +singleOffsetX15        ;
    +singlePos 6, 2         ; key
    +singlePos 10, 7        ; key
    +singleOffsetX15        ;

    ; ***********************************************************************************
    ; level 15 - The Bank
    !byte $ff
    +singleType 3, 3        ; 3 keys, sprite offset 3

    +singlePos 11, 6        ; key
    +singleOffsetX15        ;
    +singlePos 8, 2         ; key
    +singlePos 9, 14        ; key

    +singleNextType         ;
    +singleSpider 7, 4, 1   ; spider, length 1
    +singleOffsetX15        ;
    +singleSpider 11, 4, 6  ; spider, length 6

    ; ***********************************************************************************
    ; level 16 - The Sixteenth Cavern
    !byte $ff
    +singleType 4, 8        ; 4 keys, sprite offset 8

    +singlePos 0, 0         ; key
    +singlePos 12, 7        ; key
    +singleOffsetX15
    +singlePos 0, 10        ; key
    +singlePos 13, 2        ; key

    +singleNextType
    +singleOffsetX15        ;
    +singlePos 6, 14        ; floor spike
    +singlePos 7, 14        ; floor spike
    +singlePos 8, 14        ; floor spike

    ; ***********************************************************************************
    ; level 17 - The Warehouse
    !byte $ff
    +singleType 5, 9        ; 5 keys, sprite offset 9

    +singlePos 0, 9         ; key
    +singlePos 14, 7        ; key
    +singleOffsetX15
    +singlePos 2, 10        ; key
    +singlePos 7, 5         ; key
    +singlePos 9, 11        ; key

    +singlePos 5, 4         ; thorn
    +singlePos 8, 4         ; thorn
    +singlePos 12, 4        ; thorn
    +singlePos 15, 4        ; thorn
    +singleOffsetX15
    +singlePos 5, 4         ; thorn
    +singlePos 7, 4         ; thorn

    +singleNextType
    +singlePos 2, 6         ; X spike
    +singlePos 8, 11        ; X spike
    +singleOffsetX15
    +singlePos 5, 10        ; X spike
    +singlePos 9, 7         ; X spike

    ; ***********************************************************************************
    ; level 18 - Amoebatrons' Revenge
    !byte $ff
    +singleType 2, 1        ; 2 keys [only one wanted really, but we must have at least two encoded]
    +singlePos 14, 1        ; key
    +singlePos 14, 1        ; key [overwrites the first key]
    +singleOffsetX15        ;

    ; ***********************************************************************************
    ; level 19 - The Meteor Storm
    !byte $ff
    +singleType 5, 2        ; 5 keys, sprite offset 2
    +singlePos 0, 2         ; key
    +singlePos 12, 8        ; key
    +singleOffsetX15
    +singlePos 13, 1        ; key
    +singlePos 13, 12       ; key
    +singlePos 1, 8         ; key
    +singleOffsetX15        ;

    ; ***********************************************************************************
    ; level 20 - The Final Barrier
    !byte $ff
    +singleType 5, 3        ; 5 keys, sprite offset 3
    +singlePos 8, 8         ; key
    +singleOffsetX15
    +singlePos 0, 13        ; key
    +singlePos 2, 8         ; key
    +singlePos 4, 1         ; key
    +singlePos 13, 11       ; key

    +singlePos 6, 6         ; thorn
    +singleOffsetX15
    +singlePos 0, 6         ; thorn
    +singlePos 2, 14        ; thorn
    +singlePos 4, 14        ; thorn

    +singleNextType
    +singleSpider 4, 0, 2   ; spider, length 2
    +singleOffsetX15        ;
    +singleSpider 11, 8, 3  ; spider, length 3
    !byte $ff               ; terminator

    ; ***********************************************************************************
guardianGraphics
    !byte %...#####            ;   #####  #
    !byte %..###..#            ;  ###  ####
    !byte %...##..#            ;   ##  ####
    !byte %....####            ;    ####  #
    !byte %#..#####            ;#  #####
    !byte %.#.#####            ; # ######
    !byte %########            ;##########
    !byte %.#.####.            ; # ####
    !byte %..#.....
    !byte %###.....
    !byte %###.....
    !byte %..#.....
    !byte %........
    !byte %#.......
    !byte %##......
    !byte %........

    !byte %.....###            ;     #####   #
    !byte %....###.            ;    ###  #####
    !byte %.....##.            ;     ##  #####
    !byte %..#...##            ;  #   ####   #
    !byte %...#.###            ;   # #####
    !byte %...#.###            ;   # ######
    !byte %..######            ;  ##########
    !byte %...#.###            ;   # #######
    !byte %##...#..
    !byte %.#####..
    !byte %.#####..
    !byte %##...#..
    !byte %##......
    !byte %###.....
    !byte %####....
    !byte %####....

    !byte %.......#            ;       #####  #
    !byte %......##            ;      ###  ####
    !byte %.......#            ;       ##  ####
    !byte %........            ;        ####  #
    !byte %.......#            ;       #####
    !byte %....#..#            ;    #  ######
    !byte %.....#.#            ;     # #######
    !byte %....####            ;    #######
    !byte %####..#.
    !byte %#..####.
    !byte %#..####.
    !byte %####..#.
    !byte %####....
    !byte %#####...
    !byte %######..
    !byte %###.....

    !byte %........            ;         ##### #
    !byte %........            ;        ###  ###
    !byte %........            ;         ##  ###
    !byte %........            ;          #### #
    !byte %........            ;         #####
    !byte %........            ;         #######
    !byte %......##            ;      ########
    !byte %........            ;         ###
    !byte %.#####.#
    !byte %###..###
    !byte %.##..###
    !byte %..####.#
    !byte %.#####..
    !byte %.#######
    !byte %######..
    !byte %.###....

    !byte %#..#####            ;#  #######
    !byte %...#####            ;   ######
    !byte %....###.            ;    ###
    !byte %...#####            ;   #####
    !byte %#.###.##            ;# ### ###
    !byte %.###...#            ; ###   ####
    !byte %..#.....            ;  #     ##
    !byte %...#....            ;   #    #
    !byte %##......
    !byte %#.......
    !byte %........
    !byte %........
    !byte %#.......
    !byte %###.....
    !byte %##......
    !byte %#.......

    !byte %...#.###            ;   # #######
    !byte %..#..###            ;  #  ######
    !byte %......##            ;      ###
    !byte %......##            ;      ###
    !byte %.....##.            ;     ## ##
    !byte %.....##.            ;     ## ##
    !byte %...###..            ;   ###    ###
    !byte %.....##.            ;     ##  ##
    !byte %####....
    !byte %###.....
    !byte %#.......
    !byte %#.......
    !byte %##......
    !byte %##......
    !byte %..###...
    !byte %.##.....

    !byte %.....#.#            ;     # #######
    !byte %....#..#            ;    #  ######
    !byte %........            ;        ###
    !byte %........            ;        ###
    !byte %........            ;        ###
    !byte %........            ;        ###
    !byte %........            ;        ###
    !byte %.......#            ;       #####
    !byte %######..
    !byte %#####...
    !byte %###.....
    !byte %###.....
    !byte %###.....
    !byte %###.....
    !byte %###.....
    !byte %####....

    !byte %........            ;         #####
    !byte %........            ;         #######
    !byte %........            ;         ####
    !byte %........            ;          ###
    !byte %........            ;         ## ##
    !byte %........            ;         ## ##
    !byte %.......#            ;       ###   ###
    !byte %........            ;         ## ##
    !byte %.#####..
    !byte %.#######
    !byte %.####...
    !byte %..###...
    !byte %.##.##..
    !byte %.##.##..
    !byte %##...###
    !byte %.##.##..

    !byte %....##..            ;    ##
    !byte %...####.            ;   ####
    !byte %...##.##            ;   ## ##
    !byte %...####.            ;   #### ##
    !byte %..###..#            ;  ###  #
    !byte %..##..#.            ;  ##  #
    !byte %..###.#.            ;  ### #
    !byte %..####.#            ;  #### #
    !byte %........
    !byte %........
    !byte %........
    !byte %##......
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %......##            ;      ##
    !byte %.....###            ;     ####
    !byte %.....##.            ;     ## ##
    !byte %.....###            ;     #### ##
    !byte %....###.            ;    ###  #
    !byte %....##..            ;    ##  #
    !byte %....####            ;    #####
    !byte %....##.#            ;    ## ###
    !byte %........
    !byte %#.......
    !byte %##......
    !byte %#.##....
    !byte %.#......
    !byte %#.......
    !byte %#.......
    !byte %##......

    !byte %........            ;        ##
    !byte %.......#            ;       ####
    !byte %.......#            ;       ## ##
    !byte %.......#            ;       #### ##
    !byte %......##            ;      ###  #
    !byte %......##            ;      ##  #
    !byte %......##            ;      ### #
    !byte %......##            ;      #### #
    !byte %##......
    !byte %###.....
    !byte %#.##....
    !byte %###.##..
    !byte %#..#....
    !byte %..#.....
    !byte %#.#.....
    !byte %##.#....

    !byte %........            ;          ##
    !byte %........            ;         ####
    !byte %........            ;         ## ##
    !byte %........            ;         #### ##
    !byte %........            ;        ###  #
    !byte %........            ;        ##  #
    !byte %........            ;        ### #
    !byte %........            ;        #### #
    !byte %..##....
    !byte %.####...
    !byte %.##.##..
    !byte %.####.##
    !byte %###..#..
    !byte %##..#...
    !byte %###.#...
    !byte %####.#..

    !byte %.##.##.#            ; ## ## #
    !byte %.##.#..#            ; ## #  #
    !byte %.##.#..#            ; ## #  #
    !byte %.##....#            ; ##    #
    !byte %.###...#            ; ###   #
    !byte %#.#####.            ;# #####
    !byte %....#...            ;    #
    !byte %...####.            ;   ####
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %...##.##            ;   ## ## #
    !byte %...##.##            ;   ## ## #
    !byte %...#.##.            ;   # ##  #
    !byte %...##...            ;   ##    #
    !byte %...###..            ;   ###   #
    !byte %..#.####            ;  # #####
    !byte %.....#.#            ;     # # #
    !byte %....####            ;    #####
    !byte %.#......
    !byte %.#......
    !byte %.#......
    !byte %.#......
    !byte %.#......
    !byte %#.......
    !byte %.#......
    !byte %#.......

    !byte %.....##.            ;     ## ## #
    !byte %.....##.            ;     ## #  #
    !byte %.....##.            ;     ## #  #
    !byte %.....##.            ;     ##    #
    !byte %.....###            ;     ###   #
    !byte %....#.##            ;    # ##### #
    !byte %......#.            ;      #  # #
    !byte %.....###            ;     ######
    !byte %##.#....
    !byte %#..#....
    !byte %#..#....
    !byte %...#....
    !byte %...#....
    !byte %###.#...
    !byte %.#.#....
    !byte %###.....

    !byte %.......#            ;       ## ## #
    !byte %.......#            ;       ##  # #
    !byte %.......#            ;       ##  # #
    !byte %.......#            ;       ##    #
    !byte %.......#            ;       ##    #
    !byte %........            ;        #####
    !byte %........            ;         # #  #
    !byte %........            ;        ######
    !byte %#.##.#..
    !byte %#..#.#..
    !byte %#..#.#..
    !byte %#....#..
    !byte %#....#..
    !byte %#####...
    !byte %.#.#..#.
    !byte %######..

    !byte %......##            ;      ##
    !byte %.....##.            ;     ## #
    !byte %.....###            ;     #####
    !byte %......##            ;      ##
    !byte %.......#            ;       ##
    !byte %........            ;        ##
    !byte %#.#####.            ;# ##### ##
    !byte %###...##            ;###   ###
    !byte %........
    !byte %#.......
    !byte %##......
    !byte %........
    !byte %#.......
    !byte %##......
    !byte %##......
    !byte %#.......

    !byte %........            ;        ##
    !byte %.......#            ;       ## #
    !byte %.......#            ;       #####
    !byte %........            ;        ##
    !byte %........            ;         ##
    !byte %........            ;          ##
    !byte %..#.####            ;  # ##### ##
    !byte %..###...            ;  ###   ###
    !byte %##......
    !byte %#.#.....
    !byte %####....
    !byte %##......
    !byte %.##.....
    !byte %..##....
    !byte %#.##....
    !byte %###.....

    !byte %........            ;          ##
    !byte %........            ;         ## #
    !byte %........            ;         ######
    !byte %........            ;          ##
    !byte %........            ;           ##
    !byte %........            ;            ##
    !byte %....#.##            ;    # ##### ##
    !byte %....###.            ;    ###   ###
    !byte %..##....
    !byte %.##.#...
    !byte %.######.
    !byte %..##....
    !byte %...##...
    !byte %....##..
    !byte %###.##..
    !byte %..###...

    !byte %........            ;            ##
    !byte %........            ;           ## #
    !byte %........            ;           #####
    !byte %........            ;        # # ##
    !byte %.......#            ;       # # # ##
    !byte %........            ;        # #   ##
    !byte %......##            ;      ## #    ##
    !byte %......##            ;      ###    ##
    !byte %....##..
    !byte %...##.#.
    !byte %...#####
    !byte %#.#.##..
    !byte %.#.#.##.
    !byte %#.#...##
    !byte %.#....##
    !byte %#....##.

    !byte %.#......            ; #      #
    !byte %#.#.#.#.            ;# # # # #
    !byte %.#######            ; ########
    !byte %..######            ;  ######
    !byte %.....#..            ;     #
    !byte %.....#..            ;     #
    !byte %.....#..            ;     #
    !byte %....#.#.            ;    # #
    !byte %#.......
    !byte %#.......
    !byte %#.......
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %...##...            ;   ##   ##
    !byte %..##....            ;  ##    ##
    !byte %...#.#.#            ;   # # ###
    !byte %....#.#.            ;    # # #
    !byte %...#.#.#            ;   # # #
    !byte %......#.            ;      #
    !byte %.....#.#            ;     # #
    !byte %........            ;
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %#.......
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %.....#..            ;     #     #
    !byte %....#.#.            ;    # # # ##
    !byte %.....###            ;     #######
    !byte %......##            ;      #####
    !byte %........            ;        #
    !byte %.......#            ;       # #
    !byte %........            ;
    !byte %........            ;
    !byte %...#....
    !byte %#.##....
    !byte %####....
    !byte %###.....
    !byte %#.......
    !byte %.#......
    !byte %........
    !byte %........

    !byte %.......#            ;       #    ##
    !byte %......##            ;      ########
    !byte %.......#            ;       #######
    !byte %........            ;        #####
    !byte %........            ;          #
    !byte %........            ;          #
    !byte %........            ;         # #
    !byte %........            ;
    !byte %....##..
    !byte %######..
    !byte %######..
    !byte %#####...
    !byte %..#.....
    !byte %..#.....
    !byte %.#.#....
    !byte %........

    !byte %.....###            ;     ###
    !byte %....#.##            ;    # ###
    !byte %...#..##            ;   #  ####
    !byte %...#..##            ;   #  ####
    !byte %...#..##            ;   #  ####
    !byte %....#.##            ;    # ###
    !byte %.....###            ;     ###
    !byte %.......#            ;       #
    !byte %........
    !byte %#.......
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %#.......
    !byte %........
    !byte %........

    !byte %.......#            ;       ###
    !byte %......#.            ;      # ###
    !byte %.....#.#            ;     # ### #
    !byte %.....#.#            ;     # ### #
    !byte %.....#.#            ;     # ### #
    !byte %......#.            ;      # ###
    !byte %.......#            ;       ###
    !byte %........            ;         #
    !byte %##......
    !byte %###.....
    !byte %##.#....
    !byte %##.#....
    !byte %##.#....
    !byte %###.....
    !byte %##......
    !byte %.#......

    !byte %........            ;         ###
    !byte %........            ;        ### #
    !byte %.......#            ;       ####  #
    !byte %.......#            ;       ####  #
    !byte %.......#            ;       ####  #
    !byte %........            ;        ### #
    !byte %........            ;         ###
    !byte %........            ;           #
    !byte %.###....
    !byte %###.#...
    !byte %###..#..
    !byte %###..#..
    !byte %###..#..
    !byte %###.#...
    !byte %.###....
    !byte %...#....

    !byte %........            ;           ###
    !byte %........            ;          ## ##
    !byte %........            ;         ##   ##
    !byte %........            ;         ##   ##
    !byte %........            ;         ##   ##
    !byte %........            ;          ## ##
    !byte %........            ;           ###
    !byte %........            ;             #
    !byte %...###..
    !byte %..##.##.
    !byte %.##...##
    !byte %.##...##
    !byte %.##...##
    !byte %..##.##.
    !byte %...###..
    !byte %.....#..

    !byte %.....###            ;     ###
    !byte %.....#.#            ;     # #
    !byte %.....###            ;     ###
    !byte %.....###            ;     ####
    !byte %.#..####            ; #  #####
    !byte %.#.#####            ; # #######
    !byte %#######.            ;####### ##
    !byte %..####..            ;  ####   #
    !byte %........
    !byte %........
    !byte %........
    !byte %#.......
    !byte %#.......
    !byte %##......
    !byte %##......
    !byte %.#......

    !byte %.......#            ;       ###
    !byte %.......#            ;       # #
    !byte %.......#            ;       ###
    !byte %.......#            ;       ####
    !byte %..#...##            ;  #   #####
    !byte %..#.####            ;  # ########
    !byte %.#######            ; ######## ##
    !byte %...#####            ;   #####   #
    !byte %##......
    !byte %.#......
    !byte %##......
    !byte %###.....
    !byte %###.....
    !byte %####....
    !byte %#.##....
    !byte %...#....

    !byte %........            ;         ###
    !byte %........            ;         # #
    !byte %........            ;         ###
    !byte %........            ;        #####
    !byte %..#....#            ;  #    ######
    !byte %..#..###            ;  #  #########
    !byte %.#######            ; ########## ##
    !byte %....####            ;    ######   #
    !byte %.###....
    !byte %.#.#....
    !byte %.###....
    !byte %#####...
    !byte %#####...
    !byte %######..
    !byte %###.##..
    !byte %##...#..

    !byte %........            ;           ###
    !byte %........            ;           # #
    !byte %........            ;           ###
    !byte %........            ;           ####
    !byte %....#...            ;    #     #####
    !byte %....#...            ;    #   ########
    !byte %...#####            ;   ########## ##
    !byte %......##            ;      ######   #
    !byte %...###..
    !byte %...#.#..
    !byte %...###..
    !byte %...####.
    !byte %..#####.
    !byte %########
    !byte %#####.##
    !byte %####...#

    !byte %##......            ;##
    !byte %##......            ;##
    !byte %##......            ;##
    !byte %##......            ;##
    !byte %##......            ;##
    !byte %##......            ;##
    !byte %##......            ;##
    !byte %##......            ;##
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %..##....            ;  ##
    !byte %..##....            ;  ##
    !byte %..##....            ;  ##
    !byte %..##....            ;  ##
    !byte %..##....            ;  ##      #
    !byte %..##....            ;  ##    ##
    !byte %..##..##            ;  ##  ##
    !byte %..##.#..            ;  ## #
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %..#.....
    !byte %##......
    !byte %........
    !byte %........

    !byte %...##...            ;   ##
    !byte %...##...            ;   ##
    !byte %...##...            ;   ##     #
    !byte %...##...            ;   ##    #
    !byte %...##...            ;   ##    #
    !byte %...##...            ;   ##   #
    !byte %...##...            ;   ##   #
    !byte %...##..#            ;   ##  #
    !byte %........
    !byte %........
    !byte %..#.....
    !byte %.#......
    !byte %.#......
    !byte %#.......
    !byte %#.......
    !byte %........

    !byte %......##            ;      ##
    !byte %......##            ;      ##
    !byte %......##            ;      ##
    !byte %......##            ;      ##
    !byte %......##            ;      ##      #
    !byte %......##            ;      ##    ##
    !byte %......##            ;      ##  ##
    !byte %......##            ;      ## #
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %......#.
    !byte %....##..
    !byte %..##....
    !byte %.#......

    !byte %##.#####            ;## #######
    !byte %########            ;##########
    !byte %...#####            ;   #######
    !byte %....####            ;    #####
    !byte %.###.###            ; ### ####
    !byte %########            ;########
    !byte %##.#####            ;## #####
    !byte %##.#####            ;## #####
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %#.......
    !byte %#.......
    !byte %........
    !byte %........
    !byte %........

    !byte %..##.###            ;  ## #######
    !byte %..######            ;  ##########
    !byte %.....###            ;     #######
    !byte %......##            ;      #####
    !byte %...###.#            ;   ### ####
    !byte %..######            ;  ########
    !byte %..##.###            ;  ## #####
    !byte %..##.###            ;  ## #####
    !byte %####....
    !byte %####....
    !byte %####....
    !byte %###.....
    !byte %###.....
    !byte %##......
    !byte %##......
    !byte %##......

    !byte %...##.##            ;   ## ########
    !byte %...#####            ;   ###########
    !byte %......##            ;      ########
    !byte %.......#            ;       ######
    !byte %....###.            ;    ### #####
    !byte %...#####            ;   #########
    !byte %...##.##            ;   ## ######
    !byte %...##.##            ;   ## ######
    !byte %######..
    !byte %######..
    !byte %######..
    !byte %#####...
    !byte %#####...
    !byte %####....
    !byte %####....
    !byte %####....

    !byte %......##            ;      ## #######
    !byte %......##            ;      ##########
    !byte %........            ;         #######
    !byte %........            ;          #####
    !byte %.......#            ;       ### ####
    !byte %......##            ;      ########
    !byte %......##            ;      ## #####
    !byte %......##            ;      ## #####
    !byte %.#######
    !byte %########
    !byte %.#######
    !byte %..#####.
    !byte %##.####.
    !byte %######..
    !byte %.#####..
    !byte %.#####..

    !byte %...#####            ;   #####
    !byte %.#######            ; #########
    !byte %.###..##            ; ###  #####
    !byte %####..##            ;####  ###
    !byte %#######.            ;#######
    !byte %#####...            ;#####
    !byte %#######.            ;#######
    !byte %########            ;#########
    !byte %........
    !byte %##......
    !byte %###.....
    !byte %#.......
    !byte %........
    !byte %........
    !byte %........
    !byte %#.......

    !byte %.....###            ;     #####
    !byte %...#####            ;   #########
    !byte %...####.            ;   ####  ###
    !byte %..#####.            ;  #####  ####
    !byte %..######            ;  ###########
    !byte %..#####.            ;  #####
    !byte %..######            ;  ###########
    !byte %..######            ;  ###########
    !byte %##......
    !byte %####....
    !byte %.###....
    !byte %.####...
    !byte %#####...
    !byte %........
    !byte %#####...
    !byte %#####...

    !byte %.......#            ;       #####
    !byte %.....###            ;     #########
    !byte %.....###            ;     ###  #####
    !byte %....####            ;    ####  ###
    !byte %....####            ;    #######
    !byte %....####            ;    #####
    !byte %....####            ;    #######
    !byte %....####            ;    #########
    !byte %####....
    !byte %######..
    !byte %..#####.
    !byte %..###...
    !byte %###.....
    !byte %#.......
    !byte %###.....
    !byte %#####...

    !byte %........            ;         #####
    !byte %.......#            ;       ###  ####
    !byte %.......#            ;       ###  ###
    !byte %......##            ;      ########
    !byte %......##            ;      ######
    !byte %......##            ;      #####
    !byte %......##            ;      ######
    !byte %......##            ;      ########
    !byte %.#####..
    !byte %##..####
    !byte %##..###.
    !byte %######..
    !byte %####....
    !byte %###.....
    !byte %####....
    !byte %######..

    !byte %.#######            ; ##########
    !byte %.#######            ; #########
    !byte %...#####            ;   #####
    !byte %....#.#.            ;    # #
    !byte %....#.#.            ;    # #
    !byte %....#.#.            ;    # #
    !byte %....#.#.            ;    # #
    !byte %...#####            ;   #####
    !byte %###.....
    !byte %##......
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %...#####            ;   #########
    !byte %...#####            ;   #########
    !byte %.....###            ;     #####
    !byte %......#.            ;      # #
    !byte %......#.            ;      # #
    !byte %.....###            ;     #####
    !byte %........            ;
    !byte %........            ;
    !byte %####....
    !byte %####....
    !byte %##......
    !byte %#.......
    !byte %#.......
    !byte %##......
    !byte %........
    !byte %........

    !byte %.....###            ;     ##########
    !byte %.....###            ;     #########
    !byte %.......#            ;       #####
    !byte %.......#            ;       #####
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %#######.
    !byte %######..
    !byte %####....
    !byte %####....
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %.......#            ;       ########
    !byte %.......#            ;       #########
    !byte %........            ;         #####
    !byte %........            ;          # #
    !byte %........            ;          # #
    !byte %........            ;         #####
    !byte %........            ;
    !byte %........            ;
    !byte %#######.
    !byte %########
    !byte %.#####..
    !byte %..#.#...
    !byte %..#.#...
    !byte %.#####..
    !byte %........
    !byte %........

    !byte %...##...            ;   ##
    !byte %...###..            ;   ###
    !byte %....#.#.            ;    # # #
    !byte %....####            ;    #####
    !byte %....##..            ;    ##
    !byte %...###..            ;   ###
    !byte %...####.            ;   ####
    !byte %...###.#            ;   ### #
    !byte %........
    !byte %........
    !byte %#.......
    !byte %#.......
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %........            ;
    !byte %........            ;
    !byte %.....##.            ;     ##
    !byte %.....###            ;     ###
    !byte %......#.            ;      # # #
    !byte %......##            ;      #####
    !byte %......##            ;      ###
    !byte %.....###            ;     ###
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %#.#.....
    !byte %###.....
    !byte %#.......
    !byte %........

    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %.......#            ;       ##
    !byte %.......#            ;       ###
    !byte %........            ;        # # #
    !byte %........            ;        #####
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %#.......
    !byte %##......
    !byte %#.#.#...
    !byte %#####...

    !byte %........            ;
    !byte %........            ;
    !byte %........            ;         ##
    !byte %........            ;         ###
    !byte %........            ;          # # #
    !byte %........            ;          #####
    !byte %........            ;          ###
    !byte %........            ;         ###
    !byte %........
    !byte %........
    !byte %.##.....
    !byte %.###....
    !byte %..#.#.#.
    !byte %..#####.
    !byte %..###...
    !byte %.###....

    !byte %..####..            ;  ####
    !byte %..####..            ;  ####
    !byte %..#####.            ;  #####
    !byte %..#####.            ;  #####
    !byte %.##.###.            ; ## ###
    !byte %.#...#..            ; #   #
    !byte %.#....#.            ; #    #
    !byte %#......#            ;#      #
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %.....###            ;     ####
    !byte %.....###            ;     ### #
    !byte %....####            ;    ####
    !byte %....####            ;    #####
    !byte %....####            ;    #####
    !byte %...##.##            ;   ## ###
    !byte %..##..##            ;  ##  ##
    !byte %.#.....#            ; #     ###
    !byte %#.......
    !byte %.#......
    !byte %........
    !byte %#.......
    !byte %#.......
    !byte %#.......
    !byte %........
    !byte %##......

    !byte %........            ;        ###
    !byte %.......#            ;       ###
    !byte %.......#            ;       ####
    !byte %.......#            ;       ### #
    !byte %......##            ;      ####
    !byte %......##            ;      #####
    !byte %.....###            ;     ######
    !byte %..#####.            ;  ##### #####
    !byte %###.....
    !byte %##......
    !byte %###.....
    !byte %##.#....
    !byte %##......
    !byte %###.....
    !byte %###.....
    !byte %#####...

    !byte %........            ;         ####
    !byte %........            ;         ### #
    !byte %........            ;        ####
    !byte %........            ;        #####
    !byte %.......#            ;       ######
    !byte %.......#            ;       ## ##
    !byte %......##            ;      ##    ##
    !byte %.....#..            ;     #
    !byte %.####...
    !byte %.###.#..
    !byte %####....
    !byte %#####...
    !byte %#####...
    !byte %#.##....
    !byte %....##..
    !byte %........

    !byte %....#...            ;    #
    !byte %.....#.#            ;     # #
    !byte %....#...            ;    #   #
    !byte %..#..#.#            ;  #  # #
    !byte %.#..#...            ; #  #   #
    !byte %..#....#            ;  #    #
    !byte %.#..##..            ; #  ##
    !byte %..##..##            ;  ##  ##
    !byte %........
    !byte %........
    !byte %#.......
    !byte %........
    !byte %#.......
    !byte %........
    !byte %........
    !byte %........

    !byte %......#.            ;      #
    !byte %..#....#            ;  #    #  #
    !byte %...#..#.            ;   #  #  #
    !byte %..#....#            ;  #    #  #
    !byte %...#..#.            ;   #  #  #
    !byte %..#.....            ;  #       #
    !byte %......##            ;      ##
    !byte %....##..            ;    ##  ##
    !byte %........
    !byte %..#.....
    !byte %.#......
    !byte %..#.....
    !byte %.#......
    !byte %..#.....
    !byte %........
    !byte %##......

    !byte %........            ;         #
    !byte %......#.            ;      #   #
    !byte %.....#..            ;     #   #  #
    !byte %......#.            ;      #   #  #
    !byte %.....#..            ;     #   #  #
    !byte %......#.            ;      #      #
    !byte %........            ;        ##  #
    !byte %......##            ;      ##  ##
    !byte %.#......
    !byte %..#.....
    !byte %.#..#...
    !byte %..#..#..
    !byte %.#..#...
    !byte %.....#..
    !byte %##..#...
    !byte %..##....

    !byte %........            ;         #   #
    !byte %.......#            ;       #  #   #
    !byte %......#.            ;      #  #   #
    !byte %.......#            ;       #  #   #
    !byte %......#.            ;      #  #   #
    !byte %.......#            ;       #      #
    !byte %......#.            ;      #   ##
    !byte %........            ;        ##  ##
    !byte %.#...#..
    !byte %..#...#.
    !byte %.#...#..
    !byte %..#...#.
    !byte %.#...#..
    !byte %......#.
    !byte %..##....
    !byte %##..##..

    !byte %.#...#..            ; #   #  #
    !byte %.#...#..            ; #   #  #
    !byte %#...#...            ;#   #    #
    !byte %#....#..            ;#    #   #
    !byte %.#..#...            ; #  #   #
    !byte %.#..#...            ; #  #   #
    !byte %..##..##            ;  ##  ##
    !byte %....##..            ;    ##
    !byte %#.......
    !byte %#.......
    !byte %.#......
    !byte %.#......
    !byte %#.......
    !byte %#.......
    !byte %........
    !byte %........

    !byte %...#....            ;   #      #
    !byte %...#....            ;   #     ##
    !byte %..#...#.            ;  #   # #  #
    !byte %..#..#.#            ;  #  # #   #
    !byte %...##...            ;   ##     #
    !byte %...#....            ;   #      #
    !byte %....##..            ;    ##  ##
    !byte %......##            ;      ##
    !byte %..#.....
    !byte %.##.....
    !byte %#..#....
    !byte %...#....
    !byte %..#.....
    !byte %..#.....
    !byte %##......
    !byte %........

    !byte %.....#..            ;     #      #
    !byte %.....#..            ;     #      #
    !byte %....#.##            ;    # ## #   #
    !byte %....#...            ;    #   # ## #
    !byte %.....#..            ;     #      #
    !byte %.....#..            ;     #      #
    !byte %......##            ;      ##  ##
    !byte %........            ;        ##
    !byte %....#...
    !byte %....#...
    !byte %.#...#..
    !byte %#.##.#..
    !byte %....#...
    !byte %....#...
    !byte %..##....
    !byte %##......

    !byte %.......#            ;       # #    #
    !byte %.......#            ;       #  #   #
    !byte %......#.            ;      #    #   #
    !byte %......#.            ;      #   #    #
    !byte %.......#            ;       #   #  #
    !byte %.......#            ;       #    # #
    !byte %........            ;        ##  ##
    !byte %........            ;          ##
    !byte %.#....#.
    !byte %..#...#.
    !byte %...#...#
    !byte %..#....#
    !byte %...#..#.
    !byte %....#.#.
    !byte %##..##..
    !byte %..##....

    !byte %....##..            ;    ##
    !byte %....##..            ;    ##
    !byte %....##..            ;    ##
    !byte %....##..            ;    ##
    !byte %....##..            ;    ##
    !byte %....##..            ;    ##
    !byte %....##..            ;    ##
    !byte %....##..            ;    ##
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %......##            ;      ##
    !byte %......##            ;      ##
    !byte %......##            ;      ##
    !byte %......##            ;      ##
    !byte %......##            ;      ##
    !byte %......##            ;      ##
    !byte %......##            ;      ##
    !byte %......##            ;      ##
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %........            ;        ##
    !byte %........            ;        ##
    !byte %........            ;        ##
    !byte %........            ;        ##
    !byte %........            ;        ##
    !byte %........            ;        ##
    !byte %........            ;        ##
    !byte %........            ;        ##
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %##......

    !byte %........            ;          ##
    !byte %........            ;          ##
    !byte %........            ;          ##
    !byte %........            ;          ##
    !byte %........            ;          ##
    !byte %........            ;          ##
    !byte %........            ;          ##
    !byte %........            ;          ##
    !byte %..##....
    !byte %..##....
    !byte %..##....
    !byte %..##....
    !byte %..##....
    !byte %..##....
    !byte %..##....
    !byte %..##....

    !byte %....##..            ;    ##
    !byte %....##..            ;    ##
    !byte %########            ;##########
    !byte %....##..            ;    ##
    !byte %.##....#            ; ##    ##
    !byte %##.#..#.            ;## #  # ##
    !byte %#.##..##            ;# ##  ## #
    !byte %.##....#            ; ##    ##
    !byte %........
    !byte %........
    !byte %##......
    !byte %........
    !byte %#.......
    !byte %##......
    !byte %.#......
    !byte %#.......

    !byte %......##            ;      ##
    !byte %......##            ;      ##
    !byte %..######            ;  ##########
    !byte %......##            ;      ##
    !byte %...##...            ;   ##    ##
    !byte %..#..#..            ;  #  #  ## #
    !byte %..####..            ;  ####  ## #
    !byte %...##...            ;   ##    ##
    !byte %........
    !byte %........
    !byte %####....
    !byte %........
    !byte %.##.....
    !byte %##.#....
    !byte %##.#....
    !byte %.##.....

    !byte %........            ;        ##
    !byte %........            ;        ##
    !byte %....####            ;    ##########
    !byte %........            ;        ##
    !byte %.....##.            ;     ##    ##
    !byte %....#.##            ;    # ##  ## #
    !byte %....##.#            ;    ## #  # ##
    !byte %.....##.            ;     ##    ##
    !byte %##......
    !byte %##......
    !byte %######..
    !byte %##......
    !byte %...##...
    !byte %..##.#..
    !byte %..#.##..
    !byte %...##...

    !byte %........            ;          ##
    !byte %........            ;          ##
    !byte %......##            ;      ##########
    !byte %........            ;          ##
    !byte %.......#            ;       ##    ##
    !byte %......#.            ;      #  #  ## #
    !byte %......##            ;      ####  ## #
    !byte %.......#            ;       ##    ##
    !byte %..##....
    !byte %..##....
    !byte %########
    !byte %..##....
    !byte %#....##.
    !byte %.#..##.#
    !byte %##..##.#
    !byte %#....##.

    !byte %.###....            ; ###
    !byte %.#.#....            ; # #
    !byte %.#####..            ; #####
    !byte %..##.#..            ;  ## #
    !byte %..#####.            ;  #####
    !byte %..#####.            ;  #####
    !byte %...##...            ;   ##
    !byte %..####..            ;  ####
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %...###..            ;   ###
    !byte %...#.#..            ;   # #
    !byte %...#####            ;   #####
    !byte %....##.#            ;    ## #
    !byte %....####            ;    #####
    !byte %....####            ;    #####
    !byte %.....##.            ;     ##
    !byte %....####            ;    ####
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %#.......
    !byte %#.......
    !byte %........
    !byte %........

    !byte %.....###            ;     ###
    !byte %.....#.#            ;     # #
    !byte %.....###            ;     #####
    !byte %......##            ;      ## #
    !byte %......##            ;      #####
    !byte %......##            ;      #####
    !byte %.......#            ;       ##
    !byte %......##            ;      ####
    !byte %........
    !byte %........
    !byte %##......
    !byte %.#......
    !byte %###.....
    !byte %###.....
    !byte %#.......
    !byte %##......

    !byte %.......#            ;       ###
    !byte %.......#            ;       # #
    !byte %.......#            ;       #####
    !byte %........            ;        ## #
    !byte %........            ;        #####
    !byte %........            ;        #####
    !byte %........            ;         ##
    !byte %........            ;        ####
    !byte %##......
    !byte %.#......
    !byte %####....
    !byte %##.#....
    !byte %#####...
    !byte %#####...
    !byte %.##.....
    !byte %####....

    !byte %.######.            ; ######
    !byte %.######.            ; ######
    !byte %####.###            ;#### ###
    !byte %#####.##            ;##### ##
    !byte %..####..            ;  ####
    !byte %.###.##.            ; ### ##
    !byte %.##.###.            ; ## ###
    !byte %.###.###            ; ### ###
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %...##.##            ;   ## ###
    !byte %...##.##            ;   ## ###
    !byte %...##.##            ;   ## ###
    !byte %...###.#            ;   ### ##
    !byte %....####            ;    ####
    !byte %.....##.            ;     ##
    !byte %.....##.            ;     ##
    !byte %.....###            ;     ###
    !byte %#.......
    !byte %#.......
    !byte %#.......
    !byte %#.......
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %.....###            ;     ######
    !byte %.....###            ;     ######
    !byte %....####            ;    #### ###
    !byte %....####            ;    ##### ##
    !byte %......##            ;      ####
    !byte %.....###            ;     ### ##
    !byte %.....##.            ;     ## ###
    !byte %.....###            ;     ### ###
    !byte %###.....
    !byte %###.....
    !byte %.###....
    !byte %#.##....
    !byte %##......
    !byte %.##.....
    !byte %###.....
    !byte %.###....

    !byte %.......#            ;       ######
    !byte %......##            ;      ########
    !byte %.....###            ;     ##########
    !byte %.....##.            ;     ## #### ##
    !byte %........            ;        #####
    !byte %.......#            ;       ### ## #
    !byte %......##            ;      ##    ###
    !byte %......##            ;      ###    #
    !byte %#####...
    !byte %######..
    !byte %#######.
    !byte %####.##.
    !byte %#####...
    !byte %##.##.#.
    !byte %....###.
    !byte %#....#..

    !byte %....##..            ;    ##
    !byte %...#.##.            ;   # ##
    !byte %..#.##.#            ;  # ## #
    !byte %.#..##..            ; #  ##  #
    !byte %#...##..            ;#   ##   #
    !byte %#...##..            ;#   ##   #
    !byte %.#..##..            ; #  ##  #
    !byte %..#.##.#            ;  # ## #
    !byte %........
    !byte %........
    !byte %........
    !byte %#.......
    !byte %.#......
    !byte %.#......
    !byte %#.......
    !byte %........

    !byte %......##            ;      ##
    !byte %......##            ;      ##
    !byte %.....#.#            ;     # ##
    !byte %.....###            ;     ####
    !byte %....#.##            ;    # ## #
    !byte %....#.##            ;    # ## #
    !byte %.....###            ;     ####
    !byte %.....#.#            ;     # ##
    !byte %........
    !byte %........
    !byte %#.......
    !byte %#.......
    !byte %.#......
    !byte %.#......
    !byte %#.......
    !byte %#.......

    !byte %........            ;        ##
    !byte %........            ;        ##
    !byte %........            ;        ##
    !byte %........            ;        ##
    !byte %........            ;        #
    !byte %........            ;        #
    !byte %........            ;        ##
    !byte %........            ;        ##
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %#.......
    !byte %#.......
    !byte %##......
    !byte %##......

    !byte %........            ;          ##
    !byte %........            ;         ## #
    !byte %........            ;        # ## #
    !byte %........            ;        # ## #
    !byte %.......#            ;       #  ##  #
    !byte %.......#            ;       #  ##  #
    !byte %........            ;        # ## #
    !byte %........            ;        # ## #
    !byte %..##....
    !byte %.##.#...
    !byte %#.##.#..
    !byte %#.##.#..
    !byte %..##..#.
    !byte %..##..#.
    !byte %#.##.#..
    !byte %#.##.#..

    !byte %...#.##.            ;   # ##
    !byte %....##..            ;    ##
    !byte %..##.###            ;  ## ###
    !byte %.#..##..            ; #  ##
    !byte %.#######            ; ##########
    !byte %.#######            ; ##########
    !byte %..#.....            ;  #      #
    !byte %...#.###            ;   # ###
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %###.....
    !byte %###.....
    !byte %.#......
    !byte %........

    !byte %......##            ;      ##
    !byte %......##            ;      ##
    !byte %....###.            ;    ### ##
    !byte %......##            ;      ##  #
    !byte %..######            ;  #########
    !byte %..######            ;  ##########
    !byte %...#....            ;   #      #
    !byte %.....###            ;     ### #
    !byte %........
    !byte %........
    !byte %##......
    !byte %..#.....
    !byte %###.....
    !byte %####....
    !byte %..#.....
    !byte %.#......

    !byte %........            ;        ##
    !byte %........            ;        ##
    !byte %.......#            ;       ### #
    !byte %.....#..            ;     #  ##  #
    !byte %....####            ;    ##########
    !byte %....####            ;    #########
    !byte %........            ;            #
    !byte %......##            ;      ### ##
    !byte %##......
    !byte %##......
    !byte %##.#....
    !byte %##..#...
    !byte %######..
    !byte %#####...
    !byte %....#...
    !byte %#.##....

    !byte %........            ;         ## #
    !byte %........            ;          ##
    !byte %........            ;        # ###
    !byte %.......#            ;       #  ##  #
    !byte %......##            ;      ##########
    !byte %.......#            ;       #########
    !byte %.......#            ;       #
    !byte %........            ;        ## ###
    !byte %.##.#...
    !byte %..##....
    !byte %#.###...
    !byte %..##..#.
    !byte %########
    !byte %########
    !byte %........
    !byte %##.###..

    !byte %.##....#            ; ##    ##
    !byte %#.##..#.            ;# ##  #  #
    !byte %#.##..##            ;# ##  ####
    !byte %.##....#            ; ##    ##
    !byte %....##..            ;    ##
    !byte %########            ;##########
    !byte %.#.#..#.            ; # #  # #
    !byte %...#..#.            ;   #  #
    !byte %#.......
    !byte %.#......
    !byte %##......
    !byte %#.......
    !byte %........
    !byte %##......
    !byte %#.......
    !byte %........

    !byte %...##...            ;   ##    ##
    !byte %..#..#..            ;  #  #  ## #
    !byte %..####..            ;  ####  ## #
    !byte %...##...            ;   ##    ##
    !byte %......##            ;      ##
    !byte %..######            ;  ##########
    !byte %...#.#..            ;   # #  # #
    !byte %.....#..            ;     #  #
    !byte %.##.....
    !byte %##.#....
    !byte %##.#....
    !byte %.##.....
    !byte %........
    !byte %####....
    !byte %#.#.....
    !byte %#.......

    !byte %.....##.            ;     ##    ##
    !byte %....##.#            ;    ## #  ####
    !byte %....##.#            ;    ## #  #  #
    !byte %.....##.            ;     ##    ##
    !byte %........            ;        ##
    !byte %....####            ;    ##########
    !byte %.....#.#            ;     # #  # #
    !byte %.......#            ;       #  #
    !byte %...##...
    !byte %..####..
    !byte %..#..#..
    !byte %...##...
    !byte %##......
    !byte %######..
    !byte %..#.#...
    !byte %..#.....

    !byte %.......#            ;       ##    ##
    !byte %......##            ;      ####  # ##
    !byte %......#.            ;      #  #  # ##
    !byte %.......#            ;       ##    ##
    !byte %........            ;          ##
    !byte %......##            ;      ##########
    !byte %.......#            ;       # #  # #
    !byte %........            ;         #  #
    !byte %#....##.
    !byte %##..#.##
    !byte %.#..#.##
    !byte %#....##.
    !byte %..##....
    !byte %########
    !byte %.#..#.#.
    !byte %.#..#...

    !byte %...#..#.            ;   #  #
    !byte %...####.            ;   ####
    !byte %....##..            ;    ##
    !byte %....##..            ;    ##
    !byte %....##..            ;    ##
    !byte %....##..            ;    ##
    !byte %...####.            ;   ####
    !byte %..######            ;  ######
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %.....#..            ;     #  #
    !byte %.....###            ;     ####
    !byte %......##            ;      ##
    !byte %......##            ;      ##
    !byte %.....###            ;     ####
    !byte %....####            ;    ######
    !byte %........            ;
    !byte %........            ;
    !byte %#.......
    !byte %#.......
    !byte %........
    !byte %........
    !byte %#.......
    !byte %##......
    !byte %........
    !byte %........

    !byte %.......#            ;       #  #
    !byte %.......#            ;       ####
    !byte %.......#            ;       ####
    !byte %......##            ;      ######
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %..#.....
    !byte %###.....
    !byte %###.....
    !byte %####....
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %........            ;         #  #
    !byte %........            ;         ####
    !byte %........            ;          ##
    !byte %........            ;          ##
    !byte %........            ;         ####
    !byte %........            ;        ######
    !byte %........            ;
    !byte %........            ;
    !byte %.#..#...
    !byte %.####...
    !byte %..##....
    !byte %..##....
    !byte %.####...
    !byte %######..
    !byte %........
    !byte %........

    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %..######            ;  ##########
    !byte %..#.....            ;  #      ###
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %####....
    !byte %.###....

    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %....####            ;    ##########
    !byte %....#...            ;    #      ###
    !byte %....####            ;    ##########
    !byte %....#...            ;    #     #  #
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %######..
    !byte %...###..
    !byte %######..
    !byte %..#..#..

    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %......##            ;      ##########
    !byte %......#.            ;      #      ###
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %########
    !byte %.....###

    !byte %........            ;
    !byte %........            ;
    !byte %########            ;##########
    !byte %#......#            ;#      ###
    !byte %########            ;##########
    !byte %#.....#.            ;#     #  #
    !byte %#######.            ;#######  #
    !byte %########            ;##########
    !byte %........
    !byte %........
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %.#......
    !byte %.#......
    !byte %##......

    !byte %..######            ;  ##########
    !byte %..#.....            ;  #     #  #
    !byte %..######            ;  #######  #
    !byte %..######            ;  ##########
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %####....
    !byte %#..#....
    !byte %#..#....
    !byte %####....
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %....####            ;    #######  #
    !byte %....####            ;    ##########
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %###..#..
    !byte %######..
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %......##            ;      ##########
    !byte %......#.            ;      #     #  #
    !byte %......##            ;      #######  #
    !byte %......##            ;      ##########
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %########
    !byte %....#..#
    !byte %#####..#
    !byte %########
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %........            ;
    !byte %....#...            ;    #
    !byte %...#.#..            ;   # #
    !byte %..#.#.#.            ;  # # #
    !byte %.#.#.#.#            ; # # # #
    !byte %.#..#.#.            ; #  # #
    !byte %#....#..            ;#    #
    !byte %#.......            ;#       ##
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %##......

    !byte %..#.#.#.            ;  # # #
    !byte %...#.#.#            ;   # # #
    !byte %..#.#.#.            ;  # # #
    !byte %...#.#.#            ;   # # #
    !byte %..#.....            ;  #
    !byte %..#.....            ;  #
    !byte %..#.....            ;  #
    !byte %..#.....            ;  #        ##
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %...##...

    !byte %........            ;
    !byte %...#....            ;   #
    !byte %..#.#...            ;  # #
    !byte %.#.#.#..            ; # # #
    !byte %#.#.#.#.            ;# # # #
    !byte %.#.#...#            ; # #   #
    !byte %..#....#            ;  #    #
    !byte %.......#            ;       #    ##
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %....##..

    !byte %...#.#.#            ;   # # # #
    !byte %..#.#.#.            ;  # # # #
    !byte %...#.#.#            ;   # # # #
    !byte %..#.#.#.            ;  # # # #
    !byte %........            ;         #
    !byte %........            ;         #
    !byte %........            ;         #
    !byte %........            ;         #    ##
    !byte %.#......
    !byte %#.......
    !byte %.#......
    !byte %#.......
    !byte %.#......
    !byte %.#......
    !byte %.#......
    !byte %.#....##

    !byte %#.......            ;#       ##
    !byte %.#.....#            ; #     #
    !byte %.#######            ; ########
    !byte %..######            ;  ########
    !byte %...#####            ;   ######
    !byte %....####            ;    ####
    !byte %....#.#.            ;    # # #
    !byte %...#..#.            ;   #  #  #
    !byte %##......
    !byte %........
    !byte %#.......
    !byte %##......
    !byte %#.......
    !byte %........
    !byte %#.......
    !byte %.#......

    !byte %..#.....            ;  #        ##
    !byte %...#....            ;   #      #
    !byte %...#####            ;   #########
    !byte %....####            ;    #########
    !byte %.....###            ;     #######
    !byte %......##            ;      #####
    !byte %......#.            ;      # #  #
    !byte %.....#..            ;     #  #   #
    !byte %...##...
    !byte %..#.....
    !byte %####....
    !byte %#####...
    !byte %####....
    !byte %###.....
    !byte %#..#....
    !byte %#...#...

    !byte %......#.            ;      #     ##
    !byte %......#.            ;      #    #
    !byte %......##            ;      #######
    !byte %......##            ;      ########
    !byte %.......#            ;       ######
    !byte %........            ;        ####
    !byte %........            ;        # # #
    !byte %.......#            ;       #  #  #
    !byte %....##..
    !byte %...#....
    !byte %#####...
    !byte %######..
    !byte %#####...
    !byte %####....
    !byte %#.#.#...
    !byte %..#..#..

    !byte %........            ;        #     ##
    !byte %........            ;        #    #
    !byte %........            ;        #######
    !byte %........            ;        ########
    !byte %........            ;         ######
    !byte %........            ;          ####
    !byte %........            ;          # # #
    !byte %........            ;         #  #  #
    !byte %#.....##
    !byte %#....#..
    !byte %#######.
    !byte %########
    !byte %.######.
    !byte %..####..
    !byte %..#.#.#.
    !byte %.#..#..#

    !byte %.######.            ; ######
    !byte %#..##..#            ;#  ##  #
    !byte %########            ;########
    !byte %##.##.##            ;## ## ##
    !byte %###..###            ;###  ###
    !byte %.######.            ; ######
    !byte %..#..#..            ;  #  #
    !byte %..#..#..            ;  #  #
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %........            ;
    !byte %....####            ;    ######
    !byte %...#..##            ;   #  ##  #
    !byte %...#####            ;   ########
    !byte %...##.##            ;   ## ## ##
    !byte %...###..            ;   ###  ###
    !byte %....####            ;    ######
    !byte %....#...            ;    #    #
    !byte %........
    !byte %##......
    !byte %..#.....
    !byte %###.....
    !byte %.##.....
    !byte %###.....
    !byte %##......
    !byte %.#......

    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %.....###            ;     ######
    !byte %....#..#            ;    #  ##  #
    !byte %....####            ;    ########
    !byte %....##.#            ;    ## ## ##
    !byte %....###.            ;    ###  ###
    !byte %........
    !byte %........
    !byte %........
    !byte %###.....
    !byte %#..#....
    !byte %####....
    !byte %#.##....
    !byte %.###....

    !byte %........            ;
    !byte %.......#            ;       ######
    !byte %......#.            ;      #  ##  #
    !byte %......##            ;      ########
    !byte %......##            ;      ## ## ##
    !byte %......##            ;      ###  ###
    !byte %.......#            ;       ######
    !byte %.......#            ;       #    #
    !byte %........
    !byte %#####...
    !byte %.##..#..
    !byte %######..
    !byte %.##.##..
    !byte %#..###..
    !byte %#####...
    !byte %....#...

    !byte %..#..#..            ;  #  #
    !byte %.#....#.            ; #    #
    !byte %.#....#.            ; #    #
    !byte %.#....#.            ; #    #
    !byte %#......#            ;#      #
    !byte %#......#            ;#      #
    !byte %##....##            ;##    ##
    !byte %##....##            ;##    ##
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %...#....            ;   #      #
    !byte %...#....            ;   #      #
    !byte %..#.....            ;  #        #
    !byte %..#.....            ;  #        #
    !byte %.#......            ; #          #
    !byte %.#......            ; #         ##
    !byte %.##.....            ; ##        ##
    !byte %.##.....            ; ##
    !byte %..#.....
    !byte %..#.....
    !byte %...#....
    !byte %...#....
    !byte %....#...
    !byte %...##...
    !byte %...##...
    !byte %........

    !byte %.....###            ;     ######
    !byte %....#...            ;    #      #
    !byte %...#....            ;   #        #
    !byte %..#.....            ;  #          #
    !byte %.#......            ; #            #
    !byte %#.......            ;#              #
    !byte %##......            ;##            ##
    !byte %##......            ;##            ##
    !byte %###.....
    !byte %...#....
    !byte %....#...
    !byte %.....#..
    !byte %......#.
    !byte %.......#
    !byte %......##
    !byte %......##

    !byte %......#.            ;      #      #
    !byte %......#.            ;      #      #
    !byte %.....#..            ;     #        #
    !byte %.....#..            ;     #        #
    !byte %....#...            ;    #          #
    !byte %....##..            ;    ##         #
    !byte %....##..            ;    ##        ##
    !byte %........            ;              ##
    !byte %.....#..
    !byte %.....#..
    !byte %......#.
    !byte %......#.
    !byte %.......#
    !byte %.......#
    !byte %......##
    !byte %......##

    !byte %.....##.            ;     ##
    !byte %....##..            ;    ##
    !byte %...##...            ;   ##
    !byte %..###...            ;  ###
    !byte %.###.#..            ; ### #
    !byte %##..#.#.            ;##  # #  #
    !byte %#....#.#            ;#    # ####
    !byte %......##            ;      #####
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %.#......
    !byte %###.....
    !byte %###.....

    !byte %.......#            ;       ##
    !byte %......##            ;      ##
    !byte %.....##.            ;     ##
    !byte %....###.            ;    ###
    !byte %...###.#            ;   ### #
    !byte %..##..#.            ;  ##  # # #
    !byte %..#....#            ;  #    # ###
    !byte %........            ;        ####
    !byte %#.......
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %#.#.....
    !byte %.###....
    !byte %####....

    !byte %........            ;          ##
    !byte %........            ;         ##
    !byte %........            ;        ##
    !byte %.......#            ;       ###
    !byte %......##            ;      ### #
    !byte %.....##.            ;     ##  # # #
    !byte %.....#..            ;     #    # ###
    !byte %........            ;           ####
    !byte %..##....
    !byte %.##.....
    !byte %##......
    !byte %##......
    !byte %#.#.....
    !byte %.#.#.#..
    !byte %..#.###.
    !byte %...####.

    !byte %........            ;            ##
    !byte %........            ;           ##
    !byte %........            ;          ##
    !byte %........            ;         ##
    !byte %........            ;        ####
    !byte %.......#            ;       ## # # #
    !byte %.......#            ;       #   # ###
    !byte %........            ;            ####
    !byte %....##..
    !byte %...##...
    !byte %..##....
    !byte %.##.....
    !byte %####....
    !byte %#.#.#.#.
    !byte %...#.###
    !byte %....####

    !byte %.....###            ;     ###  #
    !byte %##..####            ;##  #### ##
    !byte %##.###..            ;## ###    #
    !byte %########            ;###########
    !byte %###...#.            ;###   #
    !byte %##..#...            ;##  #   #
    !byte %##.#.#.#            ;## # # # #
    !byte %....#...            ;    #   #
    !byte %..#.....
    !byte %.##.....
    !byte %..#.....
    !byte %###.....
    !byte %........
    !byte %#.......
    !byte %.#......
    !byte %#.......

    !byte %.##....#            ; ##    ##  #
    !byte %.##...##            ; ##   ### ##
    !byte %.##..##.            ; ##  ##    #
    !byte %.#######            ; ###########
    !byte %.####...            ; ####   #
    !byte %.##...#.            ; ##   #   #
    !byte %.##..#.#            ; ##  # # # #
    !byte %......#.            ;      #   #
    !byte %#..#....
    !byte %#.##....
    !byte %...#....
    !byte %####....
    !byte %#.......
    !byte %..#.....
    !byte %.#.#....
    !byte %..#.....

    !byte %..##....            ;  ##      ##  #
    !byte %..##....            ;  ##     ### ##
    !byte %..##....            ;  ##    ##    #
    !byte %..######            ;  #############
    !byte %..#####.            ;  #####    #
    !byte %..##....            ;  ##     #   #
    !byte %..##....            ;  ##    # # # #
    !byte %........            ;         #   #
    !byte %..##..#.
    !byte %.###.##.
    !byte %##....#.
    !byte %#######.
    !byte %...#....
    !byte %.#...#..
    !byte %#.#.#.#.
    !byte %.#...#..

    !byte %........            ;           ##  #
    !byte %.....##.            ;     ##   ### ##
    !byte %.....##.            ;     ##  #     #
    !byte %.....###            ;     ###########
    !byte %.....###            ;     ####   #
    !byte %.....##.            ;     ##   #   #
    !byte %.....##.            ;     ##  # # # #
    !byte %........            ;          #   #
    !byte %...##..#
    !byte %..###.##
    !byte %.#.....#
    !byte %########
    !byte %#...#...
    !byte %..#...#.
    !byte %.#.#.#.#
    !byte %..#...#.

    ; skylab crashing sprites in 4 colour 'MODE 1' format
skylab4Sprite
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %..#...#.
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %#...#...
    !byte %...#...#
    !byte %........
    !byte %........
    !byte %..#...#.
    !byte %........

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %#...#...
    !byte %........
    !byte %........
    !byte %..#...#.
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %.#...#..
    !byte %..#...#.

    !byte %........
    !byte %...#...#
    !byte %#..##..#
    !byte %.##..##.
    !byte %##..##..
    !byte %.##..##.
    !byte %........
    !byte %##..##..
    !byte %.###.###
    !byte %##.###.#
    !byte %.###.###
    !byte %.#...#..
    !byte %###.###.
    !byte %.#...#..
    !byte %#..##..#
    !byte %.#...#..

    !byte %...#...#
    !byte %..#...#.
    !byte %#...#...
    !byte %........
    !byte %........
    !byte %........
    !byte %#...#...
    !byte %.#...#..
    !byte %.#...#..
    !byte %........
    !byte %........
    !byte %.#...#..
    !byte %........
    !byte %..#...#.
    !byte %.#...#..
    !byte %#...#...

skylab5Sprite
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %...#...#
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %..#...#.
    !byte %........
    !byte %........

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %#...#...
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %..#...#.
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %...#...#
    !byte %#..##..#
    !byte %.##..##.
    !byte %........
    !byte %........
    !byte %..#...#.
    !byte %........
    !byte %.###.###
    !byte %##.###.#
    !byte %.###.###
    !byte %.#...#..

    !byte %........
    !byte %........
    !byte %........
    !byte %..#...#.
    !byte %...#...#
    !byte %..#...#.
    !byte %#...#...
    !byte %###.###.
    !byte %........
    !byte %........
    !byte %.#...#..
    !byte %..#...#.
    !byte %.#...#..
    !byte %........
    !byte %........
    !byte %........

eugeneSprite
    !byte %........            ;
    !byte %......##            ;       ####
    !byte %....####            ;     ########
    !byte %...#####            ;    ##########
    !byte %..##...#            ;   ##   ##   ##
    !byte %....###.            ;     ###  ###
    !byte %.##.####            ;  ## ######## ##
    !byte %#.#.###.            ; # # ###  ### # #
    !byte %........            ; # ##   ##   ## #
    !byte %##......            ; #  ##########  #
    !byte %####....            ; #  ## #### ##  #
    !byte %#####...            ; #   ##    ##   #
    !byte %#...##..            ;  #   ######   #
    !byte %.###....            ;       #  #
    !byte %####.##.            ;     ###  ###
    !byte %.###.#.#            ;

    !byte %#.##...#
    !byte %#..#####
    !byte %#..##.##
    !byte %#...##..
    !byte %.#...###
    !byte %......#.
    !byte %....###.
    !byte %........
    !byte %#...##.#
    !byte %#####..#
    !byte %##.##..#
    !byte %..##...#
    !byte %###...#.
    !byte %.#......
    !byte %.###....
    !byte %........

pedestalSprite
    !byte %########             ; ################
    !byte %.###..#.             ;  ###  #  #  ###
    !byte %#...#.#.             ; #   # #  # #   #
    !byte %#.#.#.#.             ; # # # #  # # # #
    !byte %.#..#.#.             ;  #  # #  # #  #
    !byte %...#..#.             ;    #  #  #  #
    !byte %..#...#.             ;   #   #  #   #
    !byte %..#.#.#.             ;   # # #  # # #
    !byte %########             ;   # # #  # # #
    !byte %.#..###.             ;   # # #  # # #
    !byte %.#.#...#             ;   # # #  # # #
    !byte %.#.#.#.#             ;   # # #  # # #
    !byte %.#.#..#.             ;   # # #  # # #
    !byte %.#..#...             ;   # # #  # # #
    !byte %.#...#..             ;   # # #  # # #
    !byte %.#.#.#..             ;   # # #  # # #

    !byte %..#.#.#.
    !byte %..#.#.#.
    !byte %..#.#.#.
    !byte %..#.#.#.
    !byte %..#.#.#.
    !byte %..#.#.#.
    !byte %..#.#.#.
    !byte %..#.#.#.
    !byte %.#.#.#..
    !byte %.#.#.#..
    !byte %.#.#.#..
    !byte %.#.#.#..
    !byte %.#.#.#..
    !byte %.#.#.#..
    !byte %.#.#.#..
    !byte %.#.#.#..


    !byte %........            ;
    !byte %........            ;
    !byte %....#...            ;    #
    !byte %.......#            ;       #
    !byte %........            ;        #
    !byte %..#.....            ;  #
    !byte %......#.            ;      #      #
    !byte %........            ;          #   #
    !byte %........            ;     ###   # #
    !byte %........            ;   ### #  #
    !byte %........            ;#  # ####
    !byte %........            ; ##  #       #
    !byte %#.......            ;##  ###
    !byte %........            ; ##  #        #
    !byte %.....#..            ;    #  ##    #
    !byte %..#...#.            ;##   #   #  #

    !byte %.....###
    !byte %...###.#
    !byte %#..#.###
    !byte %.##..#..
    !byte %##..###.
    !byte %.##..#..
    !byte %....#..#
    !byte %##...#..
    !byte %...#.#..
    !byte %..#.....
    !byte %#.......
    !byte %.....#..
    !byte %........
    !byte %......#.
    !byte %#....#..
    !byte %.#..#...

    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %......#.            ;      #
    !byte %...#....            ;   #
    !byte %........            ;        #
    !byte %........            ;  #
    !byte %........            ;
    !byte %........            ;      #      #
    !byte %........            ;          #   #
    !byte %........            ;     ###   # #
    !byte %........            ;   ### #  #
    !byte %........            ;#  # ####
    !byte %#.......            ; ##  #  ###

    !byte %..#.....
    !byte %........
    !byte %......#.
    !byte %........
    !byte %.....###
    !byte %...###.#
    !byte %#..#.###
    !byte %.##..#..
    !byte %........
    !byte %........
    !byte %.....#..
    !byte %..#...#.
    !byte %...#.#..
    !byte %..#.....
    !byte %#.......
    !byte %###.....

kongBeastSprite
    !byte %...#..##            ;   #  ####  #
    !byte %...###.#            ;   ### ## ###
    !byte %....####            ;    ########
    !byte %.....##.            ;     ##  ##
    !byte %.....#.#            ;     # ## #
    !byte %......#.            ;      #  #
    !byte %.....###            ;     ######
    !byte %....####            ;    ########
    !byte %##..#...            ;   ##########
    !byte %#.###...            ;  ##  ####  ##
    !byte %####....            ; ##   ####   ##
    !byte %.##.....            ; #   ##  ##   #
    !byte %#.#.....            ;  # ##    ## #
    !byte %.#......            ;     ##  ##
    !byte %###.....            ;      #  #
    !byte %####....            ;    ###  ###

    !byte %...#####
    !byte %..##..##
    !byte %.##...##
    !byte %.#...##.
    !byte %..#.##..
    !byte %.....##.
    !byte %......#.
    !byte %....###.
    !byte %#####...
    !byte %##..##..
    !byte %##...##.
    !byte %.##...#.
    !byte %..##.#..
    !byte %.##.....
    !byte %.#......
    !byte %.###....

    !byte %....#.##            ;    # #### #
    !byte %....##.#            ;    ## ## ##
    !byte %....####            ;    ########
    !byte %.....##.            ;     ##  ##
    !byte %.....#.#            ;     # ## #
    !byte %......#.            ;      #  #
    !byte %......##            ;      ####
    !byte %...#####            ;   ##########
    !byte %##.#....            ; ##############
    !byte %#.##....            ;###  ######  ###
    !byte %####....            ;#     ####     #
    !byte %.##.....            ;##   ######   ##
    !byte %#.#.....            ;     ##  ##
    !byte %.#......            ;    ##    ##
    !byte %##......            ;    #      #
    !byte %#####...            ;  ###      ###

    !byte %.#######
    !byte %###..###
    !byte %#.....##
    !byte %##...###
    !byte %.....##.
    !byte %....##..
    !byte %....#...
    !byte %..###...
    !byte %#######.
    !byte %###..###
    !byte %##.....#
    !byte %###...##
    !byte %.##.....
    !byte %..##....
    !byte %...#....
    !byte %...###..

    !byte %...###..            ;   ###    ###
    !byte %.....##.            ;     ##  ##
    !byte %....##..            ;    ##    ##
    !byte %.....##.            ;     ##  ##
    !byte %.##...##            ; ##   ####   ##
    !byte %..#..###            ;  #  ######  #
    !byte %.##..###            ; ##  ######  ##
    !byte %..##.###            ;  ## ###### ##
    !byte %..###...            ;   ##########
    !byte %.##.....            ;    ########
    !byte %..##....            ;      #  #
    !byte %.##.....            ;     # ## #
    !byte %##...##.            ;     ##  ##
    !byte %###..#..            ;    ########
    !byte %###..##.            ;    ## ## ##
    !byte %###.##..            ;    # #### #

    !byte %...#####
    !byte %....####
    !byte %......#.
    !byte %.....#.#
    !byte %.....##.
    !byte %....####
    !byte %....##.#
    !byte %....#.##
    !byte %#####...
    !byte %####....
    !byte %.#......
    !byte %#.#.....
    !byte %.##.....
    !byte %####....
    !byte %#.##....
    !byte %##.#....

    !byte %.###....            ; ###        ###
    !byte %...##...            ;   ##      ##
    !byte %....##..            ;    ##    ##
    !byte %.....##.            ;     ##  ##
    !byte %.##...##            ; ##   ####   ##
    !byte %..#..###            ;  #  ######  #
    !byte %.##..###            ; ##  ######  ##
    !byte %..##.###            ;  ## ###### ##
    !byte %....###.            ;   ##########
    !byte %...##...            ;    ########
    !byte %..##....            ;      #  #
    !byte %.##.....            ;     # ## #
    !byte %##...##.            ;   # ##  ## #
    !byte %###..#..            ;    ########
    !byte %###..##.            ;    ## ## ##
    !byte %###.##..            ;     ######

    !byte %...#####
    !byte %....####
    !byte %......#.
    !byte %.....#.#
    !byte %...#.##.
    !byte %....####
    !byte %....##.#
    !byte %.....###
    !byte %#####...
    !byte %####....
    !byte %.#......
    !byte %#.#.....
    !byte %.##.#...
    !byte %####....
    !byte %#.##....
    !byte %###.....

    !byte %........            ;
    !byte %........            ;
    !byte %..######            ;  ############
    !byte %.##...##            ; ##   ####   ##
    !byte %###.#.##            ;### # #### # ###
    !byte %###.#...            ;### #      # ###
    !byte %....####            ;    ########
    !byte %.....###            ;     ######
    !byte %........            ;    ##    ##
    !byte %........            ;    # #### #
    !byte %######..            ;   ## #### ##
    !byte %##...##.            ;   ###    ###
    !byte %##.#.###            ;  ############
    !byte %...#.###            ;  ############
    !byte %####....            ;  ############
    !byte %###.....            ;

    !byte %....##..
    !byte %....#.##
    !byte %...##.##
    !byte %...###..
    !byte %..######
    !byte %..######
    !byte %..######
    !byte %........
    !byte %..##....
    !byte %##.#....
    !byte %##.##...
    !byte %..###...
    !byte %######..
    !byte %######..
    !byte %######..
    !byte %........

    !byte %..####..            ;  ####
    !byte %.#######            ; #########
    !byte %.#######            ; ############
    !byte %.##...##            ; ##   ####   ##
    !byte %....#...            ;    #    # # ###
    !byte %....#...            ;    #      # ###
    !byte %....####            ;    ######## ###
    !byte %.....###            ;     ######
    !byte %........            ;    ##    ##
    !byte %##......            ;    # #### #
    !byte %#####...            ;   ## #### ##
    !byte %##...##.            ;   ###    ###
    !byte %.#.#.###            ;  ############
    !byte %...#.###            ;  ############
    !byte %####.###            ;  ############
    !byte %###.....            ;

    !byte %....##..
    !byte %....#.##
    !byte %...##.##
    !byte %...###..
    !byte %..######
    !byte %..######
    !byte %..######
    !byte %........
    !byte %..##....
    !byte %##.#....
    !byte %##.##...
    !byte %..###...
    !byte %######..
    !byte %######..
    !byte %######..
    !byte %........

    !byte %........            ;
    !byte %........            ;
    !byte %..######            ;  ############
    !byte %.##...##            ; ##   ####   ##
    !byte %###.#...            ;### #      # ###
    !byte %###.#...            ;### #      # ###
    !byte %....####            ;    ########
    !byte %.....###            ;     ######
    !byte %........            ;    ##    ##
    !byte %........            ;    # #### #
    !byte %######..            ;   ## #### ##
    !byte %##...##.            ;   ###    ###
    !byte %...#.###            ;  ############
    !byte %...#.###            ;  ############
    !byte %####....            ;  ############
    !byte %###.....            ;

    !byte %....##..
    !byte %....#.##
    !byte %...##.##
    !byte %...###..
    !byte %..######
    !byte %..######
    !byte %..######
    !byte %........
    !byte %..##....
    !byte %##.#....
    !byte %##.##...
    !byte %..###...
    !byte %######..
    !byte %######..
    !byte %######..
    !byte %........

    !byte %........            ;          ####
    !byte %......##            ;      #########
    !byte %...#####            ;   ############
    !byte %.##...##            ; ##   ####   ##
    !byte %###.#...            ;### #      #
    !byte %###.#...            ;### #      #
    !byte %###.####            ;### ########
    !byte %.....###            ;     ######
    !byte %..####..            ;    ##    ##
    !byte %#######.            ;    # #### #
    !byte %#######.            ;   ## #### ##
    !byte %##...##.            ;   ###    ###
    !byte %...#....            ;  ############
    !byte %...#....            ;  ############
    !byte %####....            ;  ############
    !byte %###.....            ;

    !byte %....##..
    !byte %....#.##
    !byte %...##.##
    !byte %...###..
    !byte %..######
    !byte %..######
    !byte %..######
    !byte %........
    !byte %..##....
    !byte %##.#....
    !byte %##.##...
    !byte %..###...
    !byte %######..
    !byte %######..
    !byte %######..
    !byte %........

    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %......##            ;      ####
    !byte %....##..            ;    ##    ##
    !byte %...#....            ;   #        #
    !byte %..#.....            ;  #          #
    !byte %.#......            ; #            #
    !byte %........            ;#              #
    !byte %........            ; #            #
    !byte %........            ;  #          #
    !byte %##......            ;## #        # ##
    !byte %..##....            ;  # ##    ## #
    !byte %....#...            ; #  # #### #  #
    !byte %.....#..            ;   #  #  #  #
    !byte %......#.            ;      #  #

    !byte %#.......
    !byte %.#......
    !byte %..#.....
    !byte %##.#....
    !byte %..#.##..
    !byte %.#..#.##
    !byte %...#..#.
    !byte %......#.
    !byte %.......#
    !byte %......#.
    !byte %.....#..
    !byte %....#.##
    !byte %..##.#..
    !byte %##.#..#.
    !byte %.#..#...
    !byte %.#......

    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %......##            ;      ####
    !byte %....##..            ;    ##    ##
    !byte %...#....            ;   #        #
    !byte %..#.....            ;  #          #
    !byte %.#......            ; #            #
    !byte %........            ;#####      #####
    !byte %........            ; # # ###### # #
    !byte %........            ;  # # #### # #
    !byte %##......            ;   #  #  #  #
    !byte %..##....            ;    ##    ##
    !byte %....#...            ;      ####
    !byte %.....#..            ;
    !byte %......#.            ;

    !byte %#####...
    !byte %.#.#.###
    !byte %..#.#.##
    !byte %...#..#.
    !byte %....##..
    !byte %......##
    !byte %........
    !byte %........
    !byte %...#####
    !byte %###.#.#.
    !byte %##.#.#..
    !byte %.#..#...
    !byte %..##....
    !byte %##......
    !byte %........
    !byte %........

    !byte %.....#..            ;     #    #
    !byte %.....#..            ;     #    #
    !byte %...#..#.            ;   #  #  #  #
    !byte %.#..#.##            ; #  # #### #  #
    !byte %..#.##..            ;  # ##    ## #
    !byte %#..#..##            ;#  #  ####  #  #
    !byte %#.#..###            ;# #  ######  # #
    !byte %.#...##.            ; #   ##  ##   #
    !byte %..#.....            ;#    ##  ##    #
    !byte %..#.....            ; #   ######   #
    !byte %.#..#...            ;  #   ####   #
    !byte %##.#..#.            ;   #        #
    !byte %..##.#..            ;    ##    ##
    !byte %##..#..#            ;      ####
    !byte %###..#.#            ;
    !byte %.##...#.            ;

    !byte %#....##.
    !byte %.#...###
    !byte %..#...##
    !byte %...#....
    !byte %....##..
    !byte %......##
    !byte %........
    !byte %........
    !byte %.##....#
    !byte %###...#.
    !byte %##...#..
    !byte %....#...
    !byte %..##....
    !byte %##......
    !byte %........
    !byte %........

    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %......##            ;      ####
    !byte %....##..            ;    ##    ##
    !byte %...#..#.            ;   #  #  #  #
    !byte %..#.#.#.            ;  # # #  # # #
    !byte %.#.#####            ; # ########## #
    !byte %........            ;#### ##  #######
    !byte %........            ; #   ######   #
    !byte %........            ;  #   ####   #
    !byte %##......            ;   #        #
    !byte %..##....            ;    ##    ##
    !byte %.#..#...            ;      ####
    !byte %.#.#.#..            ;
    !byte %#####.#.            ;

    !byte %####.##.
    !byte %.#...###
    !byte %..#...##
    !byte %...#....
    !byte %....##..
    !byte %......##
    !byte %........
    !byte %........
    !byte %.#######
    !byte %###...#.
    !byte %##...#..
    !byte %....#...
    !byte %..##....
    !byte %##......
    !byte %........
    !byte %........

    !byte %......##            ;      ####
    !byte %########            ;################
    !byte %#.#.#.##            ;# # # #### # # #
    !byte %########            ;################
    !byte %...#..##            ;   #  ####  #
    !byte %..#.#..#            ;  # #  ##  # #
    !byte %...#.#.#            ;   # # ## # #
    !byte %....#.##            ;    # #### #
    !byte %##......            ;     # ## #
    !byte %########            ;      ####
    !byte %##.#.#.#            ;      ####
    !byte %########            ;     # ## #
    !byte %##..#...            ;    # #  # #
    !byte %#..#.#..            ;   # #    # #
    !byte %#.#.#...            ;  # #      # #
    !byte %##.#....            ;   #        #

    !byte %.....#.#
    !byte %......##
    !byte %......##
    !byte %.....#.#
    !byte %....#.#.
    !byte %...#.#..
    !byte %..#.#...
    !byte %...#....
    !byte %#.#.....
    !byte %##......
    !byte %##......
    !byte %#.#.....
    !byte %.#.#....
    !byte %..#.#...
    !byte %...#.#..
    !byte %....#...

    !byte %........            ;
    !byte %........            ;
    !byte %......##            ;      ####
    !byte %########            ;################
    !byte %#.#.#.##            ;# # # #### # # #
    !byte %########            ;################
    !byte %...#..##            ;   #  ####  #
    !byte %..#.#..#            ;  # #  ##  # #
    !byte %........            ;   # # ## # #
    !byte %........            ;    # #### #
    !byte %##......            ;     # ## #
    !byte %########            ;      ####
    !byte %##.#.#.#            ;  #   ####
    !byte %########            ; #   # ## # #
    !byte %##..#...            ;    # #  # # #
    !byte %#..#.#..            ;   # #    # #

    !byte %...#.#.#
    !byte %....#.##
    !byte %.....#.#
    !byte %......##
    !byte %..#...##
    !byte %.#...#.#
    !byte %....#.#.
    !byte %...#.#..
    !byte %#.#.#...
    !byte %##.#....
    !byte %#.#.....
    !byte %##......
    !byte %##......
    !byte %#.#.#...
    !byte %.#.#.#..
    !byte %..#.#...

    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;             ###
    !byte %......##            ;      ######## #
    !byte %########            ;########## # ###
    !byte %#.#.#.##            ;# # # #######
    !byte %########            ;##########
    !byte %........            ;      ####
    !byte %........            ;       ##
    !byte %........            ;   # # ## #  #
    !byte %.....###            ; #  # #### #  #
    !byte %######.#            ;     # ## #  #
    !byte %##.#.###            ;  #   ####    #
    !byte %#####...            ;    # #### #
    !byte %##......            ;  #  # ## # #

    !byte %......##
    !byte %.......#
    !byte %...#.#.#
    !byte %.#..#.##
    !byte %.....#.#
    !byte %..#...##
    !byte %....#.##
    !byte %..#..#.#
    !byte %##......
    !byte %#.......
    !byte %#.#..#..
    !byte %##.#..#.
    !byte %#.#..#..
    !byte %##....#.
    !byte %##.#....
    !byte %#.#.#...

    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %........            ;
    !byte %......##            ;      ####   ###
    !byte %...#####            ;   ########### #
    !byte %........            ;##  # #### # ###
    !byte %........            ;# #  ########
    !byte %........            ;###   ####
    !byte %........            ;       ##     #
    !byte %........            ;  #  # ## #  # #
    !byte %........            ; #  # #### #
    !byte %##...###            ;     # ## #   #
    !byte %######.#            ; # #  ####   #

    !byte %##..#.##
    !byte %#.#..###
    !byte %###...##
    !byte %.......#
    !byte %..#..#.#
    !byte %.#..#.##
    !byte %.....#.#
    !byte %.#.#..##
    !byte %##.#.###
    !byte %#####...
    !byte %##......
    !byte %#.....#.
    !byte %#.#..#.#
    !byte %##.#....
    !byte %#.#...#.
    !byte %##...#..

    !byte %.##....#            ; ##    ##    ##
    !byte %#..#####            ;#  ##########  #
    !byte %#..#####            ;#  ##########  #
    !byte %.##....#            ; ##    ##    ##
    !byte %.....###            ;     ######
    !byte %########            ;################
    !byte %#.......            ;#              #
    !byte %#.#.#.#.            ;# # # # # # #  #
    !byte %#....##.            ;#  ########### #
    !byte %#####..#            ;# ## # # # ##  #
    !byte %#####..#            ;#  #        ## #
    !byte %#....##.            ;# ## # # # ##  #
    !byte %###.....            ;#  ########### #
    !byte %########            ;# # # # # # #  #
    !byte %.......#            ;#              #
    !byte %#.#.#..#            ;################

    !byte %#..#####
    !byte %#.##.#.#
    !byte %#..#....
    !byte %#.##.#.#
    !byte %#..#####
    !byte %#.#.#.#.
    !byte %#.......
    !byte %########
    !byte %######.#
    !byte %.#.##..#
    !byte %....##.#
    !byte %.#.##..#
    !byte %######.#
    !byte %#.#.#..#
    !byte %.......#
    !byte %########

    !byte %...###.#            ;   ### ## ###
    !byte %..#...#.            ;  #   # ###  #
    !byte %..#...#.            ;  #   # ###  #
    !byte %...###.#            ;   ### ## ###
    !byte %......##            ;      ####
    !byte %########            ;################
    !byte %##.#.#.#            ;## # # # # # # #
    !byte %#.######            ;# ##############
    !byte %#.###...            ;### # # # # ## #
    !byte %###..#..            ;# ##         ###
    !byte %###..#..            ;###  # # #  ## #
    !byte %#.###...            ;# ##         ###
    !byte %##......            ;### # # # # ## #
    !byte %########            ;# ##############
    !byte %.#.#.#.#            ;## # # # # # # #
    !byte %########            ;################

    !byte %###.#.#.
    !byte %#.##....
    !byte %###..#.#
    !byte %#.##....
    !byte %###.#.#.
    !byte %#.######
    !byte %##.#.#.#
    !byte %########
    !byte %#.#.##.#
    !byte %.....###
    !byte %.#..##.#
    !byte %.....###
    !byte %#.#.##.#
    !byte %########
    !byte %.#.#.#.#
    !byte %########

    !byte %.....###            ;     ######
    !byte %....#...            ;    #      #
    !byte %....#...            ;    #      #
    !byte %.....###            ;     ######
    !byte %......##            ;      ####
    !byte %########            ;################
    !byte %########            ;################
    !byte %##.#.#.#            ;## # # # # # ###
    !byte %###.....            ;###           ##
    !byte %...#....            ;##  # # # #  ###
    !byte %...#....            ;###  #######  ##
    !byte %###.....            ;##  # #   #  ###
    !byte %##......            ;###           ##
    !byte %########            ;## # # # # # ###
    !byte %########            ;################
    !byte %.#.#.###            ;################

    !byte %###.....
    !byte %##..#.#.
    !byte %###..###
    !byte %##..#.#.
    !byte %###.....
    !byte %##.#.#.#
    !byte %########
    !byte %########
    !byte %......##
    !byte %#.#..###
    !byte %####..##
    !byte %..#..###
    !byte %......##
    !byte %.#.#.###
    !byte %########
    !byte %########

    !byte %...###.#            ;   ### ## ###
    !byte %..#.####            ;  # #### #   #
    !byte %..#.####            ;  # #### #   #
    !byte %...###.#            ;   ### ## ###
    !byte %......##            ;      ####
    !byte %########            ;################
    !byte %#.#.#.#.            ;# # # # # # # ##
    !byte %##......            ;##             #
    !byte %#.###...            ;#  # # # # #  ##
    !byte %.#...#..            ;##  #########  #
    !byte %.#...#..            ;#  ##      #  ##
    !byte %#.###...            ;##  #########  #
    !byte %##......            ;#  # # # # #  ##
    !byte %########            ;##             #
    !byte %#.#.#.##            ;# # # # # # # ##
    !byte %.......#            ;################

    !byte %#..#.#.#
    !byte %##..####
    !byte %#..##...
    !byte %##..####
    !byte %#..#.#.#
    !byte %##......
    !byte %#.#.#.#.
    !byte %########
    !byte %.#.#..##
    !byte %#####..#
    !byte %...#..##
    !byte %#####..#
    !byte %.#.#..##
    !byte %.......#
    !byte %#.#.#.##
    !byte %########

    !byte %........            ;            ###
    !byte %........            ;          ##  ##
    !byte %........            ;        ##   # #
    !byte %......##            ;      ##   ##  #
    !byte %....##..            ;    ##   ##  # #
    !byte %..##...#            ;  ##   ##  ### #
    !byte %##...##.            ;##   ##  ##### #
    !byte %#..##..#            ;#  ##  ##  ### #
    !byte %....###.            ;##   ##    ### #
    !byte %..##..##            ;####   ##  ### #
    !byte %##...#.#            ; #####   ##### #
    !byte %...##..#            ;   #####   ### #
    !byte %.##..#.#            ;     ##### ### #
    !byte %#..###.#            ;       ####### #
    !byte %.#####.#            ;         #######
    !byte %#..###.#            ;           ####

    !byte %##...##.
    !byte %####...#
    !byte %.#####..
    !byte %...#####
    !byte %.....###
    !byte %.......#
    !byte %........
    !byte %........
    !byte %...###.#
    !byte %#..###.#
    !byte %.#####.#
    !byte %...###.#
    !byte %##.###.#
    !byte %######.#
    !byte %.#######
    !byte %...####.

    !byte %......##            ;      ####
    !byte %.....###            ;     ### #
    !byte %.....##.            ;     ##   #
    !byte %....###.            ;    ### # #
    !byte %....##..            ;    ##  #  #
    !byte %...###.#            ;   ### # # #
    !byte %...##..#            ;   ##  # #  #
    !byte %..###.#.            ;  ### #   # #
    !byte %##......            ;  ##  #   #  #
    !byte %.#......            ; ### #     # #
    !byte %..#.....            ; ##  #     #  #
    !byte %#.#.....            ;########### # #
    !byte %#..#....            ;########### #  #
    !byte %.#.#....            ;############ # #
    !byte %.#..#...            ; #            ##
    !byte %..#.#...            ; ##############

    !byte %..##..#.
    !byte %.###.#..
    !byte %.##..#..
    !byte %########
    !byte %########
    !byte %########
    !byte %.#......
    !byte %.#######
    !byte %..#..#..
    !byte %...#.#..
    !byte %...#..#.
    !byte %###.#.#.
    !byte %###.#..#
    !byte %####.#.#
    !byte %......##
    !byte %#######.

    !byte %..###...            ;  ###
    !byte %#######.            ;#######
    !byte %#.######            ;# #######
    !byte %#.###.##            ;# ### #####
    !byte %#.###...            ;# ###   #####
    !byte %#.#####.            ;# #####   #####
    !byte %#.###..#            ;# ###  ##   ####
    !byte %#.###...            ;# ###    ##   ##
    !byte %........            ;# ###  ##  ##  #
    !byte %........            ;# #####  ##   ##
    !byte %#.......            ;# ###  ##   ##
    !byte %###.....            ;# #  ##   ##
    !byte %#####...            ;#  ##   ##
    !byte %..#####.            ;# #   ##
    !byte %#...####            ;##  ##
    !byte %.##...##            ; ###

    !byte %#.###..#
    !byte %#.#####.
    !byte %#.###..#
    !byte %#.#..##.
    !byte %#..##...
    !byte %#.#...##
    !byte %##..##..
    !byte %.###....
    !byte %#..##..#
    !byte %.##...##
    !byte %#...##..
    !byte %..##....
    !byte %##......
    !byte %........
    !byte %........
    !byte %........

    !byte %.#######            ; ##############
    !byte %#.......            ;#             #
    !byte %#.#.####            ;# # ############
    !byte %#..#.###            ;#  # ###########
    !byte %.#.#.###            ; # # ###########
    !byte %.#..#.#.            ; #  # #   #  ##
    !byte %..#.#.#.            ;  # # #   # ###
    !byte %..#..#.#            ;  #  # # #  ##
    !byte %#######.            ;   # # # # ###
    !byte %......#.            ;   #  # #  ##
    !byte %########            ;    # # # ###
    !byte %########            ;    #  #  ##
    !byte %########            ;     # # ###
    !byte %..#..##.            ;     #   ##
    !byte %..#.###.            ;      # ###
    !byte %.#..##..            ;      ####

    !byte %...#.#.#
    !byte %...#..#.
    !byte %....#.#.
    !byte %....#..#
    !byte %.....#.#
    !byte %.....#..
    !byte %......#.
    !byte %......##
    !byte %.#.###..
    !byte %#..##...
    !byte %#.###...
    !byte %..##....
    !byte %.###....
    !byte %.##.....
    !byte %###.....
    !byte %##......

    !byte %....#.#.             ; ....#.#...#.....
    !byte %...#.##.             ; ...#.##..##.#...
    !byte %.......#             ; .......#.#.#....
    !byte %..###..#             ; ..###..#.##...#.
    !byte %.##..#.#             ; .##..#.###..###.
    !byte %......##             ; ......####.#....
    !byte %########             ; ###########.###.
    !byte %#....###             ; #....#######...#
    !byte %..#.....             ; .###.#######.#..
    !byte %.##.#...             ; ##...###########
    !byte %.#.#....             ; #...#.######...#
    !byte %.##...#.             ; ..##..#.#.#.##..
    !byte %##..###.             ; .##..#..#.#..##.
    !byte %##.#....             ; .#..#..##.#...#.
    !byte %###.###.             ; ...#..#.#..#....
    !byte %####...#             ; ..##.##.#..##...

    !byte %.###.###
    !byte %##...###
    !byte %#...#.##
    !byte %..##..#.
    !byte %.##..#..
    !byte %.#..#..#
    !byte %...#..#.
    !byte %..##.##.
    !byte %####.#..
    !byte %########
    !byte %####...#
    !byte %#.#.##..
    !byte %#.#..##.
    !byte %#.#...#.
    !byte %#..#....
    !byte %#..##...

    !byte %........            ;
    !byte %.....#.#            ;     # #  #
    !byte %......##            ;      ## #
    !byte %..##...#            ;  ##   # ### #
    !byte %...###.#            ;   ### ###  ##
    !byte %......##            ;      #### #
    !byte %..######            ;  ######### ##
    !byte %......##            ;      ###### #
    !byte %........            ;  #########
    !byte %..#.....            ; ##  #########
    !byte %.#......            ;    # ######  #
    !byte %.###.#..            ;  ##  # # # ##
    !byte %##..##..            ;  #  #  # #  #
    !byte %##.#....            ;    # ###  #
    !byte %###.##..            ;   ## # ## ##
    !byte %####.#..            ;        ##

    !byte %..######
    !byte %.##..###
    !byte %....#.##
    !byte %..##..#.
    !byte %..#..#..
    !byte %....#.##
    !byte %...##.#.
    !byte %........
    !byte %###.....
    !byte %######..
    !byte %####..#.
    !byte %#.#.##..
    !byte %#.#..#..
    !byte %#..#....
    !byte %##.##...
    !byte %##......

    !byte %........            ;
    !byte %........            ;
    !byte %......#.            ;      #   #
    !byte %....#..#            ;    #  # ##
    !byte %.....#.#            ;     # ###  #
    !byte %......##            ;      #### #
    !byte %...#####            ;   ########
    !byte %.....###            ;     ########
    !byte %........            ;   ########
    !byte %........            ;   # ########
    !byte %..#.....            ;    ########
    !byte %.##.....            ;   #  # # # #
    !byte %##..#...            ;     # ## #
    !byte %##.#....            ;    # # # ##
    !byte %###.....            ;        ##
    !byte %#####...            ;

    !byte %...#####
    !byte %...#.###
    !byte %....####
    !byte %...#..#.
    !byte %.....#.#
    !byte %....#.#.
    !byte %........
    !byte %........
    !byte %###.....
    !byte %#####...
    !byte %####....
    !byte %#.#.#...
    !byte %#.#.....
    !byte %#.##....
    !byte %##......
    !byte %........

    !byte %........            ;
    !byte %.....#.#            ;     # #  #
    !byte %......##            ;      ## #
    !byte %..##...#            ;  ##   # ### #
    !byte %...###.#            ;   ### ###  ##
    !byte %......##            ;      #### #
    !byte %..######            ;  ######### ##
    !byte %......##            ;      ###### #
    !byte %........            ;  #########
    !byte %..#.....            ; ##  #########
    !byte %.#......            ;    # ######  #
    !byte %.###.#..            ;  ##  # # # ##
    !byte %##..##..            ;  #  #  # #  #
    !byte %##.#....            ;    # ###  #
    !byte %###.##..            ;   ## # ## ##
    !byte %####.#..            ;        ##

    !byte %..######
    !byte %.##..###
    !byte %....#.##
    !byte %..##..#.
    !byte %..#..#..
    !byte %....#.##
    !byte %...##.#.
    !byte %........
    !byte %###.....
    !byte %######..
    !byte %####..#.
    !byte %#.#.##..
    !byte %#.#..#..
    !byte %#..#....
    !byte %##.##...
    !byte %##......

    !byte %........            ;
    !byte %....##..            ;    ##    ##
    !byte %......#.            ;      #  #
    !byte %.......#            ;       ##
    !byte %.....###            ;     ######
    !byte %.##.####            ; ## ######## ##
    !byte %...##..#            ;   ##  ##  ##
    !byte %....#.#.            ;    # #  # #
    !byte %........            ;#####  ##  #####
    !byte %..##....            ;   ####  ####
    !byte %.#......            ;   ###    ###
    !byte %#.......            ; #####    # ###
    !byte %###.....            ;#  ## #### ##  #
    !byte %####.##.            ;    ##  # ##
    !byte %#..##...            ;     ######
    !byte %.#.#....            ;       ##

    !byte %#####..#
    !byte %...####.
    !byte %...###..
    !byte %.#####..
    !byte %#..##.##
    !byte %....##..
    !byte %.....###
    !byte %.......#
    !byte %#..#####
    !byte %.####...
    !byte %..###...
    !byte %..#.###.
    !byte %##.##..#
    !byte %#.##....
    !byte %###.....
    !byte %#.......

    !byte %........            ;
    !byte %........            ;
    !byte %....###.            ;    ###  ###
    !byte %.#.....#            ; #     ##     #
    !byte %..#..###            ;  #  ######  #
    !byte %...#####            ;   ##########
    !byte %#...#..#            ;#   #  ##  #   #
    !byte %.####.#.            ; #### #  # ####
    !byte %........            ;   ##  ##  ##
    !byte %........            ;   ####  ####
    !byte %.###....            ;######    ######
    !byte %#.....#.            ;   # #    # #
    !byte %###..#..            ;   ####### ##
    !byte %#####...            ;    ##   ###
    !byte %#..#...#            ;     ######
    !byte %.#.####.            ;       ##

    !byte %...##..#
    !byte %...####.
    !byte %######..
    !byte %...#.#..
    !byte %...#####
    !byte %....##..
    !byte %.....###
    !byte %.......#
    !byte %#..##...
    !byte %.####...
    !byte %..######
    !byte %..#.#...
    !byte %##.##...
    !byte %.###....
    !byte %###.....
    !byte %#.......

    !byte %........            ;
    !byte %....##..            ;    ##    ##
    !byte %......#.            ;      #  #
    !byte %.......#            ;       ##
    !byte %.....###            ;     ######
    !byte %.#..####            ; #  ########  #
    !byte %..######            ;  ############
    !byte %....###.            ;    ###  ###
    !byte %........            ;## ##  ##  ## ##
    !byte %..##....            ;  #####  #####
    !byte %.#......            ;   ###    ###
    !byte %#.......            ; ### #    # ###
    !byte %###.....            ;#  ## ####### ##
    !byte %####..#.            ;    ###   ##
    !byte %######..            ;     ######
    !byte %.###....            ;       ##

    !byte %##.##..#
    !byte %..#####.
    !byte %...###..
    !byte %.###.#..
    !byte %#..##.##
    !byte %....###.
    !byte %.....###
    !byte %.......#
    !byte %#..##.##
    !byte %.#####..
    !byte %..###...
    !byte %..#.###.
    !byte %#####.##
    !byte %..##....
    !byte %###.....
    !byte %#.......

    !byte %.....#..            ;     #    #
    !byte %.....#..            ;     #    #
    !byte %......#.            ;      #  #
    !byte %.......#            ;       ##
    !byte %.....###            ;     ######
    !byte %....####            ;    ########
    !byte %.#######            ; ##############
    !byte %....#.#.            ;    # #  # #   #
    !byte %..#.....            ;    #  ##  ##
    !byte %..#.....            ; ######  ######
    !byte %.#......            ;#  ###    ###  #
    !byte %#.......            ;   # #    # #
    !byte %###.....            ;  ### #### ###
    !byte %####....            ; #  ## #  ##  #
    !byte %#######.            ; #   ######   #
    !byte %.#.#...#            ;       ##

    !byte %....#..#
    !byte %.######.
    !byte %#..###..
    !byte %...#.#..
    !byte %..###.##
    !byte %.#..##.#
    !byte %.#...###
    !byte %.......#
    !byte %#..##...
    !byte %.######.
    !byte %..###..#
    !byte %..#.#...
    !byte %##.###..
    !byte %..##..#.
    !byte %###...#.
    !byte %#.......


; ***************************************************************************************
    ; Three bytes per horizontal guardian, specifying initial position and direction:
    ;   X1, Y + top bit, X2
    ;   top bit indicates initial direction (set = left), initial bounce at X2
guardianLevelData
    ; level 1 - Central Cavern
    !byte $ff, $1a, $87, $3a
    ; level 2 - The Cold Room
    !byte $ff, $47, $03, $01, $72, $0d, $2d
    ; level 3 - The Menagerie
    !byte $ff, $3f, $03, $01, $4a, $0d, $01, $45, $83, $72
    ; level 4 - Abandoned Uranium Workings
    !byte $ff, $01, $8d, $26, $15, $8d, $3a
    ; level 5 - Eugene's Lair
    !byte $ff, $0c, $87, $2f, $2f, $03, $01
    ; level 6 - Processing Plant
    !byte $ff, $14, $88, $32, $34, $88, $52, $19, $8d, $4e, $5d, $8d, $72
    ; level 7 - The Vat
    !byte $ff, $38, $81, $72, $27, $08, $05, $41, $8d, $72
    ; level 8 - Miner Willy meets the Kong Beast
    !byte $ff, $22, $0d, $01, $29, $ab, $3a, $45, $87, $52
    ; level 9 - Wacky Amoebatrons
    !byte $ff, $31, $83, $46, $31, $aa, $46
    ; level 10 - The Endorian Forest
    !byte $ff, $41, $85, $52, $20, $87, $36, $0d, $8d, $66, $36, $2a, $1c
    ; level 11 - Attack of the Mutant Telephones
    !byte $ff, $14, $8d, $4a, $38, $83, $5b, $35, $a7, $49
    ; level 12 - Return of the Alien Kong Beast
    !byte $ff, $26, $ab, $3a, $22, $0d, $02, $5e, $86, $6e
    ; level 13 - Ore Refinery
    !byte $ff, $1a, $81, $6e, $6e, $24, $1a, $62, $07, $26, $5a, $2a, $1a
    ; level 14 - Skylab Landing Bay
    !byte $ff
    ; level 15 - The Bank
    !byte $ff, $40, $ad, $4b
    ; level 16 - The Sixteenth Cavern
    !byte $ff, $65, $a5, $72, $4a, $0d, $02, $45, $87, $5e, $02, $8a, $1e
    ; level 17 - The Warehouse
    !byte $ff, $10, $ad, $1f, $2c, $8d, $62
    ; level 18 - Amoebatrons' Revenge
    !byte $ff, $2e, $a3, $46, $46, $06, $2e, $2e, $aa, $46, $42, $0d, $2e
    ; level 19 - The Meteor Storm
    !byte $ff, $4a, $0b, $1e, $72, $0d, $5a, $1a, $0d, $02
    ; level 20 - The Final Barrier
    !byte $ff, $1a, $83, $2e, $4a, $21, $30, $29, $29, $05
    !byte $ff

; ***************************************************************************************
; The fixed text under the play area: "Score         Lives     Level"
; but with the top bit being the conveyor direction for each level (for the first 20 bytes)
fixedText
    !text $00 + 'S', $80 + 'c', $00 + 'o', $80 + 'r', $00 + 'e'
    !text $00 + ' ', $00 + $09, $80 + $09, $80 + $09, $00 + $09
    !text $00 + $09, $80 + $09, $80 + ' ', $00 + ' ', $00 + 'L'
    !text $00 + 'i', $80 + 'v', $00 + 'e', $80 + 's', $00 + ' '
    !text $09, $09, $20, $20, "Level"
fixedTextEnd

; ***************************************************************************************
levelTitles
    !text 9, "Central Cavern"
    !text 9, "The Cold Room"
    !text 9, "The Menagerie"
    !text 3, "Abandoned Uranium Workings"
    !text 9, "Eugene's Lair"
    !text 8, "Processing Plant"
    !text 12, "The Vat"
    !text 0, "Miner Willy meets the Kong Beast"
    !text 7, "Wacky Amoebatrons"
    !text 6, "The Endorian Forest"
    !text 0, "Attack of the Mutant Telephones"
    !text 1, "Return of the Alien Kong Beast"
    !text 10, "Ore Refinery"
    !text 7, "Skylab Landing Bay"
    !text 12, "The Bank"
    !text 6, "The Sixteenth Cavern"
    !text 9, "The Warehouse"
    !text 6, "Amoebatrons' Revenge"
    !text 7, "The Meteor Storm     "        ; ... should really be the "Solar Power Generator" level
    !text 7, "The Final Barrier"
    !byte $0d                               ; terminator

; ***************************************************************************************
exitMessage
    !byte $f1, $f2, $0a, $08, $08   ; $f1, $f2
    !byte $f3, $f4, $00             ; $f3, $f4


; ***************************************************************************************
plotMessageStart
    !byte 25                        ; VDU 25
plotType
    !byte $ea                       ;
plotXLow
    !byte $ea                       ;
plotXHigh
    !byte $ea                       ;
plotYLow
    !byte $ea                       ;
plotYHigh
    !byte $ea                       ;
plotMessageEnd

switchMessage2
    !byte $1f, $13, $01             ; TAB(19, 1)
switchClearCentreMessage
    !byte $20, $20, $0a, $08, $08   ; two spaces and move down and back
switchClearCentreMessageEnd
switchMessage2End

switchMessage
    !byte $99                       ; the switched switch sprite
    !byte 31, 21, 12                ; TAB(21, 12)
    !byte charSPACE                 ; space
    !byte 10, 8, charSPACE          ; another space below. This removes a section of wall.
switchMessageEnd

crtcSetup
    !byte 23, 0,  7,  30, $ff       ; VDU 23,0,7,30,0;0;0;0;   vertical sync position = 30
    !byte 23, 1,  0,   0, $ff       ; VDU 23,0,1, 0,0;0;0;0;   horizontal displayed = 0
    !byte 23, 0, 13, $50, $ff       ; set display address (low)
crtcSetupEnd

; ***************************************************************************************
airMessage
    !byte $11, 3                    ; COLOUR 2
    !byte $1f, 4, 18                ; TAB(4,18)
    !byte $11, 129                  ; COLOUR 129
    !text "AIR"                     ;
    !text "       "                 ;
    !byte $11, 130                  ; COLOUR 130
    !text "                      "  ;
    !byte $11, 128                  ; COLOUR 128
    !byte 25, 4                     ;
    !word           256,  436       ; MOVE
    !byte 25, 5                     ;
    !word           1144, 436       ; MOVE
    !byte 25, $55                   ;
    !word           256, 424        ; DRAW
    !byte 25, $55                   ;
    !word           1144, 424       ; DRAW
airMessageEnd

; ***************************************************************************************
pedestalMessage
    !byte $11, $03                  ; COLOUR 3
    !byte $1f, $13, $0f             ; TAB(19,15)
    !byte $80, $81                  ; draw leg
    !byte $0a, $08, $08             ; down and back
    !byte $82, $83                  ; draw foot

; ***************************************************************************************
level20EnergyFieldsString
    !byte $11, $02                                  ; COLOUR 2
    !byte $1f, $14, $0b                             ; TAB(20,11)
    !byte $1f, $1c, $02                             ; TAB(28, 2)

; ***************************************************************************************
keysToRead
    ;      f0,  f1,  f2,  f3,  f4,  f5,  f6,  f7,  f8,  f9
    !byte $df, $8e, $8d, $8c, $eb, $8b, $8a, $e9, $89, $88
keysToReadEnd

; ***************************************************************************************
oswordSoundBlock
    !byte $01, $00, $00, $00, $00, $00, $00, $00    ;

; ***************************************************************************************
; uninitialized variables
; ***************************************************************************************

footPositionY
    !byte $ea                                       ;

cheatModeEnabled
    !byte $00                                       ;

; ***************************************************************************************
levelNumberCounter
tempCounter
    !byte $ea                       ;

zeroBasedLevel
    !byte $ea                       ;

; ***************************************************************************************
; sprite numbers to draw (level specific)
levelFeatureArray
levelFeature0
    !byte $e0                           ;
levelFeature1
    !byte $e2                           ;
levelFeature2
    !byte $ef                           ;
levelFeature3
    !byte $eb                           ;
levelFeature4
    !byte $ea                           ;

; ***************************************************************************************
levelColourArray
    !byte $01, $01, $03, $02, $03       ;
    !byte $00, $00, $00                 ;

; ***************************************************************************************
roomNumberReached
    !byte $00                           ;

; ***************************************************************************************
screenAreaMinY
    !byte $18,$30,$48,$60,$78,$90,$A8,$C0
dangerAreas
    !byte  7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7

; ***************************************************************************************
cacheOffsetX
    !byte 0, 1, 0, 1, 0, 1
cacheOffsetY
    !byte 0, 0, 1, 1, 2, 2

; ***************************************************************************************
yOffsetsTable
    !byte $ff,0,0,0,0,0,0,0
    !byte 0,0,0,0,0,0,0,0
    !byte 8,0,0,0,0,0,0,0
    !byte 16

; ***************************************************************************************
toFullColour
    !byte $00, $11, $22, $33, $44, $55, $66, $77, $88, $99, $aa, $bb, $cc, $dd, $ee, $ff

; ***************************************************************************************
byteMaskGreen
    !byte $f0, $f8, $fc, $fe

; ***************************************************************************************
byteMaskRed
    !byte $0f, $8f, $cf, $ef

; ***************************************************************************************
debugChangePalette
    ora paletteLookupTable                  ;
    sta videoULAPaletteRegister             ; store actual colour in register
    eor #$10                                ;
    sta videoULAPaletteRegister             ; store actual colour in register
    eor #$50                                ;
    sta videoULAPaletteRegister             ; store actual colour in register
    eor #$10                                ;
    sta videoULAPaletteRegister             ; store actual colour in register
    rts
paletteLookupTable
    !byte $00, $20, $80, $A0

energyFieldString
    !byte $1f, 15, 5                    ; TAB(15, 5)
    !byte $2a                           ;
    !byte $1f, 15, 9                    ; TAB(15, 9)
    !byte $2a                           ;
    !byte $1f, 24, 5                    ;
    !byte $2a                           ;
    !byte $1f, 24, 9                    ; TAB(24, 9)
    !byte $2a                           ;

guardianColourMasks
    !byte $f0, $ff, $0f, $f0        ;

; ***************************************************************************************
keyXPositions
    !byte $ea, $ea, $ea, $ea, $ea   ;
keyYPositions
    !byte $ea, $ea, $ea, $ea, $ea   ;
keyGot
    !byte $00, $00, $00, $00, $00   ;

keyPositionCounter
    !byte $0f                       ;
currentKeyIndex
    !byte $00                       ;
keyColourCounter
    !byte $00                       ;

; ***************************************************************************************
attractModeTimer
    !byte $ea                       ;

cheatCodeCounter
    !byte $00                       ;

; ***************************************************************************************
; level decode
singleItemSprite
    !byte $ea                       ;
decodeLevelByte
    !byte $ea                       ;
singleItemX
    !byte $ea                       ;
singleItemY
    !byte $ea                       ;
singleItemOffsetX
    !byte $ea                       ;
singleItemType
    !byte $ea                       ;
singleItemSpriteOffset
    !byte $ea                       ;

musicEnabled
    !byte $ea                       ;


; ***************************************************************************************
; ***************************************************************************************
; ***************************************************************************************
; ***************************************************************************************
; ***************************************************************************************
; ***************************************************************************************
; ***************************************************************************************
; ***************************************************************************************
; ***************************************************************************************
; ***************************************************************************************
; rapidly changing variables - keep them off screen?
; ***************************************************************************************
; ***************************************************************************************
; ***************************************************************************************
; ***************************************************************************************
; ***************************************************************************************
; ***************************************************************************************
; ***************************************************************************************
; ***************************************************************************************
; ***************************************************************************************
; ***************************************************************************************

energyFieldTimer
    !byte $ea                                       ;

; ***************************************************************************************
kongYCoordinate
    !byte $ea                                       ;
kongBeastSwitchTriggered
    !byte $00                       ;
kongAnimationCounter
    !byte $ea

; ***************************************************************************************
eugenePositionY
    !byte $ea                       ; top bit indicates current direction

copyEugeneSourceByte
    !byte $ea                       ;
copyEugeneTempByte
copyWhichSprite
    !byte $ea                       ;


willySpriteAddressLow
    !byte $00
willySpriteAddressHigh
    !byte $00

    !byte $00                       ; [UNUSED, but copied in and out of cache]
    !byte $00                       ; [UNUSED, but copied in and out of cache]
    !byte $00                       ; [UNUSED, but copied in and out of cache]

conveyorDirection
    !byte $ff                       ;

; ***************************************************************************************
textCursorX
    !byte $00
textCursorY
    !byte $ea

; ***************************************************************************************
meteorLandingY
    !byte $06                       ;
meteorXCoordinate
    !byte $08                       ;
meteorYCoordinate
    !byte $ff                       ;
meteorAnimationState
    !byte $00                       ;
meteorIndex
    !byte $00                       ;

; ***************************************************************************************
    ; Each vertical guardian has four bytes in this table
    ; <x coord + top bit for direction + bit 6 for speed>, <y coord>, <Y extent 1>, <Y extent 2>
currentVerticalGuardians
    !byte $ea, $ea, $ea, $ea        ; first  guardian
verticalGuardian2
    !byte $ea, $ea, $ea, $ea        ; second guardian
    !byte $ea, $ea, $ea, $ea        ; third  guardian
    !byte $ea, $ea, $ea, $ea        ; fourth guardian
endOfEverything

!if * > $8000 {
    !error "space is wrong, ", *
}

}


free4 = $8000 - endOfEverything
allFree = free1 + free2 + free3 + free4
